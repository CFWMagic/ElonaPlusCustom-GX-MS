#deffunc efllistaddeval int efllistadd_arg1, int efllistadd_arg2, int efllistadd_arg3
	if ( dbg_tcg == FALSE ) { return }
	// Below line visualized play weight, enable if you want to debug
	efllistadd efllistadd_arg1, efllistadd_arg2, card@tcg(TCG_CARD_X, efllistadd_arg3), card@tcg(TCG_CARD_Y, efllistadd_arg3) - 40 + efllistadd_arg1 * 40, card@tcg(TCG_CARD_X, efllistadd_arg3), card@tcg(TCG_CARD_Y, efllistadd_arg3) - 40 + efllistadd_arg1 * 40
	return

*ai_evaluate
	emax@tcg = 0
	repeat clistmax@tcg(ch@tcg)
		if ( aiblock@tcg ) {
			break
		}
		c@tcg = clist@tcg(cnt, ch@tcg)
		p@tcg = 10
		if ( card@tcg(TCG_CARD_REF_TYPE, c@tcg) == TCG_TYPE_CREATURE ) {
			p@tcg = 20
			p@tcg -= abs(cpdata@tcg(TCG_PLAYER_MAX_MANA, cp@tcg) - card@tcg(TCG_CARD_REF_COST, c@tcg) + (sac@tcg == 0))
		}
		// Legendary cards are played first and discarded last.
		if ( card@tcg(TCG_CARD_REF_DOMAIN, c@tcg) == 5 ) { p@tcg += 10 }
		if ( cdbit(TCG_BIT_FLEETING, c@tcg) ) { p@tcg += 20 }
		if ( effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg)) == TCG_SKILL_AI_KEEPALIVE ) { p@tcg += rnd(3) }
		if ( cpdata@tcg(TCG_PLAYER_LIFE, cp@tcg) >= 8 ) {
			if ( effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg)) == TCG_SKILL_AI_HOLD ) { p@tcg -= getholdersum(cp@tcg) / 2 }
			if ( effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg)) == TCG_SKILL_AI_HOLDDONTPLAY ) { p@tcg -= 50 }
			if ( effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg)) >= TCG_SKILL_AI_PLAYIFYOUHAVE ) {
				p@tcg = -50
				repeat clistmax@tcg(cl@tcg)
					if ( card@tcg(TCG_CARD_REF_DBID, clist@tcg(cnt, cl@tcg)) == effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg)) - TCG_SKILL_AI_PLAYIFYOUHAVE ) {
						p@tcg = 100
					}
				loop 
			}
		}
		if ( effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg)) == TCG_SKILL_AI_AOE ) { p@tcg += (-20) + 15 * (clistmax@tcg(tl@tcg) - clistmax@tcg(cl@tcg)) }
		if ( effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg)) == TCG_SKILL_AI_HOLDAWHILE ) { p@tcg = (-20) + 15 * card@tcg(TCG_CARD_TURN_COUNT, c@tcg) }
		if ( effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg)) == TCG_SKILL_AI_DRAW ) { p@tcg += 2 * (5 - getholdersum(cp@tcg)) }
		if ( effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg)) == TCG_SKILL_AI_SAC ) { p@tcg -= 2 * (1 + getspotsum(cp@tcg)) }
		if ( cdbit(TCG_BIT_FOSSIL, c@tcg) ) { p@tcg = 1 }

		efllistaddeval 1, p@tcg, c@tcg
		p@tcg += rnd(2)
		elist@tcg(TCG_EVAL, emax@tcg) = p@tcg, c@tcg, TCG_ACTION_SUMMON
		emax@tcg++
	loop
	if ( aiblock@tcg == 0 ) {
		repeat clistmax@tcg(cl@tcg)
			c@tcg = clist@tcg(cnt, cl@tcg)
			if ( cardcandeclareattack(c@tcg) ) {
				p@tcg = 20 + rnd(10) + (card@tcg(TCG_CARD_ATTACK, c@tcg) - card@tcg(TCG_CARD_HP, c@tcg))
				// These cards attack later
				if ( cdbit(TCG_BIT_TRAMPLE, c@tcg) ) { p@tcg -= 10 }
				if ( cdbit(TCG_BIT_FLYING, c@tcg) ) { p@tcg -= 5 }
				if ( cdbit(TCG_BIT_INTIMIDATE, c@tcg) ) { p@tcg -= 5 }
				// Don't attack with 0 attack cards. (Occasionally to annoy you)
				if ( card@tcg(TCG_CARD_ATTACK, c@tcg) <= 0 & rnd(40) > 0 ) { p@tcg = -100 }
				// Do not attack using cards needed to be kept on field
				if ( effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg)) == TCG_SKILL_AI_KEEPALIVE | cdbit(TCG_BIT_REGENERATION, c@tcg) ) {
					cardwilldie@tcg = FALSE
					repeat clistmax@tcg(tl@tcg)
						if ( cardcanblock(clist@tcg(cnt, tl@tcg))) { 
							cardcankill@tcg = card@tcg(TCG_CARD_ATTACK, clist@tcg(cnt, tl@tcg)) + 50 * cdbit(TCG_BIT_DEATHTOUCH, clist@tcg(cnt, tl@tcg)) >= card@tcg(TCG_CARD_HP, c@tcg) + 100 * cdbit(TCG_BIT_ARMOR, c@tcg) + 100 * (card@tcg(TCG_CARD_HP, c@tcg) > 2) * cdbit(TCG_BIT_RIDER, c@tcg)
							if ( cardcankill@tcg ) {
								cardwilldie@tcg = TRUE
								p@tcg -= 10
							}
						}
					loop 
					if ( effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg)) == TCG_SKILL_AI_KEEPALIVE & cardwilldie@tcg ) {
						p@tcg = -101
					}
				}
				// Deathtouch card attack with some chance to annoy you.
				if ( cdbit(TCG_BIT_DEATHTOUCH, c@tcg) ) { p@tcg = 0 + 40 * rnd(2) }

				efllistaddeval 1, p@tcg, c@tcg
				p@tcg += rnd(2)
				elist@tcg(TCG_EVAL, emax@tcg) = p@tcg, c@tcg, TCG_ACTION_ATTACKING
				emax@tcg++
			}
		loop
	}
	else {
		repeat clistmax@tcg(cl@tcg)
			c@tcg = clist@tcg(cnt, cl@tcg)
			if ( cardcanblock(c@tcg, attackingcard@tcg) ) {
				// Initial weight being HP - attack diff. block with highest possible HP and lowest possible attack diff.
				p@tcg = limit(card@tcg(TCG_CARD_HP, c@tcg) - limit(card@tcg(TCG_CARD_ATTACK, c@tcg) - card@tcg(TCG_CARD_ATTACK, attackingcard@tcg), -10, 10) * 3, -20, 20)
				// Surplus basic merit flying/lifelink:
				if ( cdbit(TCG_BIT_LIFELINK, attackingcard@tcg) ) { p@tcg -= card@tcg(TCG_CARD_HP, attackingcard@tcg) }
				if ( cdbit(TCG_BIT_TRAMPLE, attackingcard@tcg) ) { p@tcg += card@tcg(TCG_CARD_HP, c@tcg) }
				if ( cdbit(TCG_BIT_FLYING, attackingcard@tcg) ) { p@tcg += 10 }
				if ( cdbit(TCG_BIT_INTIMIDATE, attackingcard@tcg) ) { p@tcg += 20 }
				// Get basic combat predictions
				cardsurvive@tcg = card@tcg(TCG_CARD_ATTACK, attackingcard@tcg) + 50 * cdbit(TCG_BIT_DEATHTOUCH, attackingcard@tcg) < card@tcg(TCG_CARD_HP, c@tcg) + 100 * cdbit(TCG_BIT_ARMOR, c@tcg) + 100 * (card@tcg(TCG_CARD_HP, c@tcg) > 2) * cdbit(TCG_BIT_RIDER, c@tcg)
				cardcankill@tcg = card@tcg(TCG_CARD_ATTACK, c@tcg) + 50 * cdbit(TCG_BIT_DEATHTOUCH, c@tcg) >= card@tcg(TCG_CARD_HP, attackingcard@tcg) + 100 * cdbit(TCG_BIT_ARMOR, attackingcard@tcg) + 100 * (card@tcg(TCG_CARD_EFFECT, attackingcard@tcg) == TCG_EFF_NOCOMBATDAMAGE) + 100 * (card@tcg(TCG_CARD_HP, attackingcard@tcg) > 2) * cdbit(TCG_BIT_RIDER, attackingcard@tcg)
				cardvantage@tcg = (cdbit(TCG_BIT_FIRST_STRIKE, c@tcg) | cdbit(TCG_BIT_DOUBLE_STRIKE, c@tcg)) - (cdbit(TCG_BIT_FIRST_STRIKE, attackingcard@tcg) | cdbit(TCG_BIT_DOUBLE_STRIKE, attackingcard@tcg))
				// Basic card advantage calcs
				if ( cardvantage@tcg < 0 & cardsurvive@tcg == 0 ) { cardcankill@tcg = 0 }
				if ( cardsurvive@tcg == 0 & cardcankill@tcg == 0 ) { p@tcg -= 2 }
				if ( cardsurvive@tcg ) { p@tcg += 10 }
				if ( cardcankill@tcg ) { p@tcg += 10 }
				if ( cardcankill@tcg & cardvantage@tcg ) { p@tcg += 10 }
				if ( cardsurvive@tcg & cdbit(TCG_BIT_REGENERATION, c@tcg) ) { p@tcg += 5 }
				if ( cardsurvive@tcg & cdbit(TCG_BIT_REGENERATION, c@tcg) & cdbit(TCG_BIT_VIGILANCE, c@tcg) ) { p@tcg += 5 }
				// Block with zombie/fodder with higher prio
				if ( card@tcg(TCG_CARD_ATTACK, c@tcg) == 0 ) { p@tcg += 5 }
				if ( card@tcg(TCG_CARD_EFFECT, c@tcg) == TCG_EFF_RETURNTOHANDWHENKILLED ) { p@tcg += 10 }
				if ( effref@tcg(TCG_SKILL_EFF, card@tcg(TCG_CARD_EFFECT, c@tcg)) == TCG_SKILL_EFF_RESURRECT ) { p@tcg += 10 }
				if ( cardsurvive@tcg == 0 & effref@tcg(TCG_SKILL_TYPE, card@tcg(TCG_CARD_EFFECT, c@tcg)) == TCG_SKILL_TYPE_DEATHRATTLE ) { p@tcg += 10 }
				// Do not defend using cards needed to be kept on field
				if ( (effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg)) == TCG_SKILL_AI_KEEPALIVE | cdbit(TCG_BIT_REGENERATION, c@tcg)) & cardsurvive@tcg == 0 ) { p@tcg = -101 }
				// Deathtouch card defend with some chance to annoy you.
				if ( cdbit(TCG_BIT_DEATHTOUCH, c@tcg) & cardvantage@tcg >= 0 ) { p@tcg = 10 + (-40) * (cardsurvive@tcg == 0) + 40 * rnd(2) }
				// Block attack with splitting creatures for profit.
				if ( cardsurvive@tcg & cdbit(TCG_BIT_SPLIT, c@tcg) ) { p@tcg = 101 }
				// Preferably, don't block first-attack cards.
				if ( cardvantage@tcg < 0 & cardsurvive@tcg == 0 ) { p@tcg = -102 }
				// Don't block 0 attack cards.
				if ( card@tcg(TCG_CARD_ATTACK, attackingcard@tcg) <= 0 & rnd(100) > 0 ) { p@tcg = -103 }
				// Force a block if life in danger
				if ( card@tcg(TCG_CARD_ATTACK, attackingcard@tcg) >= cpdata@tcg(TCG_PLAYER_LIFE, cp@tcg) - rnd(5) - rnd(5) ) {
					p@tcg = 102
				}

				efllistaddeval 1, p@tcg, c@tcg
				p@tcg += rnd(2)
				if ( p@tcg >= 100 | p@tcg <= -100 ) { p@tcg += 5 - rnd(10) }
				elist@tcg(TCG_EVAL, emax@tcg) = p@tcg, c@tcg, TCG_ACTION_DEFENDING
				emax@tcg++
			}
		loop
	}
	if ( emax@tcg == 0 ) {
		return
	}
	repeat
		f@tcg = 0
		repeat emax@tcg - 1
			if ( elist@tcg(TCG_EVAL_PROB, cnt) < elist@tcg(TCG_EVAL_PROB, cnt + 1) ) {
				cnt2@tcg = cnt
				repeat 3
					p@tcg(cnt) = elist@tcg(cnt, cnt2@tcg + 1)
					elist@tcg(cnt, cnt2@tcg + 1) = elist@tcg(cnt, cnt2@tcg)
					elist@tcg(cnt, cnt2@tcg) = p@tcg(cnt)
				loop
				f@tcg = 1
				break
			}
		loop
		if ( f@tcg == 0 ) {
			break
		}
	loop
	return

*ai_sac
	gosub *ai_evaluate
	if ( sac@tcg > 0 ) {
		return 0
	}
	if ( getholdersum(cp@tcg) <= cpdata@tcg(TCG_PLAYER_MAX_MANA, cp@tcg) / 4 + 1 ) {
		if ( rnd(4) ) {
			return 0
		}
	}
	f@tcg = 0
	p@tcg(1) = 50
	repeat emax@tcg
		c@tcg = elist@tcg(TCG_EVAL_TARGET, cnt)
		p@tcg = elist@tcg(TCG_EVAL_PROB, cnt)
		if ( card@tcg(TCG_CARD_LOCATION, c@tcg) != TCG_LOCATION_HAND ) {
			continue
		}
		if ( effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg)) == TCG_SKILL_AI_DRAW ) { p@tcg = 55 - getholdersum(cp@tcg) }
		if ( effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg)) == TCG_SKILL_AI_HOLD ) { p@tcg += 100 }
		if ( effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg)) == TCG_SKILL_AI_HOLDDONTPLAY ) { p@tcg += 100 }
		if ( effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg)) == TCG_SKILL_AI_HOLDAWHILE ) { p@tcg += 100 }
		if ( effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg)) == TCG_SKILL_AI_AOE ) { p@tcg = 40 + 5 * (clistmax@tcg(tl@tcg) - clistmax@tcg(cl@tcg)) }
		if ( effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg)) == TCG_SKILL_AI_SAC ) { p@tcg -= 20 }
		if ( card@tcg(TCG_CARD_REF_DOMAIN, c@tcg) == 5 ) { p@tcg += 20 }
		if ( effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg)) >= TCG_SKILL_AI_PLAYIFYOUHAVE ) { p@tcg += 50 }
		if ( p@tcg < p@tcg(1) ) {
			p@tcg(1) = p@tcg
			cc@tcg = c@tcg
			f@tcg = 1
		}
		efllistaddeval 2, p@tcg - 50, c@tcg
	loop
	if ( f@tcg ) {
		saccard cc@tcg, cp@tcg
		tcgdraw
		return 1
	}
	return 0

*card_ai
	spellused@tcg = 0
	aievacycle@tcg = 0
	*card_ai_RETRY
	aievacycle@tcg++
	if ( debug ) {
		await
		getkey a@tcg, 32
		if ( a@tcg ) {
			await 500
		}
	}
	else {
		stick a@tcg
		if ( a@tcg ) {
			promptAdd lang("降参する", "Escape?"), "a"
			promptAdd lang("降参する", "No"), "b"
			val = basex@tcg + 420, basey@tcg + 230, 200, 1
			gosub *prompt_key@
			if ( rtval == 0 ) {
				gameresult@tcg = -2
				cpdata@tcg(TCG_PLAYER_LIFE, 0) = 0
				return
			} else {
				gosub *ai_evaluate
				goto *card_ai_WHILE1
			}
		}
	}
	gosub *card_resolve_ongoing
	makecardlist
	// If AI had a high mana cost card, try to sacrifice a card before playing.
	if ( sac@tcg == 0 & aiblock@tcg == 0 ) {
		f@tcg = 0, 0
		repeat clistmax@tcg(ch@tcg)
			c@tcg = clist@tcg(cnt, ch@tcg)
			aip@tcg = effref@tcg(TCG_SKILL_AI_PREFERENCE, card@tcg(TCG_CARD_EFFECT, c@tcg))
			if ( card@tcg(TCG_CARD_COST, c@tcg) > cpdata@tcg(TCG_PLAYER_MANA, cp@tcg) ) { 
				f@tcg(0) = 1 
				efllistaddeval 1, 999, c@tcg
			}
			if ( aip@tcg != TCG_SKILL_AI_DRAW & aip@tcg != TCG_SKILL_AI_HOLD & aip@tcg != TCG_SKILL_AI_HOLDDONTPLAY & aip@tcg != TCG_SKILL_AI_HOLDAWHILE & (aip@tcg < TCG_SKILL_AI_PLAYIFYOUHAVE) ) { 
				f@tcg(1) = 1 
				efllistaddeval 2, 999, c@tcg
			}
		loop
		if ( f@tcg(0) == 1 & f@tcg(1) == 1 ) {
			gosub *ai_sac
			if ( stat == 1 ) {
				goto *card_ai
			}
		}
	}
	gosub *ai_evaluate
	ec@tcg = 0
	*card_ai_WHILE1
	if ( gameover() ) {
		goto *card_ai_WEND1
	}
	if ( ec@tcg >= emax@tcg ) {
		goto *card_ai_WEND1
	}
	if ( elist@tcg(TCG_EVAL_PROB, ec@tcg) <= 0 ) {
		goto *card_ai_WEND1
	}
	ecc@tcg = elist@tcg(TCG_EVAL_TARGET, ec@tcg)
	if ( elist@tcg(TCG_EVAL_ACTION, ec@tcg) == TCG_ACTION_SUMMON & card@tcg(TCG_CARD_LOCATION, ecc@tcg) == TCG_LOCATION_HAND ) {
		if ( card@tcg(TCG_CARD_COST, ecc@tcg) <= cpdata@tcg(TCG_PLAYER_MANA, cp@tcg) ) {
			putcard ecc@tcg, cp@tcg
			if ( stat == -1 ) {
				goto *card_ai_CARDSKIP
			}
			if ( gameover() ) {
				goto *card_ai_WEND1
			}
			if ( card@tcg(TCG_CARD_REF_TYPE, ecc@tcg) == TCG_TYPE_SPELL ) {
				cardstack@tcg(TCG_STACK, stack@tcg) = ecc@tcg, TCG_ACTION_INVOKING, cp@tcg
				stack@tcg++
				if ( chainmode@tcg ) {
					chaincontinue@tcg = 1
					spellused@tcg = 1
					goto *card_ai_WEND1
				}
				actionproc
			}
			goto *card_ai
		}
		else {
			if ( sac@tcg == 0 ) {
				gosub *ai_sac
				if ( stat == 1 ) {
					goto *card_ai
				}
			}
		}
	}
	ecc@tcg = elist@tcg(TCG_EVAL_TARGET, ec@tcg)
	if ( elist@tcg(TCG_EVAL_ACTION, ec@tcg) == TCG_ACTION_ATTACKING & card@tcg(TCG_CARD_LOCATION, ecc@tcg) == TCG_LOCATION_FIELD ) {
		cardstack@tcg(TCG_STACK, stack@tcg) = ecc@tcg, TCG_ACTION_ATTACKING, cp@tcg, -1
		stack@tcg++
		actionproc
		if ( player@tcg < 0 ) {
			goto *card_ai
		}
	}
	ecc@tcg = elist@tcg(TCG_EVAL_TARGET, ec@tcg)
	if ( elist@tcg(TCG_EVAL_ACTION, ec@tcg) == TCG_ACTION_DEFENDING & card@tcg(TCG_CARD_LOCATION, ecc@tcg) == TCG_LOCATION_FIELD ) {
		attacktarget@tcg = ecc@tcg
		goto *card_ai_WEND1
	}
	*card_ai_CARDSKIP
	ec@tcg++
	goto *card_ai_WHILE1
	*card_ai_WEND1
	if ( aiblock@tcg == 0 ) {
		if ( sac@tcg == 0 ) {
			gosub *ai_sac
			if ( stat == 1 ) {
				goto *card_ai
			}
		}
		if ( aievacycle@tcg < 3 ) {
			goto *card_ai_RETRY
		}
	}
	if ( gameover() ) {
		return
	}
	return

