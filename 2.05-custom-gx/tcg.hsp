#include "db_card.hsp"
#include "tcg_mod.hsp"
#include "tcg_skill.hsp"
#include "tcg_ai.hsp"
#include "tcg_custom.hsp"
// TCG is completely unused so I completely overwrite it at 2.19
// Ano uses deck as a card gallery, so if he change anything you only need to change `*select_deck` part below.

#deffunc dbghit
	*dbghit_WHILE1
		await
		stick a@tcg
		if ( a@tcg ) {
			return
		}
		goto *dbghit_WHILE1
	*dbghit_WEND1

#defcfunc cdbit int cdbit_bit, int cdbit_charid
	if ( cdbit_charid < 0 | cdbit_charid >= maxcard@tcg ) {
		return
	}
	HMMBITCHECK@ card@tcg(30 + cdbit_bit / 32, cdbit_charid), cdbit_bit \ 32
	return abs(stat)

#deffunc cdbitmod int cdbitmod_bit, int cdbitmod_charid, int cdbitmod_seton
	if ( cdbitmod_charid < 0 | cdbitmod_charid >= maxcard@tcg ) {
		return
	}
	if ( cdbitmod_seton == 0 ) {
		HMMBITOFF@ card@tcg(30 + cdbitmod_bit / 32, cdbitmod_charid), cdbitmod_bit \ 32
		return
	}
	if ( cdbitmod_bit == TCG_BIT_INSANE & cdbitmod_seton == 1 ) {
		if ( cdbit(TCG_BIT_INSANE, cdbitmod_charid) & card@tcg(TCG_CARD_LOCATION, cdbitmod_charid) == TCG_LOCATION_FIELD ) {
			if ( getspotsum(1 - card@tcg(TCG_CARD_CONTROLLER, cdbitmod_charid)) < 8 ) {
				card@tcg(TCG_CARD_CONTROLLER, cdbitmod_charid) = 1 - card@tcg(TCG_CARD_CONTROLLER, cdbitmod_charid)
				makecardlist
				cardpos 0, -1
				cardpos 1, -1
				HMMBITOFF@ card@tcg(30 + cdbitmod_bit / 32, cdbitmod_charid), cdbitmod_bit \ 32
				return
			}
		}
	}
	HMMBITON@ card@tcg(30 + cdbitmod_bit / 32, cdbitmod_charid), cdbitmod_bit \ 32
	return

#deffunc cpflip
	if ( cp@tcg == TCG_CONTROLLER_OPPONENT ) {
		cp@tcg = TCG_CONTROLLER_PLAYER
		tp@tcg = TCG_CONTROLLER_OPPONENT
		cl@tcg = TCG_LANE_PLAYER_FIELD
		tl@tcg = TCG_LANE_OPPONENT_HAND
		ch@tcg = TCG_LANE_PLAYER_HAND
		th@tcg = TCG_LANE_OPPONENT_HAND
	}
	else {
		cp@tcg = TCG_CONTROLLER_OPPONENT
		tp@tcg = TCG_CONTROLLER_PLAYER
		cl@tcg = TCG_LANE_OPPONENT_FIELD
		tl@tcg = TCG_LANE_PLAYER_FIELD
		ch@tcg = TCG_LANE_OPPONENT_HAND
		th@tcg = TCG_LANE_PLAYER_HAND
	}
	return

#deffunc cpisplayer
	if ( player@tcg == TCG_CONTROLLER_PLAYER ) {
		cp@tcg = TCG_CONTROLLER_PLAYER
		tp@tcg = TCG_CONTROLLER_OPPONENT
		cl@tcg = TCG_LANE_PLAYER_FIELD
		tl@tcg = TCG_LANE_OPPONENT_HAND
		ch@tcg = TCG_LANE_PLAYER_HAND
		th@tcg = TCG_LANE_OPPONENT_HAND
	}
	else {
		cp@tcg = TCG_CONTROLLER_OPPONENT
		tp@tcg = TCG_CONTROLLER_PLAYER
		cl@tcg = TCG_LANE_OPPONENT_FIELD
		tl@tcg = TCG_LANE_PLAYER_FIELD
		ch@tcg = TCG_LANE_OPPONENT_HAND
		th@tcg = TCG_LANE_PLAYER_HAND
	}
	return

#deffunc cpisme
	if ( ct@tcg == TCG_CONTROLLER_PLAYER ) {
		cp@tcg = TCG_CONTROLLER_PLAYER
		tp@tcg = TCG_CONTROLLER_OPPONENT
		cl@tcg = TCG_LANE_PLAYER_FIELD
		tl@tcg = TCG_LANE_OPPONENT_HAND
		ch@tcg = TCG_LANE_PLAYER_HAND
		th@tcg = TCG_LANE_OPPONENT_HAND
	}
	else {
		cp@tcg = TCG_CONTROLLER_OPPONENT
		tp@tcg = TCG_CONTROLLER_PLAYER
		cl@tcg = TCG_LANE_OPPONENT_FIELD
		tl@tcg = TCG_LANE_PLAYER_FIELD
		ch@tcg = TCG_LANE_OPPONENT_HAND
		th@tcg = TCG_LANE_PLAYER_HAND
	}
	return

#deffunc cpisenemy
	if ( ct@tcg == TCG_CONTROLLER_PLAYER ) {
		cp@tcg = TCG_CONTROLLER_OPPONENT
		tp@tcg = TCG_CONTROLLER_PLAYER
		cl@tcg = TCG_LANE_OPPONENT_FIELD
		tl@tcg = TCG_LANE_PLAYER_FIELD
		ch@tcg = TCG_LANE_OPPONENT_HAND
		th@tcg = TCG_LANE_PLAYER_HAND
	}
	else {
		cp@tcg = TCG_CONTROLLER_PLAYER
		tp@tcg = TCG_CONTROLLER_OPPONENT
		cl@tcg = TCG_LANE_PLAYER_FIELD
		tl@tcg = TCG_LANE_OPPONENT_HAND
		ch@tcg = TCG_LANE_PLAYER_HAND
		th@tcg = TCG_LANE_OPPONENT_HAND
	}
	return

#defcfunc cnvrare int cnvrare_arg1
	s@tcg = ""
	if ( cnvrare_arg1 < 0 ) { return "" }
	repeat limit(cnvrare_arg1, 1, 5)
		s@tcg += "*"
	loop
	return s@tcg

#defcfunc gameover
	if ( cpdata@tcg(TCG_PLAYER_LIFE, 1) <= 0 ) {
		return 2
	}
	if ( cpdata@tcg(TCG_PLAYER_LIFE, 0) <= 0 ) {
		return 1
	}
	return 0

#defcfunc cardcandeclareattack int cardcandeclareattack_arg1
	if ( card@tcg(TCG_CARD_LOCATION, cardcandeclareattack_arg1) != TCG_LOCATION_FIELD ) {
		return 0
	}
	if ( card@tcg(TCG_CARD_REF_TYPE, cardcandeclareattack_arg1) != TCG_TYPE_CREATURE ) {
		return 0
	}
	if ( cdbit(TCG_BIT_FROZEN, cardcandeclareattack_arg1) ) {
		return 0
	}
	if ( cdbit(TCG_BIT_DEFENDER, cardcandeclareattack_arg1) ) {
		return 0
	}
	if ( cdbit(TCG_BIT_EXHAUSTED, cardcandeclareattack_arg1) ) {
		return 0
	}
	return 1

#defcfunc cardcanblock int cardcanblock_arg1, int cardcanblock_arg2
	if ( card@tcg(TCG_CARD_LOCATION, cardcanblock_arg1) != TCG_LOCATION_FIELD ) {
		return 0
	}
	if ( card@tcg(TCG_CARD_REF_TYPE, cardcanblock_arg1) != TCG_TYPE_CREATURE ) {
		return 0
	}
	if ( cdbit(TCG_BIT_GRAVITY, cardcanblock_arg2) == TRUE ) {
		return 1
	}
	if ( cdbit(TCG_BIT_FLYING, cardcanblock_arg2) == TRUE & cdbit(TCG_BIT_FLYING, cardcanblock_arg1 ) != TRUE & cdbit(TCG_BIT_REACH, cardcanblock_arg1 ) != TRUE ) {
		return 0
	}
	if ( cdbit(TCG_BIT_INTIMIDATE, cardcanblock_arg2) == TRUE & card@tcg(TCG_CARD_REF_DOMAIN, cardcanblock_arg1) != card@tcg(TCG_CARD_REF_DOMAIN, cardcanblock_arg2) ) {
		return 0
	}
	if ( cdbit(TCG_BIT_PARALYSED, cardcanblock_arg1) == TRUE ) {
		return 0
	}
	if ( cdbit(TCG_BIT_VIGILANCE, cardcanblock_arg1) | cdbit(TCG_BIT_DEFENDER, cardcanblock_arg1) ) {
		return 1
	}
	if ( cdbit(TCG_BIT_EXHAUSTED, cardcanblock_arg1) ) {
		if ( card@tcg(TCG_CARD_STATUS, cardcanblock_arg1) != TCG_ACTION_EXHAUSTED ) {
			return 0
		}
	}
	return 1

#defcfunc cardcanuseskill int cardcanuseskill_arg1
	if ( card@tcg(TCG_CARD_LOCATION, cardcanuseskill_arg1) != TCG_LOCATION_FIELD ) {
		return 0
	}
	if ( card@tcg(TCG_CARD_REF_TYPE, cardcanuseskill_arg1) != TCG_TYPE_CREATURE ) {
		return 0
	}
	if ( cdbit(TCG_BIT_EXHAUSTED, cardcanuseskill_arg1) ) {
		return 0
	}
	if ( card@tcg(TCG_CARD_REF_SKILL_COST, cardcanuseskill_arg1) == 0 ) {
		return 0
	}
	if ( card@tcg(TCG_CARD_REF_SKILL_COST, cardcanuseskill_arg1) > cpdata@tcg(TCG_PLAYER_MANA, card@tcg(TCG_CARD_CONTROLLER, cardcanuseskill_arg1)) ) {
		return 0
	}
	return 1

#defcfunc getholdersum int getholdersum_arg1
	p@tcg = 0
	repeat maxcard@tcg
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != getholdersum_arg1 ) {
			continue
		}
		if ( card@tcg(TCG_CARD_LOCATION, cnt) == TCG_LOCATION_HAND ) {
			p@tcg++
		}
	loop
	return p@tcg

#defcfunc getspotsum int getspotsum_arg1
	p@tcg = 0
	repeat maxcard@tcg
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != getspotsum_arg1 ) {
			continue
		}
		if ( card@tcg(TCG_CARD_LOCATION, cnt) == TCG_LOCATION_FIELD ) {
			p@tcg++
		}
	loop
	return p@tcg

#defcfunc getdecksum int getdecksum_arg1
	p@tcg = 0
	repeat maxcard@tcg
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != getdecksum_arg1 ) {
			continue
		}
		if ( card@tcg(TCG_CARD_LOCATION, cnt) == TCG_LOCATION_DECK ) {
			p@tcg++
		}
	loop
	return p@tcg

#deffunc cardpos int cardpos_arg1, int cardpos_arg2
	if ( cardpos_arg1 == 0 ) {
		l@tcg = TCG_LANE_PLAYER_FIELD
	}
	else {
		l@tcg = TCG_LANE_OPPONENT_FIELD
	}
	p@tcg = -1
	spotlistmax@tcg = clistmax@tcg(l@tcg)
	repeat spotlistmax@tcg
		spotlist@tcg(cnt) = clist@tcg(cnt, l@tcg)
		if ( p@tcg == (-1) ) {
			if ( card@tcg(TCG_CARD_REF_TYPE, clist@tcg(cnt, l@tcg)) != TCG_TYPE_CREATURE ) {
				p@tcg = cnt
			}
		}
	loop
	if ( cardpos_arg2 != (-1) ) {
		if ( p@tcg != (-1) ) {
			repeat spotlistmax@tcg - p@tcg
				spotlist@tcg(spotlistmax@tcg - cnt) = spotlist@tcg(spotlistmax@tcg - cnt - 1)
			loop
			spotlist@tcg(p@tcg) = cardpos_arg2
		}
		else {
			spotlist@tcg(spotlistmax@tcg) = cardpos_arg2
		}
		spotlistmax@tcg++
	}
	x2@tcg = spotspace@tcg
	x@tcg = basex@tcg + 466 - spotlistmax@tcg * x2@tcg / 2
	repeat spotlistmax@tcg
		p@tcg = spotlist@tcg(cnt)
		card@tcg(TCG_CARD_X_MOVETO, p@tcg) = x@tcg + cnt * x2@tcg, spotiy@tcg(cardpos_arg1)
	loop
	return

#deffunc cardposhand int cardposhand_arg1, int cardposhand_arg2
	if ( cardposhand_arg1 == 0 ) {
		l@tcg = TCG_LANE_PLAYER_HAND
	}
	else {
		l@tcg = TCG_LANE_OPPONENT_HAND
	}
	holderlistmax@tcg = clistmax@tcg(l@tcg)
	if ( holderlistmax@tcg <= 0 ) { 
		return 
	}
	repeat holderlistmax@tcg
		holderlist@tcg(cnt) = clist@tcg(cnt, l@tcg)
	loop
	if ( cardposhand_arg2 != (-1) ) {
		holderlist@tcg(holderlistmax@tcg) = cardposhand_arg2
		holderlistmax@tcg++
	}
	x2@tcg = holderspace@tcg
	x@tcg = basex@tcg + 222
	cnt2@tcg = 0
	repeat holderlistmax@tcg
		pp@tcg = holderlist@tcg(cnt)
		if ( card@tcg(TCG_CARD_LOCATION, pp@tcg) != TCG_LOCATION_HAND ) { 
			continue 
		}
		card@tcg(TCG_CARD_X_MOVETO, pp@tcg) = x@tcg + cnt2@tcg * x2@tcg, holderiy@tcg(cardposhand_arg1)
		cnt2@tcg++
	loop
	return

#deffunc cardposgrave int cardposgrave_arg1
	repeat 2
		n@tcg = cnt
		if ( n@tcg != cardposgrave_arg1 & cardposgrave_arg1 != -1 ) { continue }

		p@tcg = 0
		repeat gravesum@tcg(n@tcg)
			if ( card@tcg(TCG_CARD_CONTROLLER, gravelist@tcg(cnt, n@tcg)) != n@tcg ) { continue }
			if ( card@tcg(TCG_CARD_LOCATION, gravelist@tcg(cnt, n@tcg)) != TCG_LOCATION_GRAVEYARD ) { continue }
			gravelist@tcg(p@tcg, n@tcg) = gravelist@tcg(cnt, n@tcg)
			p@tcg++
		loop

		gravesum@tcg(n@tcg) = p@tcg
		cpdata@tcg(TCG_PLAYER_GRAVEYARD, n@tcg) = p@tcg
		repeat maxcard@tcg
			if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != n@tcg ) { continue }
			if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_GRAVEYARD ) { continue }
			cnt2@tcg = cnt
			f@tcg = 1
			repeat gravesum@tcg(n@tcg)
				if ( cnt2@tcg == gravelist@tcg(cnt, n@tcg) ) {
					f@tcg = 0
					break
				}
			loop
			if ( f@tcg ) {
				gravelist@tcg(gravesum@tcg(n@tcg), n@tcg) = cnt2@tcg
				gravesum@tcg(n@tcg)++
				cpdata@tcg(TCG_PLAYER_GRAVEYARD, n@tcg)++
			}
		loop
	loop
	gosub *refresh_bg
	return

#deffunc makecardlist
	dim clist@tcg, 10, 7
	dim clistmax@tcg, 7
	repeat 2
		cnt2@tcg = cnt
		lmax@tcg = 0
		if ( cnt == 0 ) {
			p@tcg = 0
		}
		else {
			p@tcg = 3
		}
		repeat maxcard@tcg
			if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != cnt2@tcg ) {
				continue
			}
			if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_HAND ) {
				continue
			}
			clist@tcg(lmax@tcg, p@tcg) = cnt
			lmax@tcg++
		loop
		clist@tcg(lmax@tcg, p@tcg) = -1
		clistmax@tcg(p@tcg) = lmax@tcg
		lmax@tcg = 0
		if ( cnt == 0 ) {
			p@tcg = 1
		}
		else {
			p@tcg = 2
		}
		repeat maxcard@tcg
			if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != cnt2@tcg ) {
				continue
			}
			if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_FIELD ) {
				continue
			}
			clist@tcg(lmax@tcg, p@tcg) = cnt
			lmax@tcg++
		loop
		clist@tcg(lmax@tcg, p@tcg) = -1
		clistmax@tcg(p@tcg) = lmax@tcg
		cpdata@tcg(TCG_PLAYER_DECK, cnt) = getdecksum(cnt)
	loop
	repeat 7
		p@tcg = cnt
		repeat
			f@tcg = 0
			repeat clistmax@tcg(p@tcg)
				c1@tcg = clist@tcg(cnt, p@tcg)
				c2@tcg = clist@tcg(cnt + 1, p@tcg)
				if ( c2@tcg == (-1) ) {
					continue
				}
				if ( card@tcg(TCG_CARD_X_MOVETO, c2@tcg) < card@tcg(TCG_CARD_X_MOVETO, c1@tcg) ) {
					i@tcg = clist@tcg(cnt, p@tcg)
					clist@tcg(cnt, p@tcg) = clist@tcg(cnt + 1, p@tcg)
					clist@tcg(cnt + 1, p@tcg) = i@tcg
					f@tcg = 1
					break
				}
			loop
			if ( f@tcg == 0 ) {
				break
			}
		loop
	loop
	gosub *ai_evaluate
	return

#deffunc cardhelp str cardhelp_arg1, int cardhelp_arg2
	if ( helpdur@tcg > 1 ) {
		if ( cardhelp_arg2 == 0 ) {
			helpdur@tcg--
			return
		}
	}
	if ( cardhelp_arg2 == 0 ) {
		dur@tcg = 1
	}
	else {
		dur@tcg = cardhelp_arg2
	}
	helpmsg@tcg = cardhelp_arg1
	helpdur@tcg = dur@tcg
	return

#deffunc tcgdrawcard int tcgdrawcard_arg1, int tcgdrawcard_arg2
	selected@tcg = 0
	if ( tcgdrawcard_arg2 == 0 ) {
		if ( cursor@tcg ) {
			if ( cs@tcg >= 0 ) {
				if ( clist@tcg(cs@tcg, csline@tcg) == tcgdrawcard_arg1 ) {
					selected@tcg = 1
				}
			}
		}
	}
	else {
		if ( tcgdrawcard_arg1 == dlist@tcg(0, dsc@tcg) ) {
			selected@tcg = 1
		}
	}
	if ( selected@tcg ) {
		gmode 2
		pos card@tcg(TCG_CARD_X, tcgdrawcard_arg1) - 5, card@tcg(TCG_CARD_Y, tcgdrawcard_arg1) - 5
		gcopy 7, 168, 144, 82, 106
		if ( debug | cdbit(TCG_BIT_FACE_UP, tcgdrawcard_arg1) == 1 | card@tcg(TCG_CARD_CONTROLLER, tcgdrawcard_arg1) == TCG_CONTROLLER_PLAYER ) {
			cardhelp carddetailn@tcg(tcgdrawcard_arg1)
			if ( displayinfo@tcg == 1 ) {
				cardhelp carddetailneff@tcg(tcgdrawcard_arg1)
			}
		}
		else {
			cardhelp ""
		}
	}
	repeat 1 + (selected@tcg == 1)
		x@tcg = card@tcg(TCG_CARD_X, tcgdrawcard_arg1)
		y@tcg = card@tcg(TCG_CARD_Y, tcgdrawcard_arg1)
		if ( cnt == 1 ) {
			if ( card@tcg(TCG_CARD_ANIM, tcgdrawcard_arg1) != TCG_ANIM_NONE ) {
				break
			}
			x@tcg = basex@tcg + 20
			y@tcg = basey@tcg + 490
			gmode 6, , , 140
			pos x@tcg - 6, y@tcg - 6
			gcopy 7, 168, 144, 82, 106
		}
		gmode 2
		if ( card@tcg(TCG_CARD_ANIM, tcgdrawcard_arg1) == TCG_ANIM_FADE & deckmode@tcg <= 0 ) {
			gmode 4, , , card@tcg(TCG_CARD_ANIM_DURATION, tcgdrawcard_arg1) * 15
		}
		pos x@tcg, y@tcg
		if ( cdbit(TCG_BIT_FACE_UP, tcgdrawcard_arg1) == 1 | deckmode@tcg > 0 | (card@tcg(TCG_CARD_CONTROLLER, tcgdrawcard_arg1) == TCG_CONTROLLER_PLAYER & cnt == 1) | ( dbg_tcg & ( card@tcg(TCG_CARD_LOCATION, tcgdrawcard_arg1) == TCG_LOCATION_HAND | card@tcg(TCG_CARD_LOCATION, tcgdrawcard_arg1) == TCG_LOCATION_FIELD ) ) ) {
			if ( card@tcg(TCG_CARD_REF_PIC, tcgdrawcard_arg1) > 0 ) {
				gcopy 7, 72 + card@tcg(TCG_CARD_REF_BG, tcgdrawcard_arg1) * 72, 0, 72, 96
				if ( cnt == 0 ) {
					if ( dbg_tcg ) {
						pos x@tcg + 60, y@tcg + 4
						color 0, 0, 0
						bmes "" + tcgdrawcard_arg1, 235, 235, 235
						pos x@tcg + 60, y@tcg + 20
						color 0, 0, 0
						bmes "" + card@tcg(TCG_CARD_EFFECT, tcgdrawcard_arg1), 235, 235, 235
					}
					if ( cdbit(TCG_BIT_FACE_UP, tcgdrawcard_arg1) | dbg_tcg ) {
						if ( card@tcg(TCG_CARD_REF_TYPE, tcgdrawcard_arg1) == TCG_TYPE_CREATURE & card@tcg(TCG_CARD_ANIM, tcgdrawcard_arg1) == TCG_ANIM_NONE ) {
							drawnhp@tcg = card@tcg(TCG_CARD_HP, tcgdrawcard_arg1)
							drawnatk@tcg = card@tcg(TCG_CARD_ATTACK, tcgdrawcard_arg1)
							drawncost@tcg = card@tcg(TCG_CARD_COST, tcgdrawcard_arg1)
							if ( tcgdrawcard_arg2 == 1 ) {
								drawnhp@tcg = card@tcg(TCG_CARD_REF_HP, tcgdrawcard_arg1)
								drawnatk@tcg = card@tcg(TCG_CARD_REF_ATTACK, tcgdrawcard_arg1)
								drawncost@tcg = card@tcg(TCG_CARD_REF_COST, tcgdrawcard_arg1)
							}
							gmode 2
							pos x@tcg, y@tcg + 81
							gzoom 21, 15, 7, 0, 96, 35, 25
							pos x@tcg + 12 - 4 * strlen(str(drawnatk@tcg)), y@tcg + 81
							color 0, 0, 0
							bmes "" + drawnatk@tcg, 235, 235, 235
							pos x@tcg + 51, y@tcg + 81
							gzoom 21, 15, 7, 48, 96, 35, 25
							pos x@tcg + 51 + 12 - 4 * strlen(str(drawnhp@tcg)), y@tcg + 81
							color 0, 0, 0
							bmes "" + drawnhp@tcg, 235, 235, 235
							if ( card@tcg(TCG_CARD_LOCATION, tcgdrawcard_arg1) == TCG_LOCATION_HAND | tcgdrawcard_arg2 == 1 ) {
								pos x@tcg, y@tcg
								gzoom 24, 24, 7, 192, 96, 32, 32
								pos x@tcg + 12 - 3 * strlen(str(drawncost@tcg)), y@tcg + 4
								color 0, 0, 0
								bmes "" + drawncost@tcg, 235, 235, 235
							}
						}
					}
				}
				if ( card@tcg(TCG_CARD_REF_DBID, tcgdrawcard_arg1) != CREATURE_ID_USER ) {
					p@tcg = card@tcg(TCG_CARD_REF_PIC, tcgdrawcard_arg1) \ COLOR_TINT_MULT + card@tcg(TCG_CARD_REF_CHARA_PIC, tcgdrawcard_arg1) * COLOR_TINT_MULT
					chara_preparepic p@tcg, (card@tcg(TCG_CARD_REF_PIC, tcgdrawcard_arg1) - card@tcg(TCG_CARD_REF_CHARA_PIC, tcgdrawcard_arg1) * COLOR_TINT_MULT) / COLOR_TINT_MULT
				}
				else {
					p@tcg = 1
					chara_preparepic p@tcg, 0
				}
				if ( card@tcg(TCG_CARD_REF_DBID, tcgdrawcard_arg1) == CREATURE_ID_USER ) {
					gmode 2, 32, 48
					pos x@tcg + 21, y@tcg + 24
					gcopy 10, 0, 0, 32, 48
				} else {
					color 0, 0, 0
					pos x@tcg + 13, y@tcg + 32 - chipc(CHIPC_F, p@tcg) + chipc(CHIPC_HEIGHT, p@tcg) / 6
					gcopy 5, 0, 960, chipc(CHIPC_WIDTH, p@tcg), chipc(CHIPC_HEIGHT, p@tcg)
				}
			}
			else {
				gcopy 7, 72 + card@tcg(TCG_CARD_REF_BG, tcgdrawcard_arg1) * 72, 0, 72, 96
				// p@tcg = abs(card@tcg(TCG_CARD_REF_PIC, tcgdrawcard_arg1))
				// pos x@tcg, y@tcg
				// gcopy 2, p@tcg \ 22 * 72, p@tcg / 22 * 96, 72, 96
			}
			color 255, 255, 255
		}
		else {
			gcopy 7, 0, 0, 72, 96
		}
		if ( cnt == 0 ) {
			if ( card@tcg(TCG_CARD_LOCATION, tcgdrawcard_arg1) == TCG_LOCATION_FIELD ) {
				if ( cdbit(TCG_BIT_FACE_UP, tcgdrawcard_arg1) ) {
					if ( card@tcg(TCG_CARD_REF_TYPE, tcgdrawcard_arg1) == TCG_TYPE_CREATURE ) {
						p@tcg = 0
						repeat 64
							if ( cdbit(cnt, tcgdrawcard_arg1) == 1 ) {
								pos x@tcg, y@tcg + 69 - 13 * p@tcg
								color 0, 0, 0
								if ( cnt == TCG_BIT_REGENERATION ) { 
									bmes "Regeneration", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_ARMOR ) { 
									bmes "Armored", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_FLYING ) { 
									bmes "Flying", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_INTIMIDATE ) { 
									bmes "Intimidate", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_REACH ) { 
									bmes "Reach", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_LIFELINK ) { 
									bmes "Lifelink", 235, 235, 235 
									p@tcg++
								}
								// if ( cnt == TCG_BIT_HASTE ) { bmes "Regeneration", 235, 235, 235 }
								if ( cnt == TCG_BIT_TRAMPLE ) { 
									bmes "Trample", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_FIRST_STRIKE ) { 
									bmes "First Strike", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_DOUBLE_STRIKE ) { 
									bmes "Dual Strike", 235, 235, 235
									p@tcg++
								}
								if ( cnt == TCG_BIT_DEATHTOUCH ) { 
									bmes "Deathtouch", 235, 235, 235 
									p@tcg++
								}
								// if ( cnt == TCG_BIT_WINDFURY ) { bmes "Windfury", 235, 235, 235 }
								if ( cnt == TCG_BIT_WINDFURY_USABLE ) { 
									bmes "Windfury", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_VIGILANCE ) { 
									bmes "Vigilance", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_DEFENDER ) { 
									bmes "Defender", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_SPLIT ) { 
									bmes "Split", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_RIDER ) { 
									bmes "Rider", 235, 235, 235 
									p@tcg++
								}

								if ( cnt == TCG_BIT_DEATHWORD ) { 
									bmes "Deathword", 235, 125, 125 
									p@tcg++
								}
								if ( cnt == TCG_BIT_GRAVITY ) { 
									bmes "Gravity", 235, 125, 125 
									p@tcg++
								}
								if ( cnt == TCG_BIT_BLEEDING ) { 
									bmes "Bleeding", 235, 125, 125 
									p@tcg++
								}
								if ( cnt == TCG_BIT_POISONED ) { 
									bmes "Poisoned", 235, 125, 125 
									p@tcg++
								}
								if ( cnt == TCG_BIT_SUICIDE ) { 
									bmes "EXPLODING!", 235, 125, 125 
									p@tcg++
								}
								if ( cnt == TCG_BIT_PARALYSED ) { 
									bmes "Paralysed", 235, 125, 125 
									p@tcg++
								}
								if ( cnt == TCG_BIT_SILENCED ) { 
									bmes "Silenced", 235, 125, 125 
									p@tcg++
								}
								if ( cnt == TCG_BIT_FROZEN ) { 
									bmes "Frozen", 235, 125, 125 
									p@tcg++
								}
								if ( cnt == TCG_BIT_GHOST ) { 
									bmes "Ghost", 235, 235, 125 
									p@tcg++
								}
								if ( cnt == TCG_BIT_INSANE ) { 
									bmes "Insane", 235, 125, 125 
									p@tcg++
								}
							}
						loop
						if ( card@tcg(TCG_CARD_STATUS, tcgdrawcard_arg1) == TCG_ACTION_ATTACKING ) {
							pos x@tcg, y@tcg + 18
							gcopy 7, 288, 120, 24, 24
						}
						if ( card@tcg(TCG_CARD_STATUS, tcgdrawcard_arg1) == TCG_ACTION_DEFENDING ) {
							pos x@tcg, y@tcg + 18
							gcopy 7, 312, 120, 24, 24
						}
						if ( card@tcg(TCG_CARD_STATUS, tcgdrawcard_arg1) == TCG_ACTION_INVOKING ) {
							pos x@tcg, y@tcg + 18
							gcopy 7, 264, 120, 24, 24
						}
						if ( card@tcg(TCG_CARD_STATUS, tcgdrawcard_arg1) == TCG_ACTION_EXHAUSTED ) {
							pos x@tcg, y@tcg + 18
							gcopy 7, 240, 120, 24, 24
						}
					}
				}
			}
		}
	loop
	return

#deffunc tcgdraw
	if ( debug ) {
		title " L:" + looplev + " S:" + sublev
	}
	*tcgdraw_WHILE1
	t@tcg++
	redraw 0
	gosub *tcg_drawInterface
	anime@tcg = 0
	font lang(cfg_font1, cfg_font2), 12 + en - en * 2, 0
	color 255, 255, 255
	gmode 2
	repeat 2
		x@tcg = holderix@tcg(cnt) - holderspace@tcg
		y@tcg = holderiy@tcg(cnt)
		pos x@tcg, y@tcg
		gcopy 7, 96, 144, 72, 96
		pos x@tcg + 14, y@tcg + 75
		mes "" + cpdata@tcg(TCG_PLAYER_DECK, cnt) + "/" + cpdata@tcg(TCG_PLAYER_GRAVEYARD, cnt)
	loop
	font lang(cfg_font1, cfg_font2), 13 + en - en * 2, 0
	repeat maxcard@tcg
		c@tcg = maxcard@tcg - cnt - 1
		if ( cc@tcg != 0 ) {
			if ( c@tcg == 0 ) {
				c@tcg = cc@tcg
			}
			else {
				if ( c@tcg == cc@tcg ) {
					c@tcg = 0
				}
			}
		}
		if ( card@tcg(TCG_CARD_LOCATION, c@tcg) <= 0 ) {
			if ( card@tcg(TCG_CARD_ANIM_DURATION, c@tcg) == 0 ) {
				continue
			}
		}
		if ( card@tcg(TCG_CARD_LOCATION, c@tcg) == TCG_LOCATION_EXILE ) {
			continue
		}
		if ( card@tcg(TCG_CARD_X, c@tcg) != card@tcg(TCG_CARD_X_MOVETO, c@tcg) | card@tcg(TCG_CARD_Y, c@tcg) != card@tcg(TCG_CARD_Y_MOVETO, c@tcg) | card@tcg(TCG_CARD_ANIM_DURATION, c@tcg) > 0 ) {
			anime@tcg = 1
			p@tcg = 0
			if ( card@tcg(TCG_CARD_X, c@tcg) != card@tcg(TCG_CARD_X_MOVETO, c@tcg) ) {
				p@tcg = (card@tcg(TCG_CARD_X_MOVETO, c@tcg) - card@tcg(TCG_CARD_X, c@tcg)) / 6
				if ( card@tcg(TCG_CARD_X, c@tcg) > card@tcg(TCG_CARD_X_MOVETO, c@tcg) ) {
					p@tcg--
				}
				else {
					p@tcg++
				}
			}
			card@tcg(TCG_CARD_X, c@tcg) += p@tcg
			p@tcg = 0
			if ( card@tcg(TCG_CARD_Y, c@tcg) != card@tcg(TCG_CARD_Y_MOVETO, c@tcg) ) {
				p@tcg = (card@tcg(TCG_CARD_Y_MOVETO, c@tcg) - card@tcg(TCG_CARD_Y, c@tcg)) / 6
				if ( card@tcg(TCG_CARD_Y, c@tcg) > card@tcg(TCG_CARD_Y_MOVETO, c@tcg) ) {
					p@tcg--
				}
				else {
					p@tcg++
				}
			}
			card@tcg(TCG_CARD_Y, c@tcg) += p@tcg
			if ( card@tcg(TCG_CARD_ANIM_DURATION, c@tcg) > 0 ) {
				card@tcg(TCG_CARD_ANIM_DURATION, c@tcg)--
			}
		}
		tcgdrawcard c@tcg
	loop
	font lang(cfg_font1, cfg_font2), 14 - en * 2, 0
	color 255, 255, 255
	gmode 2
	if ( cursor@tcg ) {
		if ( cs@tcg == (-1) ) {
			if ( phase@tcg == 2 ) {
				if ( selectmode@tcg == 0 ) {
					cardhelp lang("メインフェイズを終了する。", "End your main phase.")
				}
				if ( selectmode@tcg == 1 ) {
					cardhelp lang("ブロックしない。", "No blocker.")
				}
				if ( selectmode@tcg == 2 ) {
					cardhelp lang("ランダムに選ぶ。", "Choose Randomly.")
				}
			}
			pos holderix@tcg - holderspace@tcg - 5, holderiy@tcg - 5
			gcopy 7, 168, 144, 82, 106
		}
	}
	if ( chaintime@tcg > 0 ) {
		if ( chaintime@tcg == cfg_chaintime ) {
			dim star@tcg, 2, 10
			repeat 10
				star@tcg(0, cnt) = rnd(72) - 32, rnd(40) - 32
			loop
		}
		if ( chaintime@tcg > 5 ) {
			gmode 5, , , limit(chaintime@tcg * 3 - 40, 0, 255)
			color 0, 0, 0
			cnt2@tcg = cnt
			repeat 10
				pos chainx@tcg + star@tcg(0, cnt), chainy@tcg + star@tcg(1, cnt)
				gcopy 7, 64 * limit(17 - chaintime@tcg / 3, 0, 8), 416, 64, 64
				star@tcg(1, cnt) += 2
			loop
		}
		repeat 3
			p@tcg = (t@tcg / 4 + cnt) \ 7
			color p@tcg * 20, 25 + p@tcg * 20, 60 + p@tcg * 20
			boxl chainx@tcg - p@tcg, chainy@tcg - p@tcg, chainx@tcg + 72 + p@tcg, chainy@tcg + 96 + p@tcg
		loop
	}
	repeat efllistmax@tcg
		if ( efllist@tcg(4, cnt) <= 0 ) {
			continue
		}
		efllist@tcg(4, cnt)--
		if ( efllist@tcg(0, cnt) == 1 ) {
			font lang(cfg_font1, cfg_font2), 20 - en * 2, 1
			color 0, 0, 0
			pos efllist@tcg(5, cnt) + 11, efllist@tcg(6, cnt) + efllist@tcg(4, cnt) / 3 + 21
			mes abs(efllist@tcg(1, cnt))
			color 255, 100, 100
			if ( efllist@tcg(1, cnt) > 0 ) {
				color 100, 255, 100
			}
			pos efllist@tcg(5, cnt) + 10, efllist@tcg(6, cnt) + efllist@tcg(4, cnt) / 3 + 20
			mes abs(efllist@tcg(1, cnt))
			font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
			gmode 5, , , (efllist@tcg(4, cnt) - 30) * 8
			color 0, 0, 0
			pos efllist@tcg(5, cnt) - 12, efllist@tcg(6, cnt) + 10
			gcopy 7, 64 * limit(10 - (efllist@tcg(4, cnt) - 30) / 3, 0, 8), 360, 48, 64
		}
		if ( efllist@tcg(0, cnt) == 2 ) {
			font lang(cfg_font1, cfg_font2), 20 - en * 2, 1
			color 0, 0, 0
			pos efllist@tcg(2, cnt) + 31, efllist@tcg(3, cnt) + efllist@tcg(4, cnt) / 3 + 26
			mes abs(efllist@tcg(1, cnt))
			color 100, 100, 255
			pos efllist@tcg(2, cnt) + 30, efllist@tcg(3, cnt) + efllist@tcg(4, cnt) / 3 + 25
			mes abs(efllist@tcg(1, cnt))
			font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
			color 255, 255, 255
			gmode 5, , , (efllist@tcg(4, cnt) - 30) * 8
			color 0, 0, 0
			pos efllist@tcg(5, cnt), efllist@tcg(6, cnt) + 24
			gcopy 7, 64 * limit(10 - (efllist@tcg(4, cnt) - 30) / 3, 0, 8), 416, 64, 64
			pos efllist@tcg(2, cnt), efllist@tcg(3, cnt) + 24
			gcopy 7, 64 * limit(10 - (efllist@tcg(4, cnt) - 30) / 3, 0, 8), 416, 64, 64
		}
	loop
	gmode 2
	if ( screenupdate@tcg == (-1) ) {
		screenupdate@tcg = 0
		goto *tcgdraw_WEND1
	}
	else {
		await 15
		redraw 1
	}
	if ( anime@tcg == 0 ) {
		goto *tcgdraw_WEND1
	}
	goto *tcgdraw_WHILE1
	*tcgdraw_WEND1
	return

#deffunc efllistadd int efllistadd_arg1, int efllistadd_arg2, int efllistadd_arg3, int efllistadd_arg4, int efllistadd_arg5, int efllistadd_arg6
	repeat efllistmax@tcg
		if ( efllist@tcg(4, cnt) <= 0 ) {
			efllist@tcg(0, cnt) = efllistadd_arg1
			efllist@tcg(1, cnt) = efllistadd_arg2
			if ( efllistadd_arg1 == 1 ) {
				efllist@tcg(4, cnt) = 60
				efllist@tcg(5, cnt) = efllistadd_arg3 + rnd(30), efllistadd_arg4 + rnd(20)
			}
			if ( efllistadd_arg1 == 2 ) {
				efllist@tcg(4, cnt) = 60
				efllist@tcg(5, cnt) = efllistadd_arg3, efllistadd_arg4
				efllist@tcg(2, cnt) = efllistadd_arg5, efllistadd_arg6
			}
			break
		}
	loop
	return

#deffunc card_ref int card_ref_arg1
	cardrefcost = 0
	cardrefhp = 0
	cardrefattack = 0
	cardrefdomain = 0
	cardrefrare = 100
	dbid = card_ref_arg1
	gosub *db_card@
	gosub *db_card_custom
	if ( cardreftype == 0 ) {
		cardreftype = 10
		cardrefdomain = 7
	}
	rtvaln = cardrefn
	if ( cardreftype == 10 ) {
		cardrefbg = cardrefdomain
		rtvaln += lang("  No.", "  No.") + cardrefno
	}
	if ( cardreftype == 30 ) {
		cardrefbg = 6
		rtvaln += lang(" <土地>", " <Land>")
	}
	if ( cardreftype == 20 ) {
		cardrefbg = 5
		rtvaln += lang(" <スペル>", " <Spell>")
	}
	// rtvaln += lang("  ランク:", "  Rank:") + cardrefcost
	rtvaln += " "
	if ( cardrefsex != "random" ) { rtvaln += " " + cardrefsex }
	rtvaln += " " + cardrefrace + " " + cardrefclass
	rtvaln += lang("  レア度:", "  Rare:") + cnvrare(cardrefrare)
	rtvaln2 = rtvaln
	s@tcg = ""
	s@tcg += lang("情報: ", "Data: " ) + cardrefdescription
	if ( gdata(GDATA_QUICK_USE) == 1 ) {
		talk_conv s@tcg, 95
	}
	else {
		talk_conv s@tcg, 100
	}
	rtvaln += "\n" + s@tcg
	s@tcg = ""
	if ( cardrefbits != "" ) {
		s@tcg += "Bits:  "
		s2@tcg = cardrefbits
		csvstr2 s2@tcg, s2@tcg
		repeat
			if ( s2@tcg(cnt) == "" ) {
				break
			}
			p@tcg = int(s2@tcg(cnt))
			if ( cnt >= 40 | p@tcg == 0 ) {
				break
			}
			if ( p@tcg == TCG_BIT_REGENERATION ) { s@tcg += "Regeneration "}
			if ( p@tcg == TCG_BIT_ARMOR ) { s@tcg += "Armored "}
			if ( p@tcg == TCG_BIT_FLYING ) { s@tcg += "Flying "}
			if ( p@tcg == TCG_BIT_INTIMIDATE ) { s@tcg += "Intimidate "}
			if ( p@tcg == TCG_BIT_REACH ) { s@tcg += "Reach "}
			if ( p@tcg == TCG_BIT_LIFELINK ) { s@tcg += "Lifelink "}
			if ( p@tcg == TCG_BIT_HASTE ) { s@tcg += "Haste "}
			if ( p@tcg == TCG_BIT_TRAMPLE ) { s@tcg += "Trample "}
			if ( p@tcg == TCG_BIT_FIRST_STRIKE ) { s@tcg += "First Strike "}
			if ( p@tcg == TCG_BIT_DOUBLE_STRIKE ) { s@tcg += "Dual Strike "}
			if ( p@tcg == TCG_BIT_DEATHTOUCH ) { s@tcg += "Deathtouch "}
			if ( p@tcg == TCG_BIT_WINDFURY ) { s@tcg += "Windfury "}
			if ( p@tcg == TCG_BIT_WINDFURY_USABLE ) { s@tcg += "Windfury(1) "}
			if ( p@tcg == TCG_BIT_VIGILANCE ) { s@tcg += "Vigilance "}
			if ( p@tcg == TCG_BIT_DEFENDER ) { s@tcg += "Defender "}
			if ( p@tcg == TCG_BIT_SPLIT ) { s@tcg += "Splits "}
			if ( p@tcg == TCG_BIT_ENEMY ) { s@tcg += "[You summon this on your Opponent's Side of Field.] "}
			if ( p@tcg == TCG_BIT_RIDER ) { s@tcg += "Rider "}
			
			if ( p@tcg == TCG_BIT_DEATHWORD ) { s@tcg += "Deathword "}
			if ( p@tcg == TCG_BIT_GRAVITY ) { s@tcg += "Gravity "}
			if ( p@tcg == TCG_BIT_BLEEDING ) { s@tcg += "Bleeding "}
			if ( p@tcg == TCG_BIT_POISONED ) { s@tcg += "Poisoned "}
			if ( p@tcg == TCG_BIT_SUICIDE ) { s@tcg += "Kamikaze "}
			if ( p@tcg == TCG_BIT_PARALYSED ) { s@tcg += "Paralysed "}
			if ( p@tcg == TCG_BIT_SILENCED ) { s@tcg += "Silenced "}
			if ( p@tcg == TCG_BIT_FROZEN ) { s@tcg += "Frozen "}
			if ( p@tcg == TCG_BIT_DEVIL ) { s@tcg += "[You pay 2 life when this Card activates effect.] "}
			if ( p@tcg == TCG_BIT_GHOST ) { s@tcg += "[Return to your Hand on Begin Phase.] "}
			if ( p@tcg == TCG_BIT_INSANE ) { s@tcg += "Insane "}

			if ( p@tcg == TCG_BIT_YERLES ) { s@tcg += "<Yerles> "}
			if ( p@tcg == TCG_BIT_XEREN ) { s@tcg += "<Xeren> "}
			if ( p@tcg == TCG_BIT_FLAMETOWER ) { s@tcg += "<Flame> "}
			if ( p@tcg == TCG_BIT_FIGHTERGUILD ) { s@tcg += "<Fighter Guild> "}
			if ( p@tcg == TCG_BIT_THIEFGUILD ) { s@tcg += "<Thief Guild> "}
			if ( p@tcg == TCG_BIT_MAGEGUILD ) { s@tcg += "<Mage Guild> "}
		loop
		rtvaln2 += "\n" + s@tcg
		s@tcg = ""
	}
	s@tcg += lang("Effect: ", "Effect: ")
	s@tcg += cardrefskill
	if ( gdata(GDATA_QUICK_USE) == 1 ) {
		talk_conv s@tcg, 65
	}
	else {
		talk_conv s@tcg, 70
	}
	rtvaln2 += "\n" + s@tcg
	return dbid

#deffunc create_card int create_card_arg1, int create_card_arg2
	card_ref create_card_arg2
	card@tcg(TCG_CARD_REF_DBID, create_card_arg1) = stat
	card@tcg(TCG_CARD_REF_TYPE, create_card_arg1) = cardreftype
	cardn@tcg(TCG_CARDN_REF_RACE, create_card_arg1) = cardrefrace
	cardn@tcg(TCG_CARDN_REF_CLASS, create_card_arg1) = cardrefclass
	cardn@tcg(TCG_CARDN_REF_SEX, create_card_arg1) = cardrefsex
	card@tcg(TCG_CARD_REF_DOMAIN, create_card_arg1) = cardrefdomain
	card@tcg(TCG_CARD_REF_COST, create_card_arg1) = cardrefcost
	card@tcg(TCG_CARD_REF_HP, create_card_arg1) = cardrefhp
	card@tcg(TCG_CARD_REF_ATTACK, create_card_arg1) = cardrefattack
	card@tcg(TCG_CARD_COST, create_card_arg1) = cardrefcost
	card@tcg(TCG_CARD_HP, create_card_arg1) = cardrefhp
	card@tcg(TCG_CARD_ATTACK, create_card_arg1) = cardrefattack
	card@tcg(TCG_CARD_EFFECT, create_card_arg1) = cardrefskillid
	card@tcg(TCG_CARD_REF_SKILL_COST, create_card_arg1) = cardrefskillcost
	cardn@tcg(TCG_CARDN_REF_SKILL, create_card_arg1) = cardrefskill
	card@tcg(TCG_CARD_REF_PIC, create_card_arg1) = cardrefpic
	card@tcg(TCG_CARD_REF_CHARA_PIC, create_card_arg1) = cardrefpicchar
	card@tcg(TCG_CARD_REF_BG, create_card_arg1) = cardrefbg
	carddetailn@tcg(create_card_arg1) = rtvaln
	carddetailneff@tcg(create_card_arg1) = rtvaln2
	repeat 96
		cdbitmod cnt, create_card_arg1, 0
	loop
	s@tcg = cardrefbits
	csvstr2 s@tcg, s@tcg
	repeat
		if ( s@tcg(cnt) == "" ) {
			break
		}
		p@tcg = int(s@tcg(cnt))
		if ( cnt >= 40 | p@tcg == 0 ) {
			break
		}
		cdbitmod p@tcg, create_card_arg1, 1
	loop
	return create_card_arg1

#deffunc create_extra_card int create_extra_card_player, int create_extra_card_id
	if ( cpdata@tcg(TCG_PLAYER_EXTRACARD, create_extra_card_player) >= MAX_CARD_EXTRA ) { 
		cextra@tcg = -1
		return -1 
	}
	cextra@tcg = create_extra_card_player * MAX_CARD_DECK_TOTAL + MAX_CARD_DECK + cpdata@tcg(TCG_PLAYER_EXTRACARD, create_extra_card_player)
	create_card cextra@tcg, create_extra_card_id
	card@tcg(TCG_CARD_LOCATION, cextra@tcg) = TCG_LOCATION_DECK, create_extra_card_player, deckix@tcg(create_extra_card_player), deckiy@tcg(create_extra_card_player), deckix@tcg(create_extra_card_player), deckiy@tcg(create_extra_card_player)
	cpdata@tcg(TCG_PLAYER_EXTRACARD, create_extra_card_player)++
	cpdata@tcg(TCG_PLAYER_DECK, create_extra_card_player)++
	return cextra@tcg

#deffunc returncard int returncard_arg1
	n@tcg = card@tcg(TCG_CARD_CONTROLLER, returncard_arg1)
	if ( card@tcg(TCG_CARD_LOCATION, returncard_arg1) == TCG_LOCATION_FIELD ) {
		repeat maxcard@tcg
			if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_FIELD ) {
				continue
			}
			if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != n@tcg ) {
				continue
			}
			if ( card@tcg(TCG_CARD_X, cnt) <= card@tcg(TCG_CARD_X, returncard_arg1) ) {
				continue
			}
			card@tcg(TCG_CARD_X_MOVETO, cnt) -= spotspace@tcg
		loop
		efllistadd 2, 1, card@tcg(TCG_CARD_X, returncard_arg1), card@tcg(TCG_CARD_Y, returncard_arg1), deckix@tcg(n@tcg), deckiy@tcg(n@tcg)
	}
	if ( card@tcg(TCG_CARD_LOCATION, returncard_arg1) == TCG_LOCATION_HAND ) {
		repeat maxcard@tcg
			if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_HAND ) {
				continue
			}
			if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != n@tcg ) {
				continue
			}
			if ( card@tcg(TCG_CARD_X, cnt) <= card@tcg(TCG_CARD_X, returncard_arg1) ) {
				continue
			}
			card@tcg(TCG_CARD_X_MOVETO, cnt) -= holderspace@tcg
		loop
		efllistadd 2, 1, card@tcg(TCG_CARD_X, returncard_arg1), card@tcg(TCG_CARD_Y, returncard_arg1), deckix@tcg(n@tcg), deckiy@tcg(n@tcg)
	}
	if ( card@tcg(TCG_CARD_LOCATION, returncard_arg1) == TCG_LOCATION_GRAVEYARD ) {
		f@tcg = 0
		repeat gravesum@tcg(n@tcg)
			if ( f@tcg == 1 ) {
				gravelist@tcg(cnt - 1, n@tcg) = gravelist@tcg(cnt, n@tcg)
			}
			if ( gravelist@tcg(cnt, n@tcg) != returncard_arg1 & f@tcg == 0 ) { continue }
			if ( gravelist@tcg(cnt, n@tcg) == returncard_arg1 ) { 
				f@tcg = 1
				continue 
			}
		loop
		gravesum@tcg(n@tcg)--
		cpdata@tcg(TCG_PLAYER_GRAVEYARD, n@tcg)--
		efllistadd 2, 1, graveix@tcg(n@tcg), graveiy@tcg(n@tcg), deckix@tcg(n@tcg), deckiy@tcg(n@tcg)
	}
	// create_card returncard_arg1, card@tcg(TCG_CARD_REF_DBID, returncard_arg1)
	card@tcg(TCG_CARD_LOCATION, returncard_arg1) = TCG_LOCATION_DECK
	card@tcg(TCG_CARD_X, returncard_arg1) = 0
	card@tcg(TCG_CARD_Y, returncard_arg1) = 0
	card@tcg(TCG_CARD_X_MOVETO, returncard_arg1) = 0
	card@tcg(TCG_CARD_Y_MOVETO, returncard_arg1) = 0
	card@tcg(TCG_CARD_ANIM, returncard_arg1) = 0
	card@tcg(TCG_CARD_ANIM_DURATION, returncard_arg1) = 0
	cdbitmod TCG_BIT_FACE_UP, returncard_arg1, 0
	makecardlist
	cardposhand n@tcg, -1
	gosub *refresh_bg
	return

#deffunc gravecard int gravecard_arg1
	// Card HP and Atk are restored only when it dies, or regenerates.
	card@tcg(TCG_CARD_HP, gravecard_arg1) = card@tcg(TCG_CARD_REF_HP, gravecard_arg1)
	card@tcg(TCG_CARD_ATTACK, gravecard_arg1) = card@tcg(TCG_CARD_REF_ATTACK, gravecard_arg1)
	cardorglocation@tcg = card@tcg(TCG_CARD_LOCATION, gravecard_arg1)
	// // Reorganize field card locations (This is uncessary due to cardpos, delete this in the future)
	if ( card@tcg(TCG_CARD_LOCATION, gravecard_arg1) == TCG_LOCATION_FIELD ) {
		repeat maxcard@tcg
			if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_FIELD ) {
				continue
			}
			if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != card@tcg(TCG_CARD_CONTROLLER, gravecard_arg1) ) {
				continue
			}
			if ( card@tcg(TCG_CARD_X, cnt) > card@tcg(TCG_CARD_X, gravecard_arg1) ) {
				card@tcg(TCG_CARD_X_MOVETO, cnt) -= spotspace@tcg
			}
		loop
	}
	if ( card@tcg(TCG_CARD_LOCATION, gravecard_arg1) == TCG_LOCATION_HAND ) {
		repeat maxcard@tcg
			if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != gravecard_arg1 ) {
				continue
			}
			if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_HAND ) {
				continue
			}
			if ( card@tcg(TCG_CARD_X, cnt) <= card@tcg(TCG_CARD_X, gravecard_arg1) ) {
				continue
			}
			card@tcg(TCG_CARD_X_MOVETO, cnt) -= holderspace@tcg
		loop
	}
	// Set card location to grave, update grave list, and update field/hand lists
	if ( card@tcg(TCG_CARD_LOCATION, gravecard_arg1) != TCG_LOCATION_GRAVEYARD ) {
		card@tcg(TCG_CARD_LOCATION, gravecard_arg1) = TCG_LOCATION_GRAVEYARD
		card@tcg(TCG_CARD_TURN_COUNT, gravecard_arg1) = 0
		cpdata@tcg(TCG_PLAYER_GRAVEYARD, card@tcg(TCG_CARD_CONTROLLER, gravecard_arg1))++
		n@tcg = card@tcg(TCG_CARD_CONTROLLER, gravecard_arg1)
		gravelist@tcg(gravesum@tcg(n@tcg), n@tcg) = gravecard_arg1
		gravesum@tcg(n@tcg)++
		makecardlist
	}
	// Reorganize field and hand
	if ( cardorglocation@tcg == TCG_LOCATION_FIELD ) {
		cardpos card@tcg(TCG_CARD_CONTROLLER, gravecard_arg1), -1
	}
	if ( cardorglocation@tcg == TCG_LOCATION_HAND ) {
		cardposhand card@tcg(TCG_CARD_CONTROLLER, gravecard_arg1), -1
	}
	// Fire deathrattle effect
	if ( effref@tcg(TCG_SKILL_TYPE, card@tcg(TCG_CARD_EFFECT, gravecard_arg1)) == TCG_SKILL_TYPE_DEATHRATTLE & cardorglocation@tcg == TCG_LOCATION_FIELD ) {
		effac@tcg = gravecard_arg1
		eff@tcg = card@tcg(TCG_CARD_EFFECT, gravecard_arg1)
		gosub *card_action_choose_target
		makecardlist
	}
	if ( card@tcg(TCG_CARD_EFFECT, gravecard_arg1) == TCG_EFF_RETURNTODECKWHENKILLED | card@tcg(TCG_CARD_EFFECT, gravecard_arg1) == TCG_EFF_RETURNTOHANDWHENKILLED | card@tcg(TCG_CARD_EFFECT, gravecard_arg1) == TCG_EFF_GWEN | specialrulenoonedies@tcg ) {
		returncard gravecard_arg1
	}
	if ( card@tcg(TCG_CARD_EFFECT, gravecard_arg1) == TCG_EFF_RETURNTOHANDWHENKILLED | card@tcg(TCG_CARD_EFFECT, gravecard_arg1) == TCG_EFF_GWEN ) {
		gettargetcard gravecard_arg1
	}
	gosub *refresh_bg
	return

#deffunc dmgcard int dmgcard_arg1, int dmgcard_arg2_in
	dmgcard_arg2 = dmgcard_arg2_in
	if ( cdbit(TCG_BIT_BLEEDING, dmgcard_arg1) ) {
		dmgcard_arg2++
	}
	if ( dmgcard_arg2 > 0 ) {
		snd SOUNDLIST_ATK1
	}
	if ( cdbit(TCG_BIT_ARMOR, dmgcard_arg1) & dmgcard_arg2 > 0 ) {
		cdbitmod TCG_BIT_ARMOR, dmgcard_arg1, 0
		efllistadd 1, 0, card@tcg(TCG_CARD_X, dmgcard_arg1), card@tcg(TCG_CARD_Y, dmgcard_arg1) 
		return
	}
	if ( cdbit(TCG_BIT_RIDER, dmgcard_arg1) & dmgcard_arg2 > 0 ) {
		cdbitmod TCG_BIT_RIDER, dmgcard_arg1, 0
		dmgcard_arg2 = 2
	}
	if ( specialrulelifeordeathcombat@tcg ) {
		if ( dmgcard_arg2 >= card@tcg(TCG_CARD_HP, dmgcard_arg1) ) {
			dmgcard_arg2 = card@tcg(TCG_CARD_HP, dmgcard_arg1)
		} else {
			dmgcard_arg2 = 0
		}
	}
	if ( dmgcard_arg2 != 0 ) { 
		efllistadd 1, -dmgcard_arg2, card@tcg(TCG_CARD_X, dmgcard_arg1), card@tcg(TCG_CARD_Y, dmgcard_arg1) 
	}
	card@tcg(TCG_CARD_HP, dmgcard_arg1) -= dmgcard_arg2
	if ( card@tcg(TCG_CARD_HP, dmgcard_arg1) < 0 ) {
		card@tcg(TCG_CARD_HP, dmgcard_arg1) = 0
	}
	if ( card@tcg(TCG_CARD_HP, dmgcard_arg1) <= 0 & card@tcg(TCG_CARD_LOCATION, dmgcard_arg1) == TCG_LOCATION_FIELD ) {
		card@tcg(TCG_CARD_ANIM, dmgcard_arg1) = TCG_ANIM_FADE, 18
		tcgdraw
		gravecard dmgcard_arg1
	}
	return

#deffunc dmgplayer int dmgplayer_arg1, int dmgplayer_arg2
	if ( dmgplayer_arg2 > 0 ) {
		snd SOUNDLIST_ATK1
	}
	efllistadd 1, -dmgplayer_arg2, cpx@tcg(dmgplayer_arg1), cpy@tcg(dmgplayer_arg1)
	cpdata@tcg(TCG_PLAYER_LIFE, dmgplayer_arg1) -= dmgplayer_arg2
	if ( cpdata@tcg(TCG_PLAYER_LIFE, dmgplayer_arg1) <= 0 ) {
		cpdata@tcg(TCG_PLAYER_LIFE, dmgplayer_arg1) = 0
		if ( dmgplayer_arg1 == 0 ) {
			gameresult@tcg = 2
		} else {
			gameresult@tcg = 1
		}
	}
	return

#deffunc delbottomcard int delbottomcard_arg1
	repeat maxcard@tcg
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != delbottomcard_arg1 ) {
			continue
		}
		if ( card@tcg(TCG_CARD_LOCATION, cnt) == TCG_LOCATION_HAND ) {
			card@tcg(TCG_CARD_X_MOVETO, cnt) -= holderspace@tcg
			if ( card@tcg(TCG_CARD_X_MOVETO, cnt) < holderix@tcg(delbottomcard_arg1) ) {
				card@tcg(TCG_CARD_ANIM, cnt) = TCG_ANIM_FADE, 18
				delcard@tcg = cnt
			}
		}
	loop
	tcgdraw
	gravecard delcard@tcg
	return

#deffunc getrandomcard int getrandomcard_arg1
	if ( getdecksum(getrandomcard_arg1) == 0 ) {
		cpdata@tcg(TCG_PLAYER_LIFE, getrandomcard_arg1) = 0
		if ( getrandomcard_arg1 == 0 ) {
			gameresult@tcg = 4
		} else {
			gameresult@tcg = 3
		}
		return
	}
	p@tcg = getholdersum(getrandomcard_arg1)
	if ( getholdersum(getrandomcard_arg1) >= 7 & specialruledrawswhenhandfull@tcg != 1 ) {
		return
	}
	*getrandomcard_WHILE1
	c@tcg = rnd(maxcard@tcg)
	if ( card@tcg(TCG_CARD_LOCATION, c@tcg) == TCG_LOCATION_DECK ) {
		if ( card@tcg(TCG_CARD_CONTROLLER, c@tcg) == getrandomcard_arg1 ) {
			goto *getrandomcard_WEND1
		}
	}
	goto *getrandomcard_WHILE1
	*getrandomcard_WEND1
	card@tcg(TCG_CARD_LOCATION, c@tcg) = TCG_LOCATION_HAND, getrandomcard_arg1, deckix@tcg(getrandomcard_arg1), deckiy@tcg(getrandomcard_arg1), holderix@tcg(getrandomcard_arg1) + p@tcg * holderspace@tcg, holderiy@tcg(getrandomcard_arg1), 0, 0
	cpdata@tcg(TCG_PLAYER_DECK, getrandomcard_arg1)--
	card@tcg(TCG_CARD_TURN_COUNT, c@tcg) = 0
	if ( getrandomcard_arg1 == player@tcg ) {
		cdbitmod TCG_BIT_FACE_UP, c@tcg, 1
	}
	else {
		cdbitmod TCG_BIT_FACE_UP, c@tcg, 0
	}
	if ( getholdersum(getrandomcard_arg1) > 7 ) {
		delbottomcard getrandomcard_arg1
	}
	if ( effref@tcg(TCG_SKILL_TYPE,card@tcg(TCG_CARD_EFFECT, c@tcg)) == TCG_SKILL_TYPE_ONDRAW & turn@tcg > 0 ) {
		effac@tcg = c@tcg
		eff@tcg = card@tcg(TCG_CARD_EFFECT, c@tcg)
		// dialog "" + c@tcg + "/" + eff@tcg + "/" + effref@tcg(TCG_SKILL_TYPE, eff@tcg)
		cdbitmod TCG_BIT_FACE_UP, effac@tcg, 1
		gosub *card_action_choose_target
	}
	makecardlist
	cardposhand card@tcg(TCG_CARD_CONTROLLER, c@tcg), -1
	return

#deffunc gettargetcard int gettargetcard_arg1
	n@tcg = card@tcg(TCG_CARD_CONTROLLER, gettargetcard_arg1)
	p@tcg = getholdersum(n@tcg)
	if ( getholdersum(n@tcg) >= 7 & specialruledrawswhenhandfull@tcg != 1 ) {
		return
	}
	if ( card@tcg(TCG_CARD_LOCATION, gettargetcard_arg1) == TCG_LOCATION_DECK ) {
		card@tcg(TCG_CARD_LOCATION, gettargetcard_arg1) = TCG_LOCATION_HAND, n@tcg, deckix@tcg(n@tcg), deckiy@tcg(n@tcg), holderix@tcg(n@tcg) + p@tcg * holderspace@tcg, holderiy@tcg(n@tcg), 0, 0
		cpdata@tcg(TCG_PLAYER_DECK, n@tcg)--
	}
	if ( card@tcg(TCG_CARD_LOCATION, gettargetcard_arg1) == TCG_LOCATION_GRAVEYARD ) {
		f@tcg = 0
		repeat gravesum@tcg(n@tcg)
			if ( f@tcg == 1 ) {
				gravelist@tcg(cnt - 1, n@tcg) = gravelist@tcg(cnt, n@tcg)
			}
			if ( gravelist@tcg(cnt, n@tcg) != gettargetcard_arg1 & f@tcg == 0 ) { continue }
			if ( gravelist@tcg(cnt, n@tcg) == gettargetcard_arg1 ) { 
				f@tcg = 1
				continue 
			}
		loop
		gravesum@tcg(n@tcg)--
		cpdata@tcg(TCG_PLAYER_GRAVEYARD, n@tcg)--
		card@tcg(TCG_CARD_X, gettargetcard_arg1) = graveix@tcg(n@tcg), graveiy@tcg(n@tcg), graveix@tcg(n@tcg), graveiy@tcg(n@tcg), 0, 0
	}
	if ( card@tcg(TCG_CARD_LOCATION, gettargetcard_arg1) == TCG_LOCATION_FIELD ) {
		repeat maxcard@tcg
			if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_FIELD ) {
				continue
			}
			if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != card@tcg(TCG_CARD_CONTROLLER, gettargetcard_arg1) ) {
				continue
			}
			if ( card@tcg(TCG_CARD_X, cnt) > card@tcg(TCG_CARD_X, gettargetcard_arg1) ) {
				card@tcg(TCG_CARD_X_MOVETO, cnt) -= spotspace@tcg
			}
		loop
		card@tcg(TCG_CARD_STATUS, gettargetcard_arg1) = TCG_ACTION_NONE
		cdbitmod TCG_BIT_EXHAUSTED, gettargetcard_arg1, 0
	}
	card@tcg(TCG_CARD_LOCATION, gettargetcard_arg1) = TCG_LOCATION_HAND, n@tcg
	card@tcg(TCG_CARD_X_MOVETO, gettargetcard_arg1) = holderix@tcg(n@tcg) + p@tcg * holderspace@tcg, holderiy@tcg(n@tcg)
	card@tcg(TCG_CARD_TURN_COUNT, gettargetcard_arg1) = 0
	if ( n@tcg == 0 ) {
		cdbitmod TCG_BIT_FACE_UP, gettargetcard_arg1, 1
	}
	else {
		cdbitmod TCG_BIT_FACE_UP, gettargetcard_arg1, 0
	}
	if ( getholdersum(n@tcg) > 7 ) {
		delbottomcard n@tcg
	}
	if ( effref@tcg(TCG_SKILL_TYPE, card@tcg(TCG_CARD_EFFECT, gettargetcard_arg1)) == TCG_SKILL_TYPE_ONDRAW ) {
		effac@tcg = gettargetcard_arg1
		eff@tcg = card@tcg(TCG_CARD_EFFECT, gettargetcard_arg1)
		// dialog "" + gettargetcard_arg1 + "/" + eff@tcg + "/" + effref@tcg(TCG_SKILL_TYPE, eff@tcg)
		gosub *card_action_choose_target
		cdbitmod TCG_BIT_FACE_UP, effac@tcg, 1
	}
	makecardlist
	cardposhand 0, -1
	cardposhand 1, -1
	cardpos 0, -1
	cardpos 1, -1
	return

#deffunc saccard int saccard_arg1, int saccard_arg2
	snd SOUNDLIST_FEAT
	sac@tcg++
	if ( dbg_tcg & saccard_arg2 == 0 ) { sac@tcg = 0 } 
	if ( saccard_arg2 == 0 ) {
		cardhelp lang("カードを捧げた。", "You sacrifice the card."), 40
	}
	else {
		cardhelp lang("相手はカードを捧げた。", "The opponent sacrifices the card."), 40
	}
	repeat maxcard@tcg
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != saccard_arg2 ) {
			continue
		}
		if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_HAND ) {
			continue
		}
		if ( card@tcg(TCG_CARD_X, cnt) <= card@tcg(TCG_CARD_X, saccard_arg1) ) {
			continue
		}
		card@tcg(TCG_CARD_X_MOVETO, cnt) -= holderspace@tcg
	loop
	cpdata@tcg(TCG_PLAYER_MAX_MANA, saccard_arg2)++
	cpdata@tcg(TCG_PLAYER_MANA, saccard_arg2)++
	effac@tcg = saccard_arg1
	eff@tcg = card@tcg(TCG_CARD_EFFECT, saccard_arg1)
	// costbk@tcg = card@tcg(TCG_CARD_COST, saccard_arg1)
	// card_ref 10000 + card@tcg(TCG_CARD_REF_DOMAIN, saccard_arg1) * 100 + rnd(2)
	// create_card saccard_arg1, stat
	// card@tcg(TCG_CARD_EFFECT, saccard_arg1) = eff@tcg
	// card@tcg(TCG_CARD_COST, saccard_arg1) = costbk@tcg
	cdbitmod TCG_BIT_FACE_UP, saccard_arg1, 0
	card@tcg(TCG_CARD_X_MOVETO, saccard_arg1) = landix@tcg(saccard_arg2) + landsum@tcg(saccard_arg2) * limit(landspace@tcg - landsum@tcg(saccard_arg2) / 2, 4, landspace@tcg)
	card@tcg(TCG_CARD_Y_MOVETO, saccard_arg1) = landiy@tcg(saccard_arg2)
	landlist@tcg(landsum@tcg(saccard_arg2), saccard_arg2) = saccard_arg1
	landsum@tcg(saccard_arg2)++
	tcgdraw
	makecardlist
	card@tcg(TCG_CARD_LOCATION, saccard_arg1) = TCG_LOCATION_EXILE
	cdbitmod TCG_BIT_FACE_UP, saccard_arg1, 1
	makecardlist
	if ( effref@tcg(TCG_SKILL_TYPE, eff@tcg) == TCG_SKILL_TYPE_SACRIFICE ) {
		gosub *card_action_choose_target
		makecardlist
		tcgdraw
	}
	gosub *refresh_bg
	efllistadd 2, 1, card@tcg(TCG_CARD_X, saccard_arg1), card@tcg(TCG_CARD_Y, saccard_arg1), cpx@tcg(saccard_arg2), cpy@tcg(saccard_arg2)
	return

#deffunc opencard int opencard_arg1
	snd SOUNDLIST_CARD1
	cdbitmod TCG_BIT_FACE_UP, opencard_arg1, 1
	tcgdraw
	return

#deffunc putcard int putcard_arg1, int putcard_arg2
	if ( getspotsum(putcard_arg2) >= 8 ) {
		if ( putcard_arg2 == player@tcg ) {
			snd SOUNDLIST_FAIL1
			cardhelp lang("これ以上は場に出せない。", "Your field is full."), 40
		}
		return -1
	}
	if ( card@tcg(TCG_CARD_LOCATION, putcard_arg1) == TCG_LOCATION_FIELD ) {
		if ( putcard_arg2 != card@tcg(TCG_CARD_CONTROLLER, putcard_arg1) ) {
			if ( getspotsum(1 - card@tcg(TCG_CARD_CONTROLLER, putcard_arg1)) < 8 ) {
				card@tcg(TCG_CARD_CONTROLLER, putcard_arg1) = 1 - card@tcg(TCG_CARD_CONTROLLER, putcard_arg1)
				makecardlist
				cardpos 0, -1
				cardpos 1, -1
			}
		}
		return -1
	}
	if ( card@tcg(TCG_CARD_LOCATION, putcard_arg1) == TCG_LOCATION_GRAVEYARD ) {
		card@tcg(TCG_CARD_X, putcard_arg1) = graveix@tcg(putcard_arg2), graveiy@tcg(putcard_arg2), graveix@tcg(putcard_arg2), graveiy@tcg(putcard_arg2), 0, 0
		f@tcg = 0
		repeat gravesum@tcg(putcard_arg2)
			if ( f@tcg == 1 ) {
				gravelist@tcg(cnt - 1, putcard_arg2) = gravelist@tcg(cnt, putcard_arg2)
			}
			if ( gravelist@tcg(cnt, putcard_arg2) != putcard_arg1 & f@tcg == 0 ) { continue }
			if ( gravelist@tcg(cnt, putcard_arg2) == putcard_arg1 ) { 
				f@tcg = 1
				continue 
			}
		loop
		gravesum@tcg(putcard_arg2)--
		cpdata@tcg(TCG_PLAYER_GRAVEYARD, putcard_arg2)--
	}
	if ( card@tcg(TCG_CARD_LOCATION, putcard_arg1) == TCG_LOCATION_HAND ) {
		if ( putcardfree@tcg == 0 ) {
			if ( cdbit(TCG_BIT_ENEMY, putcard_arg1) ) {
				card@tcg(TCG_CARD_CONTROLLER, putcard_arg1) = 1 - card@tcg(TCG_CARD_CONTROLLER, putcard_arg1)
				if ( getspotsum(card@tcg(TCG_CARD_CONTROLLER, putcard_arg1)) >= 8 ) {
					if ( 1 - card@tcg(TCG_CARD_CONTROLLER, putcard_arg1) == player@tcg ) {
						snd SOUNDLIST_FAIL1
						cardhelp lang("これ以上は場に出せない。", "Your opponent's field is full."), 40
					}
					return -1
				}
			}
			if ( card@tcg(TCG_CARD_COST, putcard_arg1) > cpdata@tcg(TCG_PLAYER_MANA, putcard_arg2) ) {
				if ( putcard_arg2 == player@tcg ) {
					snd SOUNDLIST_FAIL1
					cardhelp lang("マナが足りない。", "You don't have enough mana."), 40
				}
				if ( debug == 0 ) {
					return -3
				}
			}
			cpdata@tcg(TCG_PLAYER_MANA, putcard_arg2) -= card@tcg(TCG_CARD_COST, putcard_arg1)
			cpdata@tcg(TCG_PLAYER_MANA_SPENT, putcard_arg2) += card@tcg(TCG_CARD_COST, putcard_arg1)
			if ( putcard_arg2 == 0 ) {
				card@tcg(TCG_CARD_Y_MOVETO, putcard_arg1) -= 25
			}
			else {
				card@tcg(TCG_CARD_Y_MOVETO, putcard_arg1) += 25
			}
			tcgdraw
		} 
		repeat maxcard@tcg
			if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != putcard_arg2 ) {
				continue
			}
			if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_HAND ) {
				continue
			}
			if ( card@tcg(TCG_CARD_X, cnt) <= card@tcg(TCG_CARD_X, putcard_arg1) ) {
				continue
			}
			card@tcg(TCG_CARD_X_MOVETO, cnt) -= holderspace@tcg
		loop
		cdbitmod TCG_BIT_FACE_UP, putcard_arg1, 0
	}
	putcardfree@tcg = 0
	if ( card@tcg(TCG_CARD_LOCATION, putcard_arg1) == TCG_LOCATION_DECK ) {
		card@tcg(TCG_CARD_X, putcard_arg1) = deckix@tcg(card@tcg(TCG_CARD_CONTROLLER, putcard_arg1)), deckiy@tcg(card@tcg(TCG_CARD_CONTROLLER, putcard_arg1)), deckix@tcg(card@tcg(TCG_CARD_CONTROLLER, putcard_arg1)), deckiy@tcg(card@tcg(TCG_CARD_CONTROLLER, putcard_arg1)), 0, 0
		cpdata@tcg(TCG_PLAYER_DECK, putcard_arg2)--
	}
	p@tcg = getspotsum(card@tcg(TCG_CARD_CONTROLLER, putcard_arg1))
	card@tcg(TCG_CARD_LOCATION, putcard_arg1) = TCG_LOCATION_FIELD
	card@tcg(TCG_CARD_TURN_COUNT, putcard_arg1) = 0
	if ( cdbit(TCG_BIT_HASTE, putcard_arg1) != TRUE & cdbit(TCG_BIT_RIDER, putcard_arg1) != TRUE ) {
		card@tcg(TCG_CARD_STATUS, putcard_arg1) = TCG_ACTION_EXHAUSTED
		cdbitmod TCG_BIT_EXHAUSTED, putcard_arg1, 1
	}
	cdbitmod TCG_BIT_WINDFURY_USABLE, putcard_arg1, 0
	if ( cdbit(TCG_BIT_WINDFURY, putcard_arg1) == TRUE ) {
		cdbitmod TCG_BIT_WINDFURY_USABLE, putcard_arg1, 1
	}
	cardpos card@tcg(TCG_CARD_CONTROLLER, putcard_arg1), putcard_arg1
	tcgdraw
	makecardlist
	opencard putcard_arg1
	// dialog "" + putcard_arg1 + "/" + card@tcg(TCG_CARD_EFFECT, putcard_arg1) + "/" + effref@tcg(TCG_SKILL_TYPE, card@tcg(TCG_CARD_EFFECT, putcard_arg1))
	if ( effref@tcg(TCG_SKILL_TYPE, card@tcg(TCG_CARD_EFFECT, putcard_arg1)) == TCG_SKILL_TYPE_BATTLECRY ) {
		effac@tcg = putcard_arg1
		eff@tcg = card@tcg(TCG_CARD_EFFECT, putcard_arg1)
		gosub *card_action_choose_target
		makecardlist
		tcgdraw
	}
	if ( cdbit(TCG_BIT_SUICIDE, putcard_arg1) ) {
		card@tcg(TCG_CARD_HP, putcard_arg1) = 0
	}
	if ( card@tcg(TCG_CARD_HP, putcard_arg1) == 0 & card@tcg(TCG_CARD_LOCATION, putcard_arg1) == TCG_LOCATION_FIELD ) {
		dmgcard putcard_arg1, 0 + cdbit(TCG_BIT_SUICIDE, putcard_arg1) * 999
	}
	return 1

#deffunc tcgdrawbg
	redraw 0
	x@tcg = 960
	y@tcg = 96
	w@tcg = 128
	h@tcg = 128
	gmode 0
	repeat windowh / h@tcg + 1
		cnt2@tcg = cnt
		repeat windoww / w@tcg + 1
			pos windoww - (cnt + 1) * w@tcg, windowh - (cnt2@tcg + 1) * h@tcg
			gcopy 3, x@tcg, y@tcg, w@tcg, h@tcg
		loop
	loop
	gmode 2
	return

#defcfunc calcstartcard int calcstartcard_arg1
	return 9 - (cpdata@tcg(TCG_PLAYER_DOMAIN, calcstartcard_arg1) > 2) - (cpdata@tcg(TCG_PLAYER_DOMAIN, calcstartcard_arg1) > 3) - (cpdata@tcg(TCG_PLAYER_DOMAIN, calcstartcard_arg1) > 4) - (cpdata@tcg(TCG_PLAYER_DOMAIN, calcstartcard_arg1) > 5) - (cpdata@tcg(TCG_PLAYER_DOMAIN, calcstartcard_arg1) > 6) - (cpdata@tcg(TCG_PLAYER_DOMAIN, calcstartcard_arg1) > 7) - (cpdata@tcg(TCG_PLAYER_DOMAIN, calcstartcard_arg1) > 8) - (cpdata@tcg(TCG_PLAYER_DOMAIN, calcstartcard_arg1) > 8)

#deffunc calcstartattb int calcstartattb_arg1
	cpdata@tcg(TCG_PLAYER_LIFE, calcstartattb_arg1) = limit(40 - cpdata@tcg(TCG_PLAYER_DOMAIN, calcstartattb_arg1) * 5, 25, 40)
	cpdata@tcg(TCG_PLAYER_MAX_MANA, calcstartattb_arg1) = 0
	cpdata@tcg(TCG_PLAYER_NEXTTURN_MANA, calcstartattb_arg1) = 0
	return

#deffunc calcdomain
	repeat 2
		dim domain@tcg, 9
		p@tcg = cnt
		cpdata@tcg(TCG_PLAYER_DOMAIN, p@tcg) = 0
		repeat maxcard@tcg
			if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != p@tcg ) {
				continue
			}
			if ( domain@tcg(card@tcg(TCG_CARD_REF_DOMAIN, cnt)) == 0 ) {
				domain@tcg(card@tcg(TCG_CARD_REF_DOMAIN, cnt)) = 1
			}
		loop
		repeat 9
			if ( cnt == 4 | cnt == 5 ) { continue }
			if ( domain@tcg(cnt) ) {
				cpdata@tcg(TCG_PLAYER_DOMAIN, p@tcg)++
			}
		loop
		calcstartattb p@tcg
	loop
	return

#deffunc calcdecksize
	gdata(GDATA_DECK_SIZE + curdeck) = 0
	cardsize@tcg = 0
	cpdata@tcg(TCG_PLAYER_DOMAIN, 0) = 0
	dim domain@tcg, 9
	repeat maxcard@tcg
		cardsize@tcg += card(0, cnt)
		if ( deck(card@tcg(TCG_CARD_REF_DBID, cnt)) == 0 ) {
			continue
		}
		gdata(GDATA_DECK_SIZE + curdeck) += deck(card@tcg(TCG_CARD_REF_DBID, cnt))
		domain@tcg(card@tcg(TCG_CARD_REF_DOMAIN, cnt)) = 1
	loop
	repeat 9
		if ( cnt == 4 | cnt == 5 ) { continue }
		if ( domain@tcg(cnt) ) {
			cpdata@tcg(TCG_PLAYER_DOMAIN, 0)++
		}
	loop
	calcstartattb 0
	return

#deffunc decktest
	dim card, 4, MAX_CARD
	dim deck, MAX_CARD
	repeat MAX_CARD
		dbid = cnt
		gosub *db_card@
		gosub *db_card_custom
		if ( stat == 0 ) {
			continue
		}
		card(0, cnt) = 10
	loop
	return

#deffunc tcgdeck
	maxcard@tcg = MAX_CARD
	tcginit
	displayinfo@tcg = 0
	cardmode@tcg = 1
	i@tcg = 0
	repeat MAX_CARD
		if ( card(0, cnt) == 0 ) {
			continue
		}
		create_card i@tcg, cnt
		card@tcg(TCG_CARD_LOCATION, i@tcg) = TCG_LOCATION_DECK, 0
		i@tcg++
	loop
	*tcgDeck_loop
	tcgdrawbg
	s@tcg = lang("白", "White"), lang("青", "Blue"), lang("銀", "Silver"), lang("赤", "Red"), lang("黒", "Black")
	repeat 5
		s@tcg(cnt) += lang("のデッキ", " Deck")
		file@tcg = "" + exedir + "tmp\\deck_" + cnt + ".s2"
		existwrapper file@tcg
		if ( strsize == (-1) ) {
			s@tcg(cnt) += lang(" (新規作成)", " (New)")
		}
		else {
			if ( gdata(GDATA_DECK_SIZE + cnt) < MIN_CARD_DECK ) {
				s@tcg(cnt) += " (NG " + gdata(GDATA_DECK_SIZE + cnt) + "/" + MIN_CARD_DECK + ")"
			}
			if ( gdata(GDATA_DECK_SIZE + cnt) > MAX_CARD_DECK ) {
				s@tcg(cnt) += " (NG " + gdata(GDATA_DECK_SIZE + cnt) + "/" + MAX_CARD_DECK + ")"
			}
			if ( gdata(GDATA_DECK) == cnt ) {
				s@tcg(cnt) += " [Use]"
			}
		}
		promptAdd s@tcg(cnt)
	loop
	val = basex@tcg + 400, basey@tcg + 230, 300, 1
	gosub *prompt_key@
	if ( rtval != (-1) ) {
		dim deck, MAX_CARD
		curdeck = rtval
		file = "" + exedir + "tmp\\deck_" + curdeck + ".s2"
		existwrapper file
		if ( strsize != (-1) ) {
			promptAdd lang("デッキの構築", "Edit Deck")
			promptAdd lang("メインデッキに設定", "Set as Main Deck")
			val = basex@tcg + 400, basey@tcg + 230, 240, 1
			gosub *prompt_key@
			if ( rtval == (-1) ) {
				goto *tcgDeck_loop
			}
			if ( rtval == 1 ) {
				gdata(GDATA_DECK) = curdeck
				goto *tcgDeck_loop
			}
			if ( rtval == 0 ) {
				fmode = 24
				gosub *game_ctrlFile@
			}
		}
		decksizebk@tcg = gdata(GDATA_DECK_SIZE + curdeck)
		snd SOUNDLIST_WEAR
		calcdecksize
		deckmode@tcg = 0, rtval@tcg
		gosub *select_deck
		goto *tcgDeck_loop
	}
	return

#deffunc tcgmain
	maxcard@tcg = MAX_CARD_DECK_TOTAL * 2
	tcginit
	repeat 2
		rp@tcg = cnt
		cpx@tcg(cnt) = basex@tcg + 23
		cpy@tcg(cnt) = basey@tcg + 236 - cnt * 120
		cpdata@tcg(TCG_PLAYER_LIFE, cnt) = 30
		cpdata@tcg(TCG_PLAYER_GRAVEYARD, cnt) = 0
		cpdata@tcg(TCG_PLAYER_DECK, cnt) = 30
		cpdata@tcg(TCG_PLAYER_EXTRACARD, cnt) = 0
		if ( rp@tcg == 0 ) {
			gosub *card_loadplayerdeck
		} else {
			gosub *card_generateopponentdeck
		}
		if ( cardsize@tcg < MIN_CARD_DECK ) {
			repeat MIN_CARD_DECK - cardsize@tcg
				cc@tcg = rp@tcg * MAX_CARD_DECK_TOTAL + cnt + cardsize@tcg
				card_ref rnd(MAX_CREATURE_ID - 3) + 1
				create_card cc@tcg, stat
				card@tcg(TCG_CARD_LOCATION, cc@tcg) = TCG_LOCATION_DECK, rp@tcg
			loop
		}
	loop
	calcdomain
	repeat maxcard@tcg
		if ( effref@tcg(TCG_SKILL_TYPE, card@tcg(TCG_CARD_EFFECT, cnt)) == TCG_SKILL_TYPE_ONGAMESTART ) {
			effac@tcg = cnt
			eff@tcg = card@tcg(TCG_CARD_EFFECT, cnt)
			gosub *card_action_choose_target
		}
	loop
	ct@tcg = TCG_CONTROLLER_PLAYER
	ct@tcg += rnd(2) // Randomly decide who go first.
	player@tcg = TCG_CONTROLLER_PLAYER
	if ( deck(CREATURE_ID_MANI) > 0 ) {
		player@tcg = TCG_CONTROLLER_OBSERVER
	} else {
		if ( deck(CREATURE_ID_DEUS_EX_MANINA) > 0 ) {
			player@tcg = TCG_CONTROLLER_OPPONENT
		}
	}
	if ( deck(CREATURE_ID_JURE) > 0 ) { specialrulecreatureremovewounds@tcg = 1 } 
	if ( deck(CREATURE_ID_BLESSED_JURE) > 0 ) { 
		specialrulenosaccingmanaautoinc@tcg = 1 
		specialrulenoonedies@tcg = 1 
	} 
	if ( deck(CREATURE_ID_ITZPALT) > 0 ) { 
		specialruledrawswhenhandfull@tcg = 1 
		specialruledrawtwocardsperturn@tcg = 1 
	} 
	if ( deck(CREATURE_ID_THE_ELEMENT) > 0 ) { specialrulelifeordeathcombat@tcg = 1 } 
	repeat 2
		cp@tcg = cnt
		repeat calcstartcard(cnt)
			getrandomcard cp@tcg
		loop
	loop
	*tcgmain_WHILE1
	cpisme
	gosub *phase_begin
	if ( gameover() ) {
		goto *tcgmain_WEND1
	}
	gosub *phase_draw
	if ( gameover() ) {
		goto *tcgmain_WEND1
	}
	gosub *phase_main
	if ( gameover() ) {
		goto *tcgmain_WEND1
	}
	gosub *phase_end
	if ( (specialruletimestop@tcg > 0 & ct@tcg == TCG_CONTROLLER_PLAYER) ) {
		specialruletimestop@tcg--
		goto *tcgmain_WHILE1
	}
	if ( (specialruletimestop@tcg < 0 & ct@tcg == TCG_CONTROLLER_OPPONENT) ) {
		specialruletimestop@tcg++
		goto *tcgmain_WHILE1
	}
	if ( ct@tcg == TCG_CONTROLLER_PLAYER ) {
		ct@tcg = TCG_CONTROLLER_OPPONENT
	}
	else {
		ct@tcg = TCG_CONTROLLER_PLAYER
	}
	goto *tcgmain_WHILE1
	*tcgmain_WEND1
	promptmax = 0
	if ( gameresult@tcg == -1 ) {
		promptAdd "Surrendered!", "a"
	}
	if ( gameresult@tcg == -2 ) {
		promptAdd "Escaped!", "a"
	}
	if ( gameresult@tcg > 0 & gameresult@tcg \ 2 == 1 ) {
		promptAdd "You Win!", "a"
	} else {
		promptAdd "You Lose!", "a"
	}
	if ( gameresult@tcg == 1 ) { promptAdd "Opponent's health is reduced to 0.", "b" }
	if ( gameresult@tcg == 2 ) { promptAdd "Your health is reduced to 0.", "b" }
	if ( gameresult@tcg == 3 ) { promptAdd "Opponent can't draw any cards.", "b" }
	if ( gameresult@tcg == 4 ) { promptAdd "You can't draw any cards.", "b" }
	if ( gameresult@tcg == 5 ) { promptAdd "You won using Zeome's effect.", "b" }
	if ( gameresult@tcg == 6 ) { promptAdd "You lose due to Zeome's effect.", "b" }
	if ( gameresult@tcg == 7 ) { promptAdd "You won using Meshera's effect.", "b" }
	if ( gameresult@tcg == 8 ) { promptAdd "You lose due to Meshera's effect.", "b" }
	if ( gameresult@tcg == 9 ) { promptAdd "You won using Unitdeads' effect.", "b" }
	if ( gameresult@tcg == 10 ) { promptAdd "You lose due to Unitdeads' effect.", "b" }
	val = promptx, prompty, 320, 1
	gosub *prompt_key
	gosub *tcg_drawInterface
	if ( key == key_enter | key == key_cancel | key == key_escape ) {
		return
	}
	*tcgmain_WEND2
	cardhelp lang("ゲームオーバー！Enterキーで退出。", "Game Over! Press Enter to leave."), 40
	tcgdraw
	await 15
	stick a@tcg
	key_check
	if ( key == key_enter | key == key_cancel | key == key_escape ) {
		return
	}
	goto *tcgmain_WEND2
	return

*phase_begin
	phase@tcg = 0
	turn@tcg++
	tcgdraw
	await 50
	sac@tcg = 0
	if ( specialrulenosaccingmanaautoinc@tcg ) {
		sac@tcg = 1
		cpdata@tcg(TCG_PLAYER_MAX_MANA, cp@tcg)++
	}
	cpdata@tcg(TCG_PLAYER_MANA, cp@tcg) = limit(cpdata@tcg(TCG_PLAYER_MAX_MANA, cp@tcg) + cpdata@tcg(TCG_PLAYER_NEXTTURN_MANA, cp@tcg), 0, 10000)
	cpdata@tcg(TCG_PLAYER_NEXTTURN_MANA, cp@tcg) = 0
	repeat maxcard@tcg
		if ( cdbit(TCG_BIT_GHOST, cnt) != TRUE ) { continue }
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != cp@tcg ) { continue }
		if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_FIELD ) { continue }
		gettargetcard cnt
	loop
	repeat maxcard@tcg
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != cp@tcg ) { continue }
		if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_GRAVEYARD ) { continue }
		card@tcg(TCG_CARD_TURN_COUNT, cnt)++
		effac@tcg = cnt
		eff@tcg = card@tcg(TCG_CARD_EFFECT, cnt)
		// dialog "" + cnt + "/" + eff@tcg + "/" + effref@tcg(TCG_SKILL_TYPE, eff@tcg)
		if ( effref@tcg(TCG_SKILL_TYPE, eff@tcg) == TCG_SKILL_TYPE_INGRAVE ) {
			cdbitmod TCG_BIT_FACE_UP, effac@tcg, 1
			gosub *card_action_choose_target
		}
	loop
	repeat maxcard@tcg
		if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_FIELD ) {
			continue
		}
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != cp@tcg ) {
			continue
		}
		card@tcg(TCG_CARD_TURN_COUNT, cnt)++
		if ( cdbit(TCG_BIT_WINDFURY, cnt) == TRUE ) {
			cdbitmod TCG_BIT_WINDFURY_USABLE, cnt, 1
		}
		card@tcg(TCG_CARD_STATUS, cnt) = TCG_ACTION_NONE
		cdbitmod TCG_BIT_EXHAUSTED, cnt, 0
		if ( cdbit(TCG_BIT_FROZEN, cnt) == TRUE & card@tcg(TCG_CARD_STATUS, cnt) == TCG_ACTION_NONE ) {
			cdbitmod TCG_BIT_FROZEN, cnt, 0
			cdbitmod TCG_BIT_EXHAUSTED, cnt, 1
			card@tcg(TCG_CARD_STATUS, cnt) = TCG_ACTION_EXHAUSTED
		}
		if ( cdbit(TCG_BIT_PARALYSED, cnt) == TRUE & card@tcg(TCG_CARD_STATUS, cnt) == TCG_ACTION_NONE ) {
			cdbitmod TCG_BIT_PARALYSED, cnt, 0
			cdbitmod TCG_BIT_EXHAUSTED, cnt, 1
			card@tcg(TCG_CARD_STATUS, cnt) = TCG_ACTION_EXHAUSTED
		}
		if ( cdbit(TCG_BIT_POISONED, cnt) ) {
			card@tcg(TCG_CARD_HP, cnt)--
		}
		if ( cdbit(TCG_BIT_REGENERATION, cnt) | specialrulecreatureremovewounds@tcg ) {
			card@tcg(TCG_CARD_HP, cnt) = card@tcg(TCG_CARD_REF_HP, cnt)
			cdbitmod TCG_BIT_POISONED, cnt, 0
		}
		if ( cdbit(TCG_BIT_DEATHWORD, cnt) & card@tcg(TCG_CARD_TURN_COUNT, cnt) >= 3) {
			card@tcg(TCG_CARD_HP, cnt) = 0
		}
		if ( card@tcg(TCG_CARD_HP, cnt) == 0 ) {
			dmgcard cnt, 0
			continue
		}
		effac@tcg = cnt
		eff@tcg = card@tcg(TCG_CARD_EFFECT, cnt)
		// dialog "" + cnt + "/" + eff@tcg + "/" + effref@tcg(TCG_SKILL_TYPE, eff@tcg)
		if ( effref@tcg(TCG_SKILL_TYPE, eff@tcg) == TCG_SKILL_TYPE_TURN_START ) {
			gosub *card_action_choose_target
		}
	loop
	makecardlist
	tcgdraw
	return

*phase_draw
	phase@tcg = 1
	tcgdraw
	await 50
	getrandomcard cp@tcg
	if ( specialruledrawtwocardsperturn@tcg ) {
		await 50
		getrandomcard cp@tcg
	}
	if ( cp@tcg == 1 & getspotsum(0) >= getspotsum(1) + 1 + rnd(6) ) { // Give AI extra cards because they suck
		await 50
		getrandomcard cp@tcg
	}
	if ( dbg_tcg & cp@tcg == 0 ) {
		repeat 7 
			await 50
			getrandomcard cp@tcg
		loop
	}
	repeat maxcard@tcg
		if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_HAND ) { continue }
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != cp@tcg ) { continue }
		card@tcg(TCG_CARD_TURN_COUNT, cnt)++
		effac@tcg = cnt
		eff@tcg = card@tcg(TCG_CARD_EFFECT, cnt)
		// dialog "" + cnt + "/" + eff@tcg + "/" + effref@tcg(TCG_SKILL_TYPE, eff@tcg)
		if ( effref@tcg(TCG_SKILL_TYPE, eff@tcg) == TCG_SKILL_TYPE_INHAND ) {
			cdbitmod TCG_BIT_FACE_UP, effac@tcg, 1
			gosub *card_action_choose_target
		}
	loop
	tcgdraw
	return

*phase_main
	phase@tcg = 2
	tcgdraw
	await 50
	if ( cp@tcg == player@tcg ) {
		selectmode@tcg = 0
		gosub *card_player
	}
	else {
		selectmode@tcg = -1
		gosub *card_ai
	}
	return

*phase_end
	repeat maxcard@tcg
		if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_FIELD ) {
			continue
		}
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != cp@tcg ) {
			continue
		}
		effac@tcg = cnt
		eff@tcg = card@tcg(TCG_CARD_EFFECT, cnt)
		// dialog "" + cnt + "/" + eff@tcg + "/" + effref@tcg(TCG_SKILL_TYPE, eff@tcg)
		if ( effref@tcg(TCG_SKILL_TYPE, eff@tcg) == TCG_SKILL_TYPE_TURN_END ) {
			gosub *card_action_choose_target
		}
	loop
	makecardlist
	tcgdraw
	phase@tcg = 3
	if ( cp@tcg == player@tcg ) {
		selectmode@tcg = 0
	}
	else {
		selectmode@tcg = -1
	}
	repeat 5
		tcgdraw
	loop
	return

#deffunc csfix
	if ( selectmode@tcg == 2 ) {
		if ( targetlinenum@tcg <= 0 ) { return }
		repeat 6
			if ( clistmax@tcg(csline@tcg) < 0 | cs@tcg >= clistmax@tcg(csline@tcg) ) {
				if ( cnt != 0 ) { targetcs@tcg++ }
				if ( targetcs@tcg >= targetlinenum@tcg ) { targetcs@tcg = 0 }
				if ( targetcs@tcg < 0 ) { targetcs@tcg = targetlinenum@tcg - 1 }
				csline@tcg = targetline@tcg(targetcs@tcg)
				cs@tcg = 0 - (csline@tcg == 0)
			} else {
				break
			}
			if ( cnt == 5 ) {
				targetlinenum@tcg = 0
				csline@tcg = 0
				cs@tcg = -1
			}
		loop
		return
	}
	if ( clistmax@tcg(csline@tcg) == 0 ) {
		if ( csline@tcg != 0 ) {
			cs@tcg = -1
			csline@tcg = 0
		}
	}
	if ( cs@tcg == (-1) ) {
		if ( csline@tcg != 0 ) {
			cs@tcg = 0
		}
	}
	if ( cs@tcg >= clistmax@tcg(csline@tcg) ) {
		if ( csline@tcg == 0 ) {
			cs@tcg = -1
		}
		else {
			cs@tcg = 0
		}
	}
	if ( cs@tcg < (-1) ) {
		cs@tcg = clistmax@tcg(csline@tcg) - 1
	}
	return

#deffunc cslineup
	if ( selectmode@tcg == 2 ) {
		if ( targetlinenum@tcg <= 0 ) { return }
		targetcs@tcg++
		if ( targetcs@tcg >= targetlinenum@tcg ) { targetcs@tcg = 0 }
		if ( targetcs@tcg < 0 ) { targetcs@tcg = targetlinenum@tcg - 1 }
		csline@tcg = targetline@tcg(targetcs@tcg)
		cs@tcg = 0 - (csline@tcg == 0 | csline@tcg == 3)
		return
	}
	repeat
		csline@tcg++
		if ( csline@tcg == 4 ) {
			break
		}
		if ( clistmax@tcg(csline@tcg) != 0 ) {
			break
		}
	loop
	if ( csline@tcg == 4 ) {
		csline@tcg = 0
	}
	if ( csline@tcg == 0 | csline@tcg == 3 ) {
		cs@tcg = -1
	}
	else {
		cs@tcg = 0
	}
	if ( cs@tcg >= clistmax@tcg(csline@tcg) ) {
		cs@tcg = clistmax@tcg(csline@tcg) - 1
	}
	return

#deffunc cslinedown
	if ( selectmode@tcg == 2 ) {
		if ( targetlinenum@tcg <= 0 ) { return }
		targetcs@tcg--
		if ( targetcs@tcg >= targetlinenum@tcg ) { targetcs@tcg = 0 }
		if ( targetcs@tcg < 0 ) { targetcs@tcg = targetlinenum@tcg - 1 }
		csline@tcg = targetline@tcg(targetcs@tcg)
		cs@tcg = 0 - (csline@tcg == 0 | csline@tcg == 3)
		return
	}
	if ( csline@tcg == 0 ) {
		csline@tcg = 4
	}
	repeat
		csline@tcg--
		if ( csline@tcg == (-1) ) {
			break
		}
		if ( clistmax@tcg(csline@tcg) != 0 ) {
			break
		}
	loop
	if ( csline@tcg == (-1) ) {
		csline@tcg = 0
	}
	if ( csline@tcg == 0 | csline@tcg == 3  ) {
		cs@tcg = -1
	}
	else {
		cs@tcg = 0
	}
	if ( cs@tcg >= clistmax@tcg(csline@tcg) ) {
		cs@tcg = clistmax@tcg(csline@tcg) - 1
	}
	return

*refresh_bg
	gsel 4
	pos 0, 0
	picload exedir + "graphic\\bg_card.bmp", 1
	gmode 2
	font lang(cfg_font1, cfg_font2), 14 - en * 2, 0
	color 255, 255, 255
	repeat 2
		gmode 0
		cnt2@tcg = cnt
		dim mana@tcg, 10
		repeat landsum@tcg(cnt2@tcg)
			x@tcg = landix@tcg(cnt2@tcg) + cnt * limit(landspace@tcg - landsum@tcg(cnt2@tcg) / 2, 4, landspace@tcg)
			y@tcg = landiy@tcg(cnt2@tcg)
			m@tcg = landlist@tcg(cnt, cnt2@tcg)
			n@tcg = abs(card@tcg(TCG_CARD_REF_PIC, m@tcg))
			mana@tcg(card@tcg(TCG_CARD_REF_DOMAIN, m@tcg))++
			pos x@tcg, y@tcg
			// gcopy 2, n@tcg \ 22 * 72, n@tcg / 22 * 96, 72, 96
			gcopy 7, 72 + card@tcg(TCG_CARD_REF_DOMAIN, m@tcg) * 72, 0, 72, 96
		loop
		y@tcg = landiy@tcg(cnt2@tcg) + (cnt == 0) * 80
		x@tcg = landix@tcg(cnt2@tcg) - 16
		repeat 10
			if ( mana@tcg(cnt) == 0 ) {
				continue
			}
			pos x@tcg - 15, y@tcg - 2
			// gcopy 7, cnt * 12, 126, 12, 18
			gzoom 12, 18, 7, 72 + cnt * 72, 0, 72, 96
			pos x@tcg, y@tcg
			mes mana@tcg(cnt)
			if ( cnt2@tcg == 0 ) {
				y@tcg -= 20
			}
			else {
				y@tcg += 20
			}
		loop
		gravespace@tcg = 22
		if ( gravesum@tcg(cnt2@tcg) > 5 ) {
			gravespace@tcg = 110 / gravesum@tcg(cnt2@tcg)
		}
		repeat gravesum@tcg(cnt2@tcg)
			x@tcg = graveix@tcg(cnt2@tcg) - cnt * gravespace@tcg
			y@tcg = graveiy@tcg(cnt2@tcg)
			m@tcg = gravelist@tcg(cnt, cnt2@tcg)
			if ( dbg_tcg ) {
				pos x@tcg + 60, y@tcg - 28
				color 0, 0, 0
				bmes "" + m@tcg, 235, 235, 235
				pos x@tcg + 60, y@tcg - 14
				color 0, 0, 0
				bmes "" + card@tcg(TCG_CARD_EFFECT, m@tcg), 235, 235, 235
			}
			if ( card@tcg(TCG_CARD_REF_PIC, m@tcg) > 0 ) {
				gmode 2
				pos x@tcg, y@tcg
				gcopy 7, 72 + card@tcg(TCG_CARD_REF_BG, m@tcg) * 72, 0, 72, 96
				if ( gravesum@tcg(cnt2@tcg) <= 5 | cnt == gravesum@tcg(cnt2@tcg) - 1 ) {
					if ( card@tcg(TCG_CARD_REF_DBID, m@tcg) != 343 ) {
						n@tcg = card@tcg(TCG_CARD_REF_PIC, m@tcg) \ COLOR_TINT_MULT + card@tcg(TCG_CARD_REF_CHARA_PIC, m@tcg) * COLOR_TINT_MULT
						chara_preparepic n@tcg, (card@tcg(TCG_CARD_REF_PIC, m@tcg) - card@tcg(TCG_CARD_REF_CHARA_PIC, m@tcg) * COLOR_TINT_MULT) / COLOR_TINT_MULT
						gsel 4
					}
					else {
						n@tcg = 1
						chara_preparepic n@tcg, 0
						gsel 4
					}
					color 0, 0, 0
					pos x@tcg + 13, y@tcg + 32 - chipc(CHIPC_F, n@tcg) + chipc(CHIPC_HEIGHT, n@tcg) / 6
					gcopy 5, 0, 960, chipc(CHIPC_WIDTH, n@tcg), chipc(CHIPC_HEIGHT, n@tcg)
				}
			}
			else {
				gmode 0
				n@tcg = abs(card@tcg(TCG_CARD_REF_PIC, m@tcg))
				pos x@tcg, y@tcg
				gcopy 2, n@tcg \ 22 * 72, n@tcg / 22 * 96, 72, 96
			}
		loop
	loop
	gsel 0
	return

*tcg_drawDeck
	font lang(cfg_font1, cfg_font2), 10 + en - en * 2, 0
	color 255, 255, 255
	gmode 2
	repeat cfmax@tcg
		x@tcg = basex@tcg + 180 + cnt * 63
		y@tcg = basey@tcg + 26 + (ccf@tcg == cnt) * 3
		p@tcg = cflist@tcg(cnt)
		color 0, 0, 0
		if ( ccf@tcg == cnt ) {
			gmode 4, , , 255
			color 255, 255, 255
		}
		else {
			gmode 4, , , 120
			color 200, 200, 200
		}
		pos x@tcg, y@tcg
		gcopy 7, 360, 96, 63, 20
		gmode 2
		pos x@tcg + 1, y@tcg + 4
		mes cfname@tcg(p@tcg)
		if ( ccf@tcg == cnt ) {
			pos x@tcg + 65, y@tcg - 5
			gcopy 7, 288, 96, 24, 24
		}
	loop
	font lang(cfg_font1, cfg_font2), 13 + en - en * 2, 0
	repeat 8 * 3
		p@tcg = page@tcg * 8 + cnt
		if ( p@tcg >= dlistmax@tcg ) {
			break
		}
		c@tcg = dlist@tcg(0, p@tcg)
		i@tcg = card@tcg(TCG_CARD_REF_DBID, c@tcg)
		x@tcg = basex@tcg + 144 + cnt \ 8 * 80
		y@tcg = basey@tcg + 70 + cnt / 8 * 150
		if ( deckmode@tcg == 0 ) {
			if ( deck(i@tcg) != 0 ) {
				s@tcg = "" + deck(i@tcg)
			}
			else {
				s@tcg = ""
			}
			s@tcg += "(" + card(0, i@tcg) + ")"
			color 0, 0, 0
			pos x@tcg + 1, y@tcg + 111
			mes s@tcg
			if ( deck(i@tcg) != 0 ) {
				color 150, 255, 150
			}
			else {
				color 200, 200, 200
			}
			pos x@tcg, y@tcg + 110
			mes s@tcg
		}
		card@tcg(TCG_CARD_X, c@tcg) = x@tcg
		card@tcg(TCG_CARD_Y, c@tcg) = y@tcg
		card@tcg(TCG_CARD_X_MOVETO, c@tcg) = x@tcg
		card@tcg(TCG_CARD_Y_MOVETO, c@tcg) = y@tcg
		tcgdrawcard c@tcg, 1
	loop
	font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
	color 255, 255, 255
	s@tcg = ""
	if ( sortmode@tcg == 0 ) { s@tcg += "Sort by: DBID   " }
	if ( sortmode@tcg == 1 ) { s@tcg += "Sort by: Domain   " }
	if ( sortmode@tcg == 2 ) { s@tcg += "Sort by: Cost   " }
	if ( sortmode@tcg == 3 ) { s@tcg += "Sort by: Attack   " }
	if ( sortmode@tcg == 4 ) { s@tcg += "Sort by: Hp   " }
	if ( filtertype@tcg == 0 ) { s@tcg += "Filter: DBID   " }
	if ( filtertype@tcg == 1 ) { s@tcg += "Filter: Domain   " }
	if ( filtertype@tcg == 2 ) { s@tcg += "Filter: Cost   " }
	if ( filtertype@tcg == 3 ) { s@tcg += "Filter: Attack   " }
	if ( filtertype@tcg == 4 ) { s@tcg += "Filter: Hp   " }
	if ( filtertype@tcg >= 5 & filtertype@tcg <= 14 ) { s@tcg += "Filter: Race" + (filtertype@tcg - 4) + "   " }
	if ( filtertype@tcg == 15 ) { s@tcg += "Filter: Class1   " }
	if ( filtertype@tcg == 16 ) { s@tcg += "Filter: Class2 & Sex   " }
	if ( s@tcg != "" ) {
		pos basex@tcg + 130, basey@tcg + 500
		mes s@tcg
	}
	pos basex@tcg + 130, basey@tcg + 515
	mes lang("" + key_next + "," + key_prev + ",Tab [フィルター切替]  決定ｷｰ [カード選択]  ｷｬﾝｾﾙｷｰ [終了]", "" + key_next + "," + key_prev + " [<-Filter->] " + key_fire + "," + key_get + " [Type] " + key_search + " [Sort] " + key_charainfo + " [Info] Enter [Select]  Cancel [Exit]")
	pos basex@tcg + 700, basey@tcg + 515
	mes "Page " + ((dsc@tcg / 8 / 3) + 1) + "/" + (((dlistmax@tcg - 1) / 8 / 3) + 1)
	return

*tcg_drawInterface
	gmode 0
	pos basex@tcg, basey@tcg
	gcopy 4, 0, 0, basew@tcg, baseh@tcg
	font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
	gmode 2
	pos basex@tcg + 20, basey@tcg + 22
	if ( cardmode@tcg != 0 | ct@tcg == player@tcg ) {
		gcopy 7, 360, 120, 88, 84
	}
	else {
		gcopy 7, 456, 120, 88, 84
	}
	if ( cardmode@tcg == 0 ) {
		color 0, 0, 0
		pos basex@tcg + 39, basey@tcg + 58
		mes "Turn " + turn@tcg
		color 255, 255, 255
		pos basex@tcg + 38, basey@tcg + 57
		mes "Turn " + turn@tcg
		repeat 2
			x@tcg = cpx@tcg(cnt)
			y@tcg = cpy@tcg(cnt)
			pos x@tcg, y@tcg
			gcopy 7, 264, 144, 72, 120
			s@tcg = "" + cpdata@tcg(TCG_PLAYER_LIFE, cnt)
			pos x@tcg + 36 - strlen(s@tcg) * 3, y@tcg + 9 - en
			mes s@tcg
			if ( cnt != player@tcg & debug == 0 ) {
				s@tcg = "?/" + cpdata@tcg(TCG_PLAYER_MAX_MANA, cnt)
			}
			else {
				s@tcg = "" + cpdata@tcg(TCG_PLAYER_MANA, cnt) + "/" + cpdata@tcg(TCG_PLAYER_MAX_MANA, cnt)
			}
			pos x@tcg + 36 - strlen(s@tcg) * 3, y@tcg + 95 - en
			mes s@tcg
		loop
		repeat 4
			if ( cnt - 1 == phase@tcg ) {
				pos basex@tcg + 4, basey@tcg + 370 + cnt * 20
				gcopy 7, 360, 216, 106, 18
			}
			pos basex@tcg + 36, basey@tcg + 373 + cnt * 20
			if ( cnt == 0 ) {
				if ( ct@tcg == player@tcg ) {
					color 150, 150, 255
					mes "Player"
				}
				else {
					color 255, 150, 150
					mes "Opponent"
				}
				color 215, 215, 215
			}
			else {
				mes phasen@tcg(cnt - 1)
			}
		loop
	}
	else {
		color 0, 0, 0
		pos basex@tcg + 41, basey@tcg + 53
		mes "Deck\n Editor"
		color 255, 255, 255
		pos basex@tcg + 40, basey@tcg + 52
		mes "Deck\n Editor"
		pos basex@tcg + 24, basey@tcg + 120
		if ( gdata(GDATA_DECK_SIZE + curdeck) < MIN_CARD_DECK ) {
			color 255, 100, 100
			mes "Deck " + gdata(GDATA_DECK_SIZE + curdeck) + "/" + MIN_CARD_DECK
		}
		else {
			if ( gdata(GDATA_DECK_SIZE + curdeck) > MAX_CARD_DECK ) {
				color 255, 100, 100
				mes "Deck " + gdata(GDATA_DECK_SIZE + curdeck) + "/" + MAX_CARD_DECK

			} else {
				color 100, 255, 100
				mes "Deck " + gdata(GDATA_DECK_SIZE + curdeck) + "/" + gdata(GDATA_DECK_SIZE + curdeck)
			}
		}
		color 215, 215, 215
		pos basex@tcg + 24, basey@tcg + 140
		mes "Life " + cpdata@tcg(TCG_PLAYER_LIFE, 0)
		pos basex@tcg + 24, basey@tcg + 160
		mes "Mana " + cpdata@tcg(TCG_PLAYER_MAX_MANA, 0)
		pos basex@tcg + 24, basey@tcg + 180
		mes "Card " + calcstartcard(0)
		pos basex@tcg + 24, basey@tcg + 220
		mes "Domain * " + cpdata@tcg(TCG_PLAYER_DOMAIN, 0)
		s@tcg = ""
		repeat 9
			if ( domain@tcg(cnt) ) {
				s@tcg += "" + domname@tcg(cnt) + "\n"
			}
		loop
		pos basex@tcg + 24, basey@tcg + 240
		mes s@tcg
	}
	if ( gdata(GDATA_QUICK_USE) == 1 ) {
		font lang(cfg_font1, cfg_font2), 12, 0
		pos basex@tcg + 125, basey@tcg + 542
		mes helpmsg@tcg
	}
	else {
		font lang(cfg_font1, cfg_font2), 10, 0
		if ( displayinfo@tcg == 1 ) {
			font cfg_font2, 13, 0
		}
		pos basex@tcg + 120, basey@tcg + 537
		mes helpmsg@tcg
	}
	return

*tcg_initBg
	gmode 4, , , 180
	redraw 0
	repeat 2
		cnt2@tcg = cnt
	loop
	gsel 0
	return

*select_deck_pos
	if ( dsc@tcg < 0 ) {
		dsc@tcg = dlistmax@tcg - 1
	}
	if ( dsc@tcg >= dlistmax@tcg ) {
		dsc@tcg = 0
	}
	if ( dsc@tcg >= (page@tcg + 3) * 8 ) {
		page@tcg = dsc@tcg / 8
	}
	if ( dsc@tcg < page@tcg * 8 ) {
		page@tcg = dsc@tcg / 8
	}
	page@tcg = page@tcg - page@tcg \ 3
	return

*select_deck
	gsel 4
	pos 0, 0
	picload exedir + "graphic\\bg_card.bmp", 1
	gsel 0
	dim dlist@tcg, 2, 400
	dim cflist@tcg, 10
	sdim cfname@tcg, 16, 10
	cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), domname@tcg(0), domname@tcg(1), domname@tcg(2), domname@tcg(3), domname@tcg(4), domname@tcg(5), domname@tcg(6), domname@tcg(7), domname@tcg(8), domname@tcg(9)
	cflist@tcg = 0
	cfmax@tcg = 1
	ccf@tcg = 0
	if ( deckmode@tcg == 0 ) {
		cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9
		cfmax@tcg = 9
		if ( filtertype@tcg == 0 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "0-150", "151-300", "301-450", "451-600", "601-750", "751-900", "900+  ", "All" 
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 9
		}
		if ( filtertype@tcg == 1 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "Blue", "Green", "White", "Black", "Neutral", "Legendary", "Gray", "Red", "All"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 10
		}
		if ( filtertype@tcg == 2 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "Cost 0", "Cost 1", "Cost 2", "Cost 3", "Cost 4", "Cost 5", "Cost 6", "Cost 7", "Cost 8+"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 10
		}
		if ( filtertype@tcg == 3 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "1- Atk", "2 Atk", "3 Atk", "4 Atk", "5 Atk", "6 Atk", "7 Atk", "8 Atk", "9+ Atk"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 10
		}
		if ( filtertype@tcg == 4 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "1 HP", "2 HP", "3 HP", "4 HP", "5 HP", "6 HP", "7 HP", "8 HP", "9+ HP"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 10
		}
		if ( filtertype@tcg == 5 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "seamonster", "frog", "snail", "shell", "spirit", "slime", "bird", "mushroom"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 9
		}
		if ( filtertype@tcg == 6 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "wisp", "bacteria", "wasp", "rabbit", "dinosaur", "largeanimal", "mandrake", "horse"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 9
		}
		if ( filtertype@tcg == 7 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "beast", "bear", "ent", "sheep", "dog", "fairy", "beetle"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 8
		}
		if ( filtertype@tcg == 8 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "minotaur", "lizardman", "orc", "goblin", "kobolt", "yeek", "medusa", "harpy"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 9
		}
		if ( filtertype@tcg == 9 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "snake", "rat", "mutant", "mazin", "imp", "hand", "yith", "giant"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 9
		}
		if ( filtertype@tcg == 10 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "drake", "eye", "asura", "rock", "dragon", "golem", "metal"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 8
		}
		if ( filtertype@tcg == 11 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "zombie", "ghost", "piece", "armor", "lich", "skeleton", "bat", "cat"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 9
		}
		if ( filtertype@tcg == 12 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "spider", "worm", "cupid", "eulderna", "roran", "karune", "dwarf", "elea"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 9
		}
		if ( filtertype@tcg == 13 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "yerles", "juere", "norland", "zanan", "catsister", "quickling", "machine", "vehicle"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 9
		}
		if ( filtertype@tcg == 14 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "undeadgod", "machinegod", "catgod", "doggod", "servant", "god"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 7
		}
		if ( filtertype@tcg == 15 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "warrior", "thief", "wizard", "claymore", "priest", "archer", "warmage", "gunner"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 9
		}
		if ( filtertype@tcg == 16 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "predator", "farmer", "pianist", "tourist", "classless", "male", "female", "random", "other"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 10
		}
	}
	*select_deck_loop
	dlistmax@tcg = 0
	dsc@tcg = 0
	repeat maxcard@tcg
		if ( deckmode@tcg != 3 & card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_DECK ) {
			continue
		}
		if ( deckmode@tcg == 3 & card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_GRAVEYARD ) {
			continue
		}
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != cp@tcg ) {
			continue
		}
		if ( cflist@tcg(ccf@tcg) == 1 ) {
			if ( deck(card@tcg(TCG_CARD_REF_DBID, cnt)) == 0 ) {
				continue
			}
		}
		if ( cflist@tcg(ccf@tcg) >= 2 ) {
			if ( filtertype@tcg == 0 ) {
				if ( cflist@tcg(ccf@tcg) <= 8 ) {
					if ( limit((card@tcg(TCG_CARD_REF_DBID, cnt) - 1) / 150, 0, 6)  != cflist@tcg(ccf@tcg) - 2 ) {
						continue
					}
				}
			}
			if ( filtertype@tcg == 1 ) {
				if ( cflist@tcg(ccf@tcg) <= 9 ) {
					if ( card@tcg(TCG_CARD_REF_DOMAIN, cnt) != cflist@tcg(ccf@tcg) - 2 ) {
						continue
					}
				}
			}
			if ( filtertype@tcg == 2 ) {
				if ( cflist@tcg(ccf@tcg) <= 9 ) {
					if ( card@tcg(TCG_CARD_REF_COST, cnt) != cflist@tcg(ccf@tcg) - 2 ) {
						continue
					}
				}
				if ( cflist@tcg(ccf@tcg) == 10 ) {
					if ( card@tcg(TCG_CARD_REF_COST, cnt) < cflist@tcg(ccf@tcg) - 2 ) {
						continue
					}
				}
			}
			if ( filtertype@tcg == 3 ) {
				if ( cflist@tcg(ccf@tcg) == 2 ) {
					if ( card@tcg(TCG_CARD_REF_ATTACK, cnt) > 1 ) {
						continue
					}
				}
				if ( cflist@tcg(ccf@tcg) <= 9 & cflist@tcg(ccf@tcg) >= 3 ) {
					if ( card@tcg(TCG_CARD_REF_ATTACK, cnt) != cflist@tcg(ccf@tcg) - 1 ) {
						continue
					}
				}
				if ( cflist@tcg(ccf@tcg) == 10 ) {
					if ( card@tcg(TCG_CARD_REF_ATTACK, cnt) < cflist@tcg(ccf@tcg) - 1 ) {
						continue
					}
				}
			}
			if ( filtertype@tcg == 4 ) {
				if ( cflist@tcg(ccf@tcg) == 2 ) {
					if ( card@tcg(TCG_CARD_REF_HP, cnt) > 1 ) {
						continue
					}
				}
				if ( cflist@tcg(ccf@tcg) <= 9 & cflist@tcg(ccf@tcg) >= 3 ) {
					if ( card@tcg(TCG_CARD_REF_HP, cnt) != cflist@tcg(ccf@tcg) - 1 ) {
						continue
					}
				}
				if ( cflist@tcg(ccf@tcg) == 10 ) {
					if ( card@tcg(TCG_CARD_REF_HP, cnt) < cflist@tcg(ccf@tcg) - 1 ) {
						continue
					}
				}
			}
			if ( filtertype@tcg == 5 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "seamonster" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "frog" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "snail" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "shell" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "spirit" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "slime" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "bird" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 9 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "mushroom" ) { continue }
			}
			if ( filtertype@tcg == 6 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "wisp" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "bacteria" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "wasp" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "rabbit" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "dinosaur" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "largeanimal" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "mandrake" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 9 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "horse" ) { continue }
			}
			if ( filtertype@tcg == 7 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "beast" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "bear" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "ent" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "sheep" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "dog" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "fairy" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "beetle" ) { continue }
			}
			if ( filtertype@tcg == 8 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "minotaur" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "lizardman" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "orc" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "goblin" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "kobolt" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "yeek" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "medusa" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 9 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "harpy" ) { continue }
			}
			if ( filtertype@tcg == 9 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "snake" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "rat" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "mutant" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "mazin" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "imp" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "hand" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "yith" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 9 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "giant" ) { continue }
			}
			if ( filtertype@tcg == 10 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "drake" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "eye" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "asura" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "rock" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "dragon" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "golem" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "metal" ) { continue }
			}
			if ( filtertype@tcg == 11 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "zombie" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "ghost" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "piece" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "armor" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "lich" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "skeleton" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "bat" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 9 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "cat" ) { continue }
			}
			if ( filtertype@tcg == 12 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "spider" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "worm" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "cupid" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "eulderna" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "roran" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "karune" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "dwarf" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 9 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "elea" ) { continue }
			}
			if ( filtertype@tcg == 13 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "yerles" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "juere" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "norland" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "zanan" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "catsister" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "quickling" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "machine" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 9 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "vehicle" ) { continue }
			}
			if ( filtertype@tcg == 14 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "undeadgod" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "machinegod" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "catgod" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "doggod" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "servant" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "god" ) { continue }
			}
			if ( filtertype@tcg == 15 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_CLASS, cnt) != "warrior" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_CLASS, cnt) != "thief" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_CLASS, cnt) != "wizard" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_CLASS, cnt) != "claymore" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_CLASS, cnt) != "priest" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_CLASS, cnt) != "archer" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_CLASS, cnt) != "warmage" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 9 & cardn@tcg(TCG_CARDN_REF_CLASS, cnt) != "gunner" ) { continue }
			}
			if ( filtertype@tcg == 16 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_CLASS, cnt) != "predator" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_CLASS, cnt) != "farmer" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_CLASS, cnt) != "pianist" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_CLASS, cnt) != "tourist" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_CLASS, cnt) != "" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_SEX, cnt) != "male" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_SEX, cnt) != "female" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 9 & cardn@tcg(TCG_CARDN_REF_SEX, cnt) != "random" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 10 & cardn@tcg(TCG_CARDN_REF_SEX, cnt) != "" ) { continue }
			}
		}
		cnt2@tcg = cnt
		if ( deckmode@tcg == 1 ) {
			if ( cardn@tcg(TCG_CARDN_REF_RACE, cnt2@tcg) != deckrefn@tcg ) {
				continue
			}
		}
		if ( deckmode@tcg > 0 ) {
			if ( target_num@tcg <= 0 ) { continue }
			f@tcg = 0
			repeat target_num@tcg
				if ( target@tcg(cnt) == cnt2@tcg ) { 
					f@tcg = 1
				}
			loop
			if ( f@tcg == 0 ) {
				continue
			}
		}
		if ( deckmode@tcg > 0 ) {
			f@tcg = 0
			repeat dlistmax@tcg
				c@tcg = dlist@tcg(0, cnt)
				if ( card@tcg(TCG_CARD_REF_DBID, c@tcg) == card@tcg(TCG_CARD_REF_DBID, cnt2@tcg) ) {
					f@tcg = 1
					break
				}
			loop
			if ( f@tcg ) {
				continue
			}
		}
		cdbitmod TCG_BIT_FACE_UP, cnt2@tcg, 1
		dlist@tcg(0, dlistmax@tcg) = cnt2@tcg
		dlistmax@tcg++
	loop
	repeat
		f@tcg = 0
		if ( dlistmax@tcg == 0 ) {
			break
		}
		repeat dlistmax@tcg - 1
			p@tcg = card@tcg(TCG_CARD_REF_DBID, dlist@tcg(0, cnt)), card@tcg(TCG_CARD_REF_DBID, dlist@tcg(0, cnt + 1))
			if ( sortmode@tcg == 1 ) {
				p@tcg = card@tcg(TCG_CARD_REF_DOMAIN, dlist@tcg(0, cnt)), card@tcg(TCG_CARD_REF_DOMAIN, dlist@tcg(0, cnt + 1))
			}
			if ( sortmode@tcg == 2 ) {
				p@tcg = card@tcg(TCG_CARD_REF_COST, dlist@tcg(0, cnt)), card@tcg(TCG_CARD_REF_COST, dlist@tcg(0, cnt + 1))
			}
			if ( sortmode@tcg == 3 ) {
				p@tcg = card@tcg(TCG_CARD_REF_ATTACK, dlist@tcg(0, cnt)), card@tcg(TCG_CARD_REF_ATTACK, dlist@tcg(0, cnt + 1))
			}
			if ( sortmode@tcg == 4 ) {
				p@tcg = card@tcg(TCG_CARD_REF_HP, dlist@tcg(0, cnt)), card@tcg(TCG_CARD_REF_HP, dlist@tcg(0, cnt + 1))
			}
			if ( p@tcg > p@tcg(1) ) {
				f@tcg = 1
				p@tcg = dlist@tcg(0, cnt), dlist@tcg(1, cnt)
				dlist@tcg(0, cnt) = dlist@tcg(0, cnt + 1), dlist@tcg(1, cnt + 1)
				dlist@tcg(0, cnt + 1) = p@tcg, p@tcg(1)
			}
		loop
		if ( f@tcg == 0 ) {
			break
		}
	loop
	gosub *select_deck_pos
	*select_deck_loop_WHILE1
	redraw 0
	gosub *tcg_drawInterface
	gosub *tcg_drawDeck
	redraw 1
	await 30
	key_check
	if ( key == key_next ) {
		ccf@tcg++
		snd SOUNDLIST_CURSOR1
		if ( ccf@tcg >= cfmax@tcg ) {
			ccf@tcg = 0
		}
		goto *select_deck_loop
	}
	if ( key == key_fire | key == key_get ) {
		if ( key == key_fire ) { filtertype@tcg-- }
		if ( key == key_get ) { filtertype@tcg++ }
		if ( filtertype@tcg > 16 ) {
			filtertype@tcg = 0
		}
		if ( filtertype@tcg < 0 ) {
			filtertype@tcg = 16
		}
		goto *select_deck
	}
	if ( key == key_msglog ) {
		promptAdd lang("降参する", "Reset Your Deck"), "a"
		promptAdd lang("降参する", "Cancel"), "b"
		val = basex@tcg + 420, basey@tcg + 230, 200, 1
		gosub *prompt_key@
		if ( rtval == 0 ) {
			repeat MAX_CARD
				deck(cnt) = 0
			loop
			calcdecksize
			goto *select_deck
		}
	}
	if ( key == key_charainfo ) {
		displayinfo@tcg = limit(1 - displayinfo@tcg, 0, 1)
		if ( cardmode@tcg == 1 ) {
			i@tcg = 0
			repeat MAX_CARD
				if ( card(0, cnt) == 0 ) {
					continue
				}
				create_card i@tcg, cnt
				card@tcg(TCG_CARD_LOCATION, i@tcg) = TCG_LOCATION_DECK, 0
				cdbitmod TCG_BIT_FACE_UP, i@tcg, 1
				i@tcg++
			loop
		}
	}
	if ( key == key_search ) {
		sortmode@tcg++
		if ( sortmode@tcg > 4 ) {
			sortmode@tcg = 0
		}
		if ( sortmode@tcg < 0 ) {
			sortmode@tcg = 4
		}
		goto *select_deck
	}
	if ( key == key_prev ) {
		ccf@tcg--
		snd SOUNDLIST_CURSOR1
		if ( ccf@tcg < 0 ) {
			ccf@tcg = cfmax@tcg - 1
		}
		goto *select_deck_loop
	}
	if ( key == key_west ) {
		dsc@tcg--
		snd SOUNDLIST_CURSOR1
	}
	if ( key == key_east ) {
		dsc@tcg++
		snd SOUNDLIST_CURSOR1
	}
	if ( key == key_south ) {
		dsc@tcg += 8
		snd SOUNDLIST_CURSOR1
	}
	if ( key == key_north ) {
		dsc@tcg -= 8
		snd SOUNDLIST_CURSOR1
	}
	gosub *select_deck_pos
	if ( key == key_enter ) {
		if ( dlistmax@tcg == 0 ) {
			goto *select_deck_loop_WHILE1_CONTINUE
		}
		if ( deckmode@tcg == 0 ) {
			*select_deck_loop_WHILE2
			redraw 0
			calcdecksize
			gosub *tcg_drawInterface
			gosub *tcg_drawDeck
			act@tcg = 0, 0, 0
			cc@tcg = dlist@tcg(0, dsc@tcg)
			if ( deck(card@tcg(TCG_CARD_REF_DBID, cc@tcg)) < card(0, card@tcg(TCG_CARD_REF_DBID, cc@tcg)) ) {
				act@tcg(0) = 1
			}
			if ( deck(card@tcg(TCG_CARD_REF_DBID, cc@tcg)) != 0 ) {
				act@tcg(1) = 1
			}
			if ( act@tcg(0) == 0 ) {
				if ( act@tcg(1) == 0 ) {
					snd SOUNDLIST_FAIL1
					goto *select_deck_loop_WEND2
				}
			}
			gosub *select_action
			if ( f@tcg == 0 ) {
				if ( act@tcg(0) ) {
					if ( deck(card@tcg(TCG_CARD_REF_DBID, cc@tcg)) >= 1 & card@tcg(TCG_CARD_REF_DOMAIN, cc@tcg) == 5 ) {
						cardhelp lang("デッキに同じ伝説のカードを1枚しか入れることができない。", "You can only put 1 copy of the same Legendary Card in your deck."), 40
						deck(card@tcg(TCG_CARD_REF_DBID, cc@tcg)) = 1
						snd SOUNDLIST_FAIL1
						goto *select_deck_loop_WEND2
					}
					if ( deck(card@tcg(TCG_CARD_REF_DBID, cc@tcg)) >= 2 & card@tcg(TCG_CARD_REF_DOMAIN, cc@tcg) == 4 & card@tcg(TCG_CARD_EFFECT, cc@tcg) != TCG_EFF_NOVICE ) {
						cardhelp lang("デッキに同じ中立のカードを1枚しか入れることができない。", "You can only put 2 copy of the same Neutral Card in your deck."), 40
						deck(card@tcg(TCG_CARD_REF_DBID, cc@tcg)) = 2
						snd SOUNDLIST_FAIL1
						goto *select_deck_loop_WEND2
					}
					if ( deck(card@tcg(TCG_CARD_REF_DBID, cc@tcg)) >= 4 & card@tcg(TCG_CARD_EFFECT, cc@tcg) != TCG_EFF_NOLIMIT & card@tcg(TCG_CARD_EFFECT, cc@tcg) != TCG_EFF_NOVICE ) {
						cardhelp lang("デッキに同じカードを4枚しか入れることができない。", "You can only put 4 copy of the same Card in your deck."), 40
						deck(card@tcg(TCG_CARD_REF_DBID, cc@tcg)) = 4
						snd SOUNDLIST_FAIL1
						goto *select_deck_loop_WEND2
					}
					deck(card@tcg(TCG_CARD_REF_DBID, cc@tcg))++
					snd SOUNDLIST_CARD1
					goto *select_deck_loop_WHILE2_CONTINUE
				}
			}
			if ( f@tcg == 1 ) {
				if ( act@tcg(1) ) {
					deck(card@tcg(TCG_CARD_REF_DBID, cc@tcg))--
					snd SOUNDLIST_CARD1
					goto *select_deck_loop_WHILE2_CONTINUE
				}
			}
			goto *select_deck_loop_WEND2
			*select_deck_loop_WHILE2_CONTINUE
			goto *select_deck_loop_WHILE2
			*select_deck_loop_WEND2
			calcdecksize
			goto *select_deck_loop_WHILE1_CONTINUE
		}
		if ( deckmode@tcg > 0 ) {
			redraw 0
			gosub *tcg_drawInterface
			gosub *refresh_bg
			tcgdraw
			redraw 1
			rtval@tcg = dlist@tcg(0, dsc@tcg)
			return rtval@tcg
		}
		rtval@tcg = dlist@tcg(0, dsc@tcg)
		rtval@tcg = 1
		goto *select_deck_loop_WEND1
	}
	if ( key == key_cancel ) {
		if ( deckmode@tcg == 0 ) {
			promptAdd lang("セーブして終了", "Save & Exit")
			promptAdd lang("セーブしないで終了", "Just Exit")
			val = basex@tcg + 420, basey@tcg + 230, 240, 1
			gosub *prompt_key@
			if ( rtval == 0 ) {
				file = "" + exedir + "tmp\\deck_" + curdeck + ".s2"
				fmode = 23
				gosub *game_ctrlFile@
			}
			else {
				gdata(GDATA_DECK_SIZE + curdeck) = decksizebk@tcg
			}
			if ( rtval == (-1) ) {
				calcdecksize
				goto *select_deck_loop_WHILE1_CONTINUE
			}
		}
		if ( deckmode@tcg > 0 ) {
			redraw 0
			gosub *tcg_drawInterface
			gosub *refresh_bg
			tcgdraw
			redraw 1
			rtval@tcg = (-1)
			return rtval@tcg
		}
		rtval@tcg = 0
		goto *select_deck_loop_WEND1
	}
	*select_deck_loop_WHILE1_CONTINUE
	goto *select_deck_loop_WHILE1
	*select_deck_loop_WEND1
	gsel 4
	pos 0, 0
	picload exedir + "graphic\\bg_card.bmp", 1
	gosub *tcg_initBg
	return rtval@tcg

*card_player
	displayinfo@tcg = 1
	if ( selectmode@tcg == 0 ) {
		cs@tcg = -1
		csline@tcg = 0 + 3 * (player@tcg == 1)
	}
	if ( selectmode@tcg == 1 ) {
		if ( cs@tcg == (-1) ) {
			csline@tcg = 0 + 3 * (player@tcg == 1)
		}
		else {
			csline@tcg = 1 + (player@tcg == 1)
		}
	}
	*card_player_WHILE1
	gosub *card_resolve_ongoing
	tcgdraw
	cursor@tcg = 1
	await 15
	stick a@tcg
	key_check
	if ( gameresult@tcg > 0 ) {
		return
	}
	if ( selectmode@tcg == 2 ) {
		csfix
		if ( cs@tcg < 0 ) {
			cardhelp lang("ランダムに選ぶ。", "Choose Randomly.")
		}
		if ( targetlinenum@tcg <= 0 ) {
			rtval@tcg = (-1)
			return
		}
	}
	if ( key == key_east ) {
		cs@tcg++
		snd SOUNDLIST_CURSOR1
		if ( cs@tcg == 0 ) {
			if ( clistmax@tcg(csline@tcg) == 0 ) {
				cslineup
			}
		}
		csfix
	}
	if ( key == key_west ) {
		cs@tcg--
		snd SOUNDLIST_CURSOR1
		if ( cs@tcg == (-1) ) {
			if ( csline@tcg != 0 ) {
				cs@tcg = clistmax@tcg(csline@tcg) - 1
			}
		}
		if ( cs@tcg == (-2) ) {
			if ( clistmax@tcg(csline@tcg) == 0 ) {
				cslinedown
			}
		}
		csfix
	}
	if ( key == key_north ) {
		cslineup
		snd SOUNDLIST_CURSOR1
		csfix
	}
	if ( key == key_south ) {
		cslinedown
		snd SOUNDLIST_CURSOR1
		csfix
	}
	if ( key == key_enter ) {
		if ( cs@tcg == (-1) ) {
			goto *card_player_WEND1
		}
		act@tcg = 0, 0, 0
		s@tcg = ""
		cc@tcg = clist@tcg(cs@tcg, csline@tcg)
		if ( selectmode@tcg == 2 ) {
			rtval@tcg = cc@tcg
			return
		}
		if ( (csline@tcg == 0 & player@tcg == 0) | (csline@tcg == 3 & (debug == 1 | player@tcg = 1)) ) {
			if ( card@tcg(TCG_CARD_COST, cc@tcg) <= cpdata@tcg(TCG_PLAYER_MANA, cp@tcg) ) {
				if ( card@tcg(TCG_CARD_REF_TYPE, cc@tcg) == TCG_TYPE_SPELL | selectmode@tcg == 0 ) {
					act@tcg(0) = 1
					s@tcg += lang("↑   カードを出す。\n", "UP: Put the card.\n")
				}
			}
			if ( sac@tcg == 0 ) {
				if ( selectmode@tcg == 0 ) {
					act@tcg(1) = 1
					s@tcg += lang("↓   カードを捧げてマナを得る(1ターンに1回)。\n", "Down: Sacrifice the card.\n")
				}
			}
		}
		if ( (csline@tcg == 1 & player@tcg == 0) | (csline@tcg == 2 & (debug == 1 | player@tcg = 1)) ) {
			if ( selectmode@tcg == 0 ) {
				if ( card@tcg(TCG_CARD_STATUS, cc@tcg) != TCG_ACTION_ATTACKING ) {
					if ( cardcandeclareattack(cc@tcg) ) {
						act@tcg(0) = 1
						s@tcg += lang("↑   攻撃を宣言する。\n", "UP: Declare an attack.\n")
					}
				}
			}
			if ( selectmode@tcg == 1 ) {
				if ( cardcanblock(cc@tcg, attackingcard@tcg) ) {
					act@tcg(0) = 1
					s@tcg += lang("↑   ブロックする。\n", "UP: Block.\n")
				}
			}
			if ( cardcanuseskill(cc@tcg) ) {
				act@tcg(2) = 1
				s@tcg += lang("決定 スキルを使用する。\n", "ENTER: Use the skill.\n")
			}
		}
		f@tcg = 0
		repeat 3
			if ( act@tcg(cnt) != 0 ) {
				f@tcg = 1
				break
			}
		loop
		if ( f@tcg == 0 ) {
			if ( debug == 0 ) {
				snd SOUNDLIST_FAIL1
				cardhelp lang("可能な行動はない。", "There is no action available."), 40
				goto *card_player_WHILE1_CONTINUE
			}
		}
		snd SOUNDLIST_CLICK1
		cardhelp s@tcg, 10
		tcgdraw
		gosub *select_action
		cc@tcg = clist@tcg(cs@tcg, csline@tcg)
		key = ""
		if ( f@tcg == (-1) ) {
			goto *card_player_WHILE1_CONTINUE
		}
		if ( act@tcg(f@tcg) == 0 ) {
			if ( debug == 0 ) {
				goto *card_player_WHILE1_CONTINUE
			}
		}
		if ( (csline@tcg == 1 & player@tcg == 0) | (csline@tcg == 2 & (debug == 1 | player@tcg = 1)) ) {
			if ( f@tcg == 0 ) {
				if ( selectmode@tcg == 1 ) {
					attacktarget@tcg = cc@tcg
					goto *card_player_WEND1
				}
				cardstack@tcg(TCG_STACK, stack@tcg) = cc@tcg, TCG_ACTION_ATTACKING, cp@tcg
				stack@tcg++
				actionproc
				if ( gameover() ) {
					goto *card_player_WEND1
				}
				if ( cs@tcg >= clistmax@tcg(csline@tcg) ) {
					cs@tcg = clistmax@tcg(csline@tcg) - 1
				}
				csfix
				goto *card_player_WHILE1_CONTINUE
			}
			if ( f@tcg == 1 ) {
				card@tcg(TCG_CARD_STATUS, cc@tcg) = TCG_ACTION_NONE
			}
			if ( f@tcg == 2 ) {
				cardstack@tcg(TCG_STACK, stack@tcg) = cc@tcg, TCG_ACTION_INVOKING, cp@tcg
				stack@tcg++
				if ( chainmode@tcg ) {
					chaincontinue@tcg = 1
					spellused@tcg = 1
					goto *card_player_WEND1
				}
				actionproc
				if ( gameover() ) {
					goto *card_player_WEND1
				}
			}
			if ( cs@tcg >= clistmax@tcg(csline@tcg) ) {
				cs@tcg = clistmax@tcg(csline@tcg) - 1
			}
			csfix
			goto *card_player_WHILE1_CONTINUE
		}
		if ( f@tcg == 1 ) {
			cursor@tcg = 0
			saccard cc@tcg, cp@tcg - (player@tcg == 1) + (csline@tcg == 3)
			if ( cs@tcg >= clistmax@tcg(csline@tcg) ) {
				cs@tcg = clistmax@tcg(csline@tcg) - 1
			}
			csfix
			goto *card_player_WHILE1_CONTINUE
		}
		if ( f@tcg == 0 ) {
			cursor@tcg = 0
			putcard cc@tcg, cp@tcg - (player@tcg == 1) + (csline@tcg == 3)
			if ( gameover() ) {
				goto *card_player_WEND1
			}
			if ( card@tcg(TCG_CARD_REF_TYPE, cc@tcg) == TCG_TYPE_SPELL ) {
				cardstack@tcg(TCG_STACK, stack@tcg) = cc@tcg, TCG_ACTION_INVOKING, cp@tcg
				stack@tcg++
				if ( chainmode@tcg ) {
					chaincontinue@tcg = 1
					spellused@tcg = 1
					goto *card_player_WEND1
				}
				actionproc
			}
			if ( gameover() ) {
				goto *card_player_WEND1
			}
		}
		if ( cs@tcg >= clistmax@tcg(csline@tcg) ) {
			cs@tcg = clistmax@tcg(csline@tcg) - 1
		}
		csfix
	}
	if ( key == key_cancel ) {
		if ( selectmode@tcg == 2 ) {
			rtval@tcg = (-1)
			return
		}
		goto *card_player_WEND1
	}
	if ( key == "s"  | key_escape ) {
		promptAdd lang("降参する", "Surrender"), "a"
		promptAdd lang("降参する", "No"), "b"
		val = basex@tcg + 420, basey@tcg + 230, 200, 1
		gosub *prompt_key@
		if ( rtval == 0 ) {
			cpdata@tcg(TCG_PLAYER_LIFE, 0) = 0
			gameresult@tcg = -1
			cursor@tcg = 0
			return
		}
	}
	if ( debug ) {
		getkey a@tcg, 112
		if ( a@tcg ) {
			repeat 5
				getrandomcard cp@tcg
			loop
		}
		getkey a@tcg, 113
		if ( a@tcg ) {
			deckmode@tcg = 0
			deckrefn@tcg = "slime"
			gosub *select_deck
		}
	}
	*card_player_WHILE1_CONTINUE
	goto *card_player_WHILE1
	*card_player_WEND1
	cursor@tcg = 0
	return

*select_action
	redraw 0
	p@tcg = 0
	i@tcg = 0
	f@tcg = 1
	*select_action_WHILE1
	p@tcg++
	i@tcg += f@tcg
	if ( i@tcg > 30 ) {
		f@tcg = -1
	}
	else {
		if ( i@tcg < 0 ) {
			f@tcg = 1
		}
	}
	repeat 3
		x@tcg(cnt) = card@tcg(TCG_CARD_X, cc@tcg) + 20
		if ( cnt == 0 ) {
			y@tcg(cnt) = card@tcg(TCG_CARD_Y, cc@tcg) - limit(p@tcg * 3, 0, 16)
		}
		if ( cnt == 1 ) {
			y@tcg(cnt) = card@tcg(TCG_CARD_Y, cc@tcg) + 60 + limit(p@tcg * 3, 0, 16)
		}
		if ( cnt == 2 ) {
			y@tcg(cnt) = card@tcg(TCG_CARD_Y, cc@tcg) + 30
		}
		gmode 0
		gsel 7
		pos cnt * 48, 264
		gcopy 0, x@tcg(cnt), y@tcg(cnt), 36, 36
		gsel 0
		if ( act@tcg(cnt) == 0 ) {
			continue
		}
		color 0, 0, 0
		gmode 4, 0, 0, limit(p@tcg * 30 + 20, 0, 255)
		pos x@tcg(cnt), y@tcg(cnt)
		gcopy 7, 192, 96, 36, 36
		gmode 4, 0, 0, 50 + i@tcg * 2
		pos x@tcg(cnt) + 13, y@tcg(cnt) + 11
		gcopy 7, 336 + (cnt == 2) * 12, 96 + cnt \ 2 * 24, 12, 12
	loop
	redraw 1
	redraw 0
	gmode 0
	repeat 3
		if ( act@tcg(cnt) == 0 ) {
			continue
		}
		pos x@tcg(cnt), y@tcg(cnt)
		gcopy 7, cnt * 48, 264, 36, 36
	loop
	await 15
	key_check
	if ( key == key_north ) {
		f@tcg = 0
		goto *select_action_WEND1
	}
	if ( key == key_south ) {
		f@tcg = 1
		goto *select_action_WEND1
	}
	if ( key == key_enter ) {
		f@tcg = 2
		goto *select_action_WEND1
	}
	if ( key != "" ) {
		f@tcg = -1
		goto *select_action_WEND1
	}
	goto *select_action_WHILE1
	*select_action_WEND1
	return