#include "db_card.hsp"

#defcfunc cdbit int cdbit_bit, int cdbit_charid
	if ( cdbit_charid < 0 | cdbit_charid >= maxcard@tcg ) {
		return
	}
	HMMBITCHECK@ card@tcg(30 + cdbit_bit / 32, cdbit_charid), cdbit_bit \ 32
	return abs(stat)

#deffunc cdbitmod int cdbitmod_bit, int cdbitmod_charid, int cdbitmod_seton
	if ( cdbitmod_charid < 0 | cdbitmod_charid >= maxcard@tcg ) {
		return
	}
	if ( cdbitmod_seton == 0 ) {
		HMMBITOFF@ card@tcg(30 + cdbitmod_bit / 32, cdbitmod_charid), cdbitmod_bit \ 32
		return
	}
	HMMBITON@ card@tcg(30 + cdbitmod_bit / 32, cdbitmod_charid), cdbitmod_bit \ 32
	return

#deffunc cpflip
	if ( cp@tcg == TCG_CONTROLLER_OPPONENT ) {
		cp@tcg = TCG_CONTROLLER_PLAYER
		tp@tcg = TCG_CONTROLLER_OPPONENT
		cl@tcg = TCG_LANE_PLAYER_FIELD
		tl@tcg = TCG_LANE_OPPONENT_HAND
		ch@tcg = TCG_LANE_PLAYER_HAND
		th@tcg = TCG_LANE_OPPONENT_HAND
	}
	else {
		cp@tcg = TCG_CONTROLLER_OPPONENT
		tp@tcg = TCG_CONTROLLER_PLAYER
		cl@tcg = TCG_LANE_OPPONENT_FIELD
		tl@tcg = TCG_LANE_PLAYER_FIELD
		ch@tcg = TCG_LANE_OPPONENT_HAND
		th@tcg = TCG_LANE_PLAYER_HAND
	}
	return

#deffunc cpisplayer
	if ( player@tcg == TCG_CONTROLLER_PLAYER ) {
		cp@tcg = TCG_CONTROLLER_PLAYER
		tp@tcg = TCG_CONTROLLER_OPPONENT
		cl@tcg = TCG_LANE_PLAYER_FIELD
		tl@tcg = TCG_LANE_OPPONENT_HAND
		ch@tcg = TCG_LANE_PLAYER_HAND
		th@tcg = TCG_LANE_OPPONENT_HAND
	}
	else {
		cp@tcg = TCG_CONTROLLER_OPPONENT
		tp@tcg = TCG_CONTROLLER_PLAYER
		cl@tcg = TCG_LANE_OPPONENT_FIELD
		tl@tcg = TCG_LANE_PLAYER_FIELD
		ch@tcg = TCG_LANE_OPPONENT_HAND
		th@tcg = TCG_LANE_PLAYER_HAND
	}
	return

#deffunc cpisme
	if ( ct@tcg == TCG_CONTROLLER_PLAYER ) {
		cp@tcg = TCG_CONTROLLER_PLAYER
		tp@tcg = TCG_CONTROLLER_OPPONENT
		cl@tcg = TCG_LANE_PLAYER_FIELD
		tl@tcg = TCG_LANE_OPPONENT_HAND
		ch@tcg = TCG_LANE_PLAYER_HAND
		th@tcg = TCG_LANE_OPPONENT_HAND
	}
	else {
		cp@tcg = TCG_CONTROLLER_OPPONENT
		tp@tcg = TCG_CONTROLLER_PLAYER
		cl@tcg = TCG_LANE_OPPONENT_FIELD
		tl@tcg = TCG_LANE_PLAYER_FIELD
		ch@tcg = TCG_LANE_OPPONENT_HAND
		th@tcg = TCG_LANE_PLAYER_HAND
	}
	return

#deffunc cpisenemy
	if ( ct@tcg == TCG_CONTROLLER_PLAYER ) {
		cp@tcg = TCG_CONTROLLER_OPPONENT
		tp@tcg = TCG_CONTROLLER_PLAYER
		cl@tcg = TCG_LANE_OPPONENT_FIELD
		tl@tcg = TCG_LANE_PLAYER_FIELD
		ch@tcg = TCG_LANE_OPPONENT_HAND
		th@tcg = TCG_LANE_PLAYER_HAND
	}
	else {
		cp@tcg = TCG_CONTROLLER_PLAYER
		tp@tcg = TCG_CONTROLLER_OPPONENT
		cl@tcg = TCG_LANE_PLAYER_FIELD
		tl@tcg = TCG_LANE_OPPONENT_HAND
		ch@tcg = TCG_LANE_PLAYER_HAND
		th@tcg = TCG_LANE_OPPONENT_HAND
	}
	return

#defcfunc cnvrare int cnvrare_arg1
	s@tcg = ""
	repeat limit(5 - cnvrare_arg1 / 20, 1, 5)
		s@tcg += "*"
	loop
	return s@tcg

#deffunc card_ref int card_ref_arg1
	cardrefcost = 0
	cardrefhp = 0
	cardrefattack = 0
	cardrefdomain = 0
	cardrefrare = 100
	dbid = card_ref_arg1
	gosub *db_card@
	gosub *db_card_custom
	if ( cardreftype == 0 ) {
		cardreftype = 10
		cardrefdomain = 7
	}
	rtvaln = cardrefn
	if ( cardreftype == 10 ) {
		cardrefbg = cardrefdomain
		rtvaln += lang("  No.", "  No.") + cardrefno
		rtvaln += lang("  Effect: ", "  Effect: ")
		
		s@tcg = cardrefbits
		csvstr2 s@tcg, s@tcg
		repeat
			if ( s@tcg(cnt) == "" ) {
				break
			}
			p@tcg = int(s@tcg(cnt))
			if ( cnt >= 40 | p@tcg == 0 ) {
				break
			}
			if ( p@tcg == TCG_BIT_REGENERATION ) { rtvaln += "Regeneration "}
			if ( p@tcg == TCG_BIT_ARMOR ) { rtvaln += "Armored "}
			if ( p@tcg == TCG_BIT_FLYING ) { rtvaln += "Flying "}
			if ( p@tcg == TCG_BIT_INTIMIDATE ) { rtvaln += "Intimidate "}
			if ( p@tcg == TCG_BIT_REACH ) { rtvaln += "Reach "}
			if ( p@tcg == TCG_BIT_LIFELINK ) { rtvaln += "Lifelink "}
			if ( p@tcg == TCG_BIT_HASTE ) { rtvaln += "Haste "}
			if ( p@tcg == TCG_BIT_TRAMPLE ) { rtvaln += "Trample "}
			if ( p@tcg == TCG_BIT_FIRST_STRIKE ) { rtvaln += "First Strike "}
			if ( p@tcg == TCG_BIT_DOUBLE_STRIKE ) { rtvaln += "Double Strike "}
			if ( p@tcg == TCG_BIT_DEATHTOUCH ) { rtvaln += "Deathtouch "}
			if ( p@tcg == TCG_BIT_WINDFURY ) { rtvaln += "Windfury "}
			if ( p@tcg == TCG_BIT_WINDFURY_USABLE ) { rtvaln += "Windfury(1) "}
			
			if ( p@tcg == TCG_BIT_SILENCED ) { rtvaln += "Silenced "}
			if ( p@tcg == TCG_BIT_DEFENDER ) { rtvaln += "Defender "}
			if ( p@tcg == TCG_BIT_FROZEN ) { rtvaln += "Frozen "}
		loop
		rtvaln += cardrefskill
	}
	if ( cardreftype == 30 ) {
		cardrefbg = 6
		rtvaln += lang(" <土地>", " <Land>")
	}
	if ( cardreftype == 20 ) {
		cardrefbg = 5
		rtvaln += lang(" <スペル>", " <Spell>")
	}
	rtvaln += lang("  ランク:", "  Rank:") + cardrefcost
	rtvaln += lang("  レア度:", "  Rare:") + cnvrare(cardrefrare)
	s@tcg = ""
	s@tcg += lang("情報: ", "Data: " ) + cardrefdescription
	if ( gdata(GDATA_QUICK_USE) == 1 ) {
		talk_conv s@tcg, 95
	}
	else {
		talk_conv s@tcg, 100
	}
	rtvaln += "\n" + s@tcg
	return dbid

#deffunc dbghit
*dbghit_WHILE1
	await
	stick a@tcg
	if ( a@tcg ) {
		return
	}
	goto *dbghit_WHILE1

*dbghit_WEND1
#deffunc makecardlist
	dim clist@tcg, 10, 7
	dim clistmax@tcg, 7
	repeat 2
		cnt2@tcg = cnt
		lmax@tcg = 0
		if ( cnt == 0 ) {
			p@tcg = 0
		}
		else {
			p@tcg = 3
		}
		repeat maxcard@tcg
			if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != cnt2@tcg ) {
				continue
			}
			if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_HAND ) {
				continue
			}
			clist@tcg(lmax@tcg, p@tcg) = cnt
			lmax@tcg++
		loop
		clist@tcg(lmax@tcg, p@tcg) = -1
		clistmax@tcg(p@tcg) = lmax@tcg
		lmax@tcg = 0
		if ( cnt == 0 ) {
			p@tcg = 1
		}
		else {
			p@tcg = 2
		}
		repeat maxcard@tcg
			if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != cnt2@tcg ) {
				continue
			}
			if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_FIELD ) {
				continue
			}
			clist@tcg(lmax@tcg, p@tcg) = cnt
			lmax@tcg++
		loop
		clist@tcg(lmax@tcg, p@tcg) = -1
		clistmax@tcg(p@tcg) = lmax@tcg
	loop
	repeat 7
		p@tcg = cnt
		repeat
			f@tcg = 0
			repeat clistmax@tcg(p@tcg)
				c1@tcg = clist@tcg(cnt, p@tcg)
				c2@tcg = clist@tcg(cnt + 1, p@tcg)
				if ( c2@tcg == (-1) ) {
					continue
				}
				if ( card@tcg(TCG_CARD_X_MOVETO, c2@tcg) < card@tcg(TCG_CARD_X_MOVETO, c1@tcg) ) {
					i@tcg = clist@tcg(cnt, p@tcg)
					clist@tcg(cnt, p@tcg) = clist@tcg(cnt + 1, p@tcg)
					clist@tcg(cnt + 1, p@tcg) = i@tcg
					f@tcg = 1
					break
				}
			loop
			if ( f@tcg == 0 ) {
				break
			}
		loop
	loop
	gosub *ai_evaluate
	return

#deffunc cardhelp str cardhelp_arg1, int cardhelp_arg2
	if ( helpdur@tcg > 1 ) {
		if ( cardhelp_arg2 == 0 ) {
			helpdur@tcg--
			return
		}
	}
	if ( cardhelp_arg2 == 0 ) {
		dur@tcg = 1
	}
	else {
		dur@tcg = cardhelp_arg2
	}
	helpmsg@tcg = cardhelp_arg1
	helpdur@tcg = dur@tcg
	return

#deffunc tcgdrawcard int tcgdrawcard_arg1, int tcgdrawcard_arg2
	selected@tcg = 0
	if ( tcgdrawcard_arg2 == 0 ) {
		if ( cursor@tcg ) {
			if ( cs@tcg != (-1) ) {
				if ( clist@tcg(cs@tcg, csline@tcg) == tcgdrawcard_arg1 ) {
					selected@tcg = 1
				}
			}
		}
	}
	else {
		if ( tcgdrawcard_arg1 == dlist@tcg(0, dsc@tcg) ) {
			selected@tcg = 1
		}
	}
	if ( selected@tcg ) {
		gmode 2
		pos card@tcg(TCG_CARD_X, tcgdrawcard_arg1) - 5, card@tcg(TCG_CARD_Y, tcgdrawcard_arg1) - 5
		gcopy 7, 168, 144, 82, 106
		if ( debug | cdbit(TCG_BIT_FACE_UP, tcgdrawcard_arg1) == 1 | card@tcg(TCG_CARD_CONTROLLER, tcgdrawcard_arg1) == TCG_CONTROLLER_PLAYER ) {
			cardhelp carddetailn@tcg(tcgdrawcard_arg1)
		}
		else {
			cardhelp ""
		}
	}
	repeat 1 + (selected@tcg == 1)
		x@tcg = card@tcg(TCG_CARD_X, tcgdrawcard_arg1)
		y@tcg = card@tcg(TCG_CARD_Y, tcgdrawcard_arg1)
		if ( cnt == 1 ) {
			if ( card@tcg(TCG_CARD_ANIM, tcgdrawcard_arg1) != TCG_ANIM_NONE ) {
				break
			}
			x@tcg = basex@tcg + 20
			y@tcg = basey@tcg + 490
			gmode 6, , , 140
			pos x@tcg - 6, y@tcg - 6
			gcopy 7, 168, 144, 82, 106
		}
		gmode 2
		if ( card@tcg(TCG_CARD_ANIM, tcgdrawcard_arg1) == TCG_ANIM_FADE ) {
			gmode 4, , , card@tcg(TCG_CARD_ANIM_DURATION, tcgdrawcard_arg1) * 15
		}
		pos x@tcg, y@tcg
		if ( cdbit(TCG_BIT_FACE_UP, tcgdrawcard_arg1) == 1 | (card@tcg(TCG_CARD_CONTROLLER, tcgdrawcard_arg1) == TCG_CONTROLLER_PLAYER & cnt == 1) ) {
			if ( card@tcg(TCG_CARD_REF_PIC, tcgdrawcard_arg1) > 0 ) {
				gcopy 7, 72 + card@tcg(TCG_CARD_REF_BG, tcgdrawcard_arg1) * 72, 0, 72, 96
				if ( cnt == 0 ) {
					if ( cdbit(TCG_BIT_FACE_UP, tcgdrawcard_arg1) ) {
						if ( card@tcg(TCG_CARD_REF_TYPE, tcgdrawcard_arg1) == TCG_TYPE_CREATURE & card@tcg(TCG_CARD_ANIM, tcgdrawcard_arg1) == TCG_ANIM_NONE ) {
							drawnhp@tcg = card@tcg(TCG_CARD_HP, tcgdrawcard_arg1)
							drawnatk@tcg = card@tcg(TCG_CARD_ATTACK, tcgdrawcard_arg1)
							drawncost@tcg = card@tcg(TCG_CARD_COST, tcgdrawcard_arg1)
							if ( tcgdrawcard_arg2 == 1 ) {
								drawnhp@tcg = card@tcg(TCG_CARD_REF_HP, tcgdrawcard_arg1)
								drawnatk@tcg = card@tcg(TCG_CARD_REF_ATTACK, tcgdrawcard_arg1)
								drawncost@tcg = card@tcg(TCG_CARD_REF_COST, tcgdrawcard_arg1)
							}
							gmode 2
							pos x@tcg, y@tcg + 81
							gzoom 21, 15, 7, 0, 96, 35, 25
							pos x@tcg + 12 - 4 * strlen(str(drawnatk@tcg)), y@tcg + 81
							color 0, 0, 0
							bmes "" + drawnatk@tcg, 235, 235, 235
							pos x@tcg + 51, y@tcg + 81
							gzoom 21, 15, 7, 48, 96, 35, 25
							pos x@tcg + 51 + 12 - 4 * strlen(str(drawnhp@tcg)), y@tcg + 81
							color 0, 0, 0
							bmes "" + drawnhp@tcg, 235, 235, 235
							if ( card@tcg(TCG_CARD_LOCATION, tcgdrawcard_arg1) == TCG_LOCATION_HAND | tcgdrawcard_arg2 == 1 ) {
								pos x@tcg, y@tcg
								gzoom 24, 24, 7, 192, 96, 32, 32
								pos x@tcg + 9, y@tcg + 4
								color 0, 0, 0
								bmes "" + drawncost@tcg, 235, 235, 235
							}
						}
					}
				}
				if ( card@tcg(TCG_CARD_REF_DBID, tcgdrawcard_arg1) != 343 ) {
					p@tcg = card@tcg(TCG_CARD_REF_PIC, tcgdrawcard_arg1) \ COLOR_TINT_MULT + card@tcg(TCG_CARD_REF_CHARA_PIC, tcgdrawcard_arg1) * COLOR_TINT_MULT
					chara_preparepic p@tcg, (card@tcg(TCG_CARD_REF_PIC, tcgdrawcard_arg1) - card@tcg(TCG_CARD_REF_CHARA_PIC, tcgdrawcard_arg1) * COLOR_TINT_MULT) / COLOR_TINT_MULT
				}
				else {
					p@tcg = 1
					chara_preparepic p@tcg, 0
				}
				color 0, 0, 0
				pos x@tcg + 13, y@tcg + 32 - chipc(CHIPC_F, p@tcg) + chipc(CHIPC_HEIGHT, p@tcg) / 6
				gcopy 5, 0, 960, chipc(CHIPC_WIDTH, p@tcg), chipc(CHIPC_HEIGHT, p@tcg)
			}
			else {
				gcopy 7, 72 + card@tcg(TCG_CARD_REF_BG, tcgdrawcard_arg1) * 72, 0, 72, 96
				// p@tcg = abs(card@tcg(TCG_CARD_REF_PIC, tcgdrawcard_arg1))
				// pos x@tcg, y@tcg
				// gcopy 2, p@tcg \ 22 * 72, p@tcg / 22 * 96, 72, 96
			}
			color 255, 255, 255
		}
		else {
			gcopy 7, 0, 0, 72, 96
		}
		if ( cnt == 0 ) {
			if ( card@tcg(TCG_CARD_LOCATION, tcgdrawcard_arg1) == TCG_LOCATION_FIELD ) {
				if ( cdbit(TCG_BIT_FACE_UP, tcgdrawcard_arg1) ) {
					if ( card@tcg(TCG_CARD_REF_TYPE, tcgdrawcard_arg1) == TCG_TYPE_CREATURE ) {
						p@tcg = 0
						repeat 32 - 5, 5
							if ( cdbit(cnt, tcgdrawcard_arg1) == 1 ) {
								pos x@tcg, y@tcg + 69 - 13 * p@tcg
								color 0, 0, 0
								if ( cnt == TCG_BIT_REGENERATION ) { 
									bmes "Regeneration", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_ARMOR ) { 
									bmes "Armored", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_FLYING ) { 
									bmes "Flying", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_INTIMIDATE ) { 
									bmes "Intimidate", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_REACH ) { 
									bmes "Reach", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_LIFELINK ) { 
									bmes "Lifelink", 235, 235, 235 
									p@tcg++
								}
								// if ( cnt == TCG_BIT_HASTE ) { bmes "Regeneration", 235, 235, 235 }
								if ( cnt == TCG_BIT_TRAMPLE ) { 
									bmes "Trample", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_FIRST_STRIKE ) { 
									bmes "First Strike", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_DOUBLE_STRIKE ) { 
									bmes "Double Strike", 235, 235, 235
									p@tcg++
								}
								if ( cnt == TCG_BIT_DEATHTOUCH ) { 
									bmes "Deathtouch", 235, 235, 235 
									p@tcg++
								}
								// if ( cnt == TCG_BIT_WINDFURY ) { bmes "Windfury", 235, 235, 235 }
								if ( cnt == TCG_BIT_WINDFURY_USABLE ) { 
									bmes "Windfury", 235, 235, 235 
								}

								if ( cnt == TCG_BIT_SILENCED ) { 
									bmes "Silenced", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_DEFENDER ) { 
									bmes "Defender", 235, 235, 235 
									p@tcg++
								}
								if ( cnt == TCG_BIT_FROZEN ) { 
									bmes "Frozen", 235, 235, 235 
									p@tcg++
								}
							}
						loop
						if ( card@tcg(TCG_CARD_STATUS, tcgdrawcard_arg1) == TCG_ACTION_ATTACKING ) {
							pos x@tcg, y@tcg + 18
							gcopy 7, 288, 120, 24, 24
						}
						if ( card@tcg(TCG_CARD_STATUS, tcgdrawcard_arg1) == TCG_ACTION_DEFENDING ) {
							pos x@tcg, y@tcg + 18
							gcopy 7, 312, 120, 24, 24
						}
						if ( card@tcg(TCG_CARD_STATUS, tcgdrawcard_arg1) == TCG_ACTION_INVOKING ) {
							pos x@tcg, y@tcg + 18
							gcopy 7, 264, 120, 24, 24
						}
						if ( card@tcg(TCG_CARD_STATUS, tcgdrawcard_arg1) == TCG_ACTION_EXHAUSTED ) {
							pos x@tcg, y@tcg + 18
							gcopy 7, 240, 120, 24, 24
						}
					}
				}
			}
		}
	loop
	return

#deffunc tcgdraw
	if ( debug ) {
		title " L:" + looplev + " S:" + sublev
	}
*tcgdraw_WHILE1
	t@tcg++
	redraw 0
	gosub *tcg_drawInterface
	anime@tcg = 0
	font lang(cfg_font1, cfg_font2), 12 + en - en * 2, 0
	color 255, 255, 255
	gmode 2
	repeat 2
		x@tcg = holderix@tcg(cnt) - holderspace@tcg
		y@tcg = holderiy@tcg(cnt)
		pos x@tcg, y@tcg
		gcopy 7, 96, 144, 72, 96
		pos x@tcg + 14, y@tcg + 75
		mes "" + cpdata@tcg(TCG_PLAYER_DECK, cnt) + "/" + cpdata@tcg(TCG_PLAYER_GRAVEYARD, cnt)
	loop
	font lang(cfg_font1, cfg_font2), 13 + en - en * 2, 0
	repeat maxcard@tcg
		c@tcg = maxcard@tcg - cnt - 1
		if ( cc@tcg != 0 ) {
			if ( c@tcg == 0 ) {
				c@tcg = cc@tcg
			}
			else {
				if ( c@tcg == cc@tcg ) {
					c@tcg = 0
				}
			}
		}
		if ( card@tcg(TCG_CARD_LOCATION, c@tcg) <= 0 ) {
			if ( card@tcg(TCG_CARD_ANIM_DURATION, c@tcg) == 0 ) {
				continue
			}
		}
		if ( card@tcg(TCG_CARD_LOCATION, c@tcg) == TCG_LOCATION_EXILE ) {
			continue
		}
		if ( card@tcg(TCG_CARD_X, c@tcg) != card@tcg(TCG_CARD_X_MOVETO, c@tcg) | card@tcg(TCG_CARD_Y, c@tcg) != card@tcg(TCG_CARD_Y_MOVETO, c@tcg) | card@tcg(TCG_CARD_ANIM_DURATION, c@tcg) > 0 ) {
			anime@tcg = 1
			p@tcg = 0
			if ( card@tcg(TCG_CARD_X, c@tcg) != card@tcg(TCG_CARD_X_MOVETO, c@tcg) ) {
				p@tcg = (card@tcg(TCG_CARD_X_MOVETO, c@tcg) - card@tcg(TCG_CARD_X, c@tcg)) / 6
				if ( card@tcg(TCG_CARD_X, c@tcg) > card@tcg(TCG_CARD_X_MOVETO, c@tcg) ) {
					p@tcg--
				}
				else {
					p@tcg++
				}
			}
			card@tcg(TCG_CARD_X, c@tcg) += p@tcg
			p@tcg = 0
			if ( card@tcg(TCG_CARD_Y, c@tcg) != card@tcg(TCG_CARD_Y_MOVETO, c@tcg) ) {
				p@tcg = (card@tcg(TCG_CARD_Y_MOVETO, c@tcg) - card@tcg(TCG_CARD_Y, c@tcg)) / 6
				if ( card@tcg(TCG_CARD_Y, c@tcg) > card@tcg(TCG_CARD_Y_MOVETO, c@tcg) ) {
					p@tcg--
				}
				else {
					p@tcg++
				}
			}
			card@tcg(TCG_CARD_Y, c@tcg) += p@tcg
			if ( card@tcg(TCG_CARD_ANIM_DURATION, c@tcg) > 0 ) {
				card@tcg(TCG_CARD_ANIM_DURATION, c@tcg)--
			}
		}
		tcgdrawcard c@tcg
	loop
	font lang(cfg_font1, cfg_font2), 14 - en * 2, 0
	color 255, 255, 255
	gmode 2
	if ( cursor@tcg ) {
		if ( cs@tcg == (-1) ) {
			if ( phase@tcg == 2 ) {
				if ( selectmode@tcg == 0 ) {
					cardhelp lang("メインフェイズを終了する。", "End your main phase.")
				}
				else {
					cardhelp lang("ブロックしない。", "No blocker.")
				}
			}
			pos holderix@tcg - holderspace@tcg - 5, holderiy@tcg - 5
			gcopy 7, 168, 144, 82, 106
		}
	}
	if ( chaintime@tcg > 0 ) {
		if ( chaintime@tcg == cfg_chaintime ) {
			dim star@tcg, 2, 10
			repeat 10
				star@tcg(0, cnt) = rnd(72) - 32, rnd(40) - 32
			loop
		}
		if ( chaintime@tcg > 5 ) {
			gmode 5, , , limit(chaintime@tcg * 3 - 40, 0, 255)
			color 0, 0, 0
			cnt2@tcg = cnt
			repeat 10
				pos chainx@tcg + star@tcg(0, cnt), chainy@tcg + star@tcg(1, cnt)
				gcopy 7, 64 * limit(17 - chaintime@tcg / 3, 0, 8), 416, 64, 64
				star@tcg(1, cnt) += 2
			loop
		}
		repeat 3
			p@tcg = (t@tcg / 4 + cnt) \ 7
			color p@tcg * 20, 25 + p@tcg * 20, 60 + p@tcg * 20
			boxl chainx@tcg - p@tcg, chainy@tcg - p@tcg, chainx@tcg + 72 + p@tcg, chainy@tcg + 96 + p@tcg
		loop
	}
	repeat efllistmax@tcg
		if ( efllist@tcg(4, cnt) <= 0 ) {
			continue
		}
		efllist@tcg(4, cnt)--
		if ( efllist@tcg(0, cnt) == 1 ) {
			font lang(cfg_font1, cfg_font2), 20 - en * 2, 1
			color 0, 0, 0
			pos efllist@tcg(5, cnt) + 11, efllist@tcg(6, cnt) + efllist@tcg(4, cnt) / 3 + 21
			mes abs(efllist@tcg(1, cnt))
			color 255, 100, 100
			if ( efllist@tcg(1, cnt) > 0 ) {
				color 100, 255, 100
			}
			pos efllist@tcg(5, cnt) + 10, efllist@tcg(6, cnt) + efllist@tcg(4, cnt) / 3 + 20
			mes abs(efllist@tcg(1, cnt))
			font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
			gmode 5, , , (efllist@tcg(4, cnt) - 30) * 8
			color 0, 0, 0
			pos efllist@tcg(5, cnt) - 12, efllist@tcg(6, cnt) + 10
			gcopy 7, 64 * limit(10 - (efllist@tcg(4, cnt) - 30) / 3, 0, 8), 360, 48, 64
		}
		if ( efllist@tcg(0, cnt) == 2 ) {
			font lang(cfg_font1, cfg_font2), 20 - en * 2, 1
			color 0, 0, 0
			pos efllist@tcg(2, cnt) + 31, efllist@tcg(3, cnt) + efllist@tcg(4, cnt) / 3 + 26
			mes abs(efllist@tcg(1, cnt))
			color 100, 100, 255
			pos efllist@tcg(2, cnt) + 30, efllist@tcg(3, cnt) + efllist@tcg(4, cnt) / 3 + 25
			mes abs(efllist@tcg(1, cnt))
			font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
			color 255, 255, 255
			gmode 5, , , (efllist@tcg(4, cnt) - 30) * 8
			color 0, 0, 0
			pos efllist@tcg(5, cnt), efllist@tcg(6, cnt) + 24
			gcopy 7, 64 * limit(10 - (efllist@tcg(4, cnt) - 30) / 3, 0, 8), 416, 64, 64
			pos efllist@tcg(2, cnt), efllist@tcg(3, cnt) + 24
			gcopy 7, 64 * limit(10 - (efllist@tcg(4, cnt) - 30) / 3, 0, 8), 416, 64, 64
		}
	loop
	gmode 2
	if ( screenupdate@tcg == (-1) ) {
		screenupdate@tcg = 0
		goto *tcgdraw_WEND1
	}
	else {
		await 15
		redraw 1
	}
	if ( anime@tcg == 0 ) {
		goto *tcgdraw_WEND1
	}
	goto *tcgdraw_WHILE1
*tcgdraw_WEND1
	return

#deffunc efllistadd int efllistadd_arg1, int efllistadd_arg2, int efllistadd_arg3, int efllistadd_arg4, int efllistadd_arg5, int efllistadd_arg6
	repeat efllistmax@tcg
		if ( efllist@tcg(4, cnt) <= 0 ) {
			efllist@tcg(0, cnt) = efllistadd_arg1
			efllist@tcg(1, cnt) = efllistadd_arg2
			if ( efllistadd_arg1 == 1 ) {
				efllist@tcg(4, cnt) = 60
				efllist@tcg(5, cnt) = efllistadd_arg3 + rnd(30), efllistadd_arg4 + rnd(20)
			}
			if ( efllistadd_arg1 == 2 ) {
				efllist@tcg(4, cnt) = 60
				efllist@tcg(5, cnt) = efllistadd_arg3, efllistadd_arg4
				efllist@tcg(2, cnt) = efllistadd_arg5, efllistadd_arg6
			}
			break
		}
	loop
	return

#deffunc create_card int create_card_arg1, int create_card_arg2
	card_ref create_card_arg2
	card@tcg(TCG_CARD_REF_DBID, create_card_arg1) = stat
	card@tcg(TCG_CARD_REF_TYPE, create_card_arg1) = cardreftype
	cardn@tcg(TCG_CARDN_REF_RACE, create_card_arg1) = cardrefrace
	card@tcg(TCG_CARD_REF_DOMAIN, create_card_arg1) = cardrefdomain
	card@tcg(TCG_CARD_REF_COST, create_card_arg1) = cardrefcost
	card@tcg(TCG_CARD_REF_HP, create_card_arg1) = cardrefhp
	card@tcg(TCG_CARD_REF_ATTACK, create_card_arg1) = cardrefattack
	card@tcg(TCG_CARD_COST, create_card_arg1) = cardrefcost
	card@tcg(TCG_CARD_HP, create_card_arg1) = cardrefhp
	card@tcg(TCG_CARD_ATTACK, create_card_arg1) = cardrefattack
	card@tcg(TCG_CARD_EFFECT, create_card_arg1) = cardrefskillid
	card@tcg(TCG_CARD_REF_SKILL_COST, create_card_arg1) = cardrefskillcost
	cardn@tcg(TCG_CARDN_REF_SKILL, create_card_arg1) = cardrefskill
	card@tcg(TCG_CARD_REF_PIC, create_card_arg1) = cardrefpic
	card@tcg(TCG_CARD_REF_CHARA_PIC, create_card_arg1) = cardrefpicchar
	card@tcg(TCG_CARD_REF_BG, create_card_arg1) = cardrefbg
	carddetailn@tcg(create_card_arg1) = rtvaln
	repeat 32
		cdbitmod cnt, create_card_arg1, 0
	loop
	s@tcg = cardrefbits
	csvstr2 s@tcg, s@tcg
	repeat
		if ( s@tcg(cnt) == "" ) {
			break
		}
		p@tcg = int(s@tcg(cnt))
		if ( cnt >= 40 | p@tcg == 0 ) {
			break
		}
		cdbitmod p@tcg, create_card_arg1, 1
	loop
	return create_card_arg1

#deffunc cardpos int cardpos_arg1, int cardpos_arg2
	if ( cardpos_arg1 == 0 ) {
		l@tcg = TCG_LANE_PLAYER_FIELD
	}
	else {
		l@tcg = TCG_LANE_OPPONENT_FIELD
	}
	p@tcg = -1
	spotlistmax@tcg = clistmax@tcg(l@tcg)
	repeat spotlistmax@tcg
		spotlist@tcg(cnt) = clist@tcg(cnt, l@tcg)
		if ( p@tcg == (-1) ) {
			if ( card@tcg(TCG_CARD_REF_TYPE, clist@tcg(cnt, l@tcg)) != TCG_TYPE_CREATURE ) {
				p@tcg = cnt
			}
		}
	loop
	if ( cardpos_arg2 != (-1) ) {
		if ( p@tcg != (-1) ) {
			repeat spotlistmax@tcg - p@tcg
				spotlist@tcg(spotlistmax@tcg - cnt) = spotlist@tcg(spotlistmax@tcg - cnt - 1)
			loop
			spotlist@tcg(p@tcg) = cardpos_arg2
		}
		else {
			spotlist@tcg(spotlistmax@tcg) = cardpos_arg2
		}
		spotlistmax@tcg++
	}
	x2@tcg = spotspace@tcg
	x@tcg = basex@tcg + 466 - spotlistmax@tcg * x2@tcg / 2
	repeat spotlistmax@tcg
		p@tcg = spotlist@tcg(cnt)
		card@tcg(TCG_CARD_X_MOVETO, p@tcg) = x@tcg + cnt * x2@tcg, spotiy@tcg(cardpos_arg1)
	loop
	return

#deffunc gravecard int gravecard_arg1
	if ( card@tcg(TCG_CARD_LOCATION, gravecard_arg1) == TCG_LOCATION_FIELD ) {
		repeat maxcard@tcg
			if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_FIELD ) {
				continue
			}
			if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != card@tcg(TCG_CARD_CONTROLLER, gravecard_arg1) ) {
				continue
			}
			if ( card@tcg(TCG_CARD_X, cnt) > card@tcg(TCG_CARD_X, gravecard_arg1) ) {
				card@tcg(TCG_CARD_X_MOVETO, cnt) -= spotspace@tcg
			}
		loop
	}
	effflag@tcg = 0
	if ( card@tcg(TCG_CARD_LOCATION, gravecard_arg1) == TCG_LOCATION_FIELD ) {
		effac@tcg = gravecard_arg1
		eff@tcg = card@tcg(TCG_CARD_EFFECT, gravecard_arg1)
		// dialog "" + gravecard_arg1 + "/" + eff@tcg + "/" + effref@tcg(TCG_SKILL_TYPE, eff@tcg)
		if ( effref@tcg(TCG_SKILL_TYPE, eff@tcg) == TCG_SKILL_TYPE_DEATHRATTLE ) {
			effflag@tcg = 1
		}
	}
	card@tcg(TCG_CARD_LOCATION, gravecard_arg1) = TCG_LOCATION_GRAVEYARD
	cpdata@tcg(TCG_PLAYER_GRAVEYARD, card@tcg(TCG_CARD_CONTROLLER, gravecard_arg1))++
	n@tcg = card@tcg(TCG_CARD_CONTROLLER, gravecard_arg1)
	if ( gravesum@tcg(n@tcg) > 2 & FALSE ) {
		repeat 2
			gravelist@tcg(cnt, n@tcg) = gravelist@tcg(cnt + 1, n@tcg)
		loop
		gravelist@tcg(TCG_EVAL_ACTION, n@tcg) = gravecard_arg1
	}
	else {
		gravelist@tcg(gravesum@tcg(n@tcg), n@tcg) = gravecard_arg1
		gravesum@tcg(n@tcg)++
	}
	makecardlist
	cardpos card@tcg(TCG_CARD_CONTROLLER, gravecard_arg1), -1
	if ( effflag@tcg == 1 ) {
		effflag@tcg = 0
		gosub *card_action_choose_target
		makecardlist
		tcgdraw
	}
	gosub *refresh_bg
	return

#deffunc dmgcard int dmgcard_arg1, int dmgcard_arg2
	if ( dmgcard_arg2 > 0 ) {
		snd SOUNDLIST_ATK1
	}
	efllistadd 1, -dmgcard_arg2, card@tcg(TCG_CARD_X, dmgcard_arg1), card@tcg(TCG_CARD_Y, dmgcard_arg1)
	if ( cdbit(TCG_BIT_ARMOR, dmgcard_arg1) & dmgcard_arg2 > 0 ) {
		cdbitmod TCG_BIT_ARMOR, dmgcard_arg1, 0
		return
	}
	card@tcg(TCG_CARD_HP, dmgcard_arg1) -= dmgcard_arg2
	if ( card@tcg(TCG_CARD_HP, dmgcard_arg1) < 0 ) {
		card@tcg(TCG_CARD_HP, dmgcard_arg1) = 0
	}
	if ( card@tcg(TCG_CARD_HP, dmgcard_arg1) <= 0 ) {
		card@tcg(TCG_CARD_ANIM, dmgcard_arg1) = TCG_ANIM_FADE, 18
		tcgdraw
		gravecard dmgcard_arg1
	}
	return

#deffunc dmgplayer int dmgplayer_arg1, int dmgplayer_arg2
	if ( dmgplayer_arg2 > 0 ) {
		snd SOUNDLIST_ATK1
	}
	efllistadd 1, -dmgplayer_arg2, cpx@tcg(dmgplayer_arg1), cpy@tcg(dmgplayer_arg1)
	cpdata@tcg(TCG_PLAYER_LIFE, dmgplayer_arg1) -= dmgplayer_arg2
	if ( cpdata@tcg(TCG_PLAYER_LIFE, dmgplayer_arg1) < 0 ) {
		cpdata@tcg(TCG_PLAYER_LIFE, dmgplayer_arg1) = 0
	}
	return

#deffunc delbottomcard int delbottomcard_arg1
	repeat maxcard@tcg
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != delbottomcard_arg1 ) {
			continue
		}
		if ( card@tcg(TCG_CARD_LOCATION, cnt) == TCG_LOCATION_HAND ) {
			card@tcg(TCG_CARD_X_MOVETO, cnt) -= holderspace@tcg
			if ( card@tcg(TCG_CARD_X_MOVETO, cnt) < holderix@tcg(delbottomcard_arg1) ) {
				card@tcg(TCG_CARD_ANIM, cnt) = TCG_ANIM_FADE, 18
				delcard@tcg = cnt
			}
		}
	loop
	tcgdraw
	gravecard delcard@tcg
	return

#defcfunc gameover
	if ( cpdata@tcg(TCG_PLAYER_LIFE, 1) <= 0 ) {
		return 2
	}
	if ( cpdata@tcg(TCG_PLAYER_LIFE, 0) <= 0 ) {
		return 1
	}
	return 0

#defcfunc getholdersum int getholdersum_arg1
	p@tcg = 0
	repeat maxcard@tcg
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != getholdersum_arg1 ) {
			continue
		}
		if ( card@tcg(TCG_CARD_LOCATION, cnt) == TCG_LOCATION_HAND ) {
			p@tcg++
		}
	loop
	return p@tcg

#defcfunc getspotsum int getspotsum_arg1
	p@tcg = 0
	repeat maxcard@tcg
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != getspotsum_arg1 ) {
			continue
		}
		if ( card@tcg(TCG_CARD_LOCATION, cnt) == TCG_LOCATION_FIELD ) {
			p@tcg++
		}
	loop
	return p@tcg

#defcfunc getdecksum int getdecksum_arg1
	p@tcg = 0
	repeat maxcard@tcg
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != getdecksum_arg1 ) {
			continue
		}
		if ( card@tcg(TCG_CARD_LOCATION, cnt) == TCG_LOCATION_DECK ) {
			p@tcg++
		}
	loop
	return p@tcg

#defcfunc cardcandeclareattack int cardcandeclareattack_arg1
	if ( card@tcg(TCG_CARD_LOCATION, cardcandeclareattack_arg1) != TCG_LOCATION_FIELD ) {
		return 0
	}
	if ( card@tcg(TCG_CARD_REF_TYPE, cardcandeclareattack_arg1) != TCG_TYPE_CREATURE ) {
		return 0
	}
	if ( cdbit(TCG_BIT_FROZEN, cardcandeclareattack_arg1) ) {
		return 0
	}
	if ( cdbit(TCG_BIT_DEFENDER, cardcandeclareattack_arg1) ) {
		return 0
	}
	if ( cdbit(TCG_BIT_EXHAUSTED, cardcandeclareattack_arg1) ) {
		return 0
	}
	return 1

#defcfunc cardcanblock int cardcanblock_arg1, int cardcanblock_arg2
	if ( card@tcg(TCG_CARD_LOCATION, cardcanblock_arg1) != TCG_LOCATION_FIELD ) {
		return 0
	}
	if ( card@tcg(TCG_CARD_REF_TYPE, cardcanblock_arg1) != TCG_TYPE_CREATURE ) {
		return 0
	}
	if ( cdbit(TCG_BIT_FLYING, cardcanblock_arg2) == TRUE & cdbit(TCG_BIT_REACH, cardcanblock_arg1 ) != TRUE ) {
		return 0
	}
	if ( cdbit(TCG_BIT_INTIMIDATE, cardcanblock_arg2) == TRUE & card@tcg(TCG_CARD_REF_DOMAIN, cardcanblock_arg1) != card@tcg(TCG_CARD_REF_DOMAIN, cardcanblock_arg2) ) {
		return 0
	}
	if ( cdbit(TCG_BIT_EXHAUSTED, cardcanblock_arg1) ) {
		if ( card@tcg(TCG_CARD_STATUS, cardcanblock_arg1) != TCG_ACTION_EXHAUSTED ) {
			return 0
		}
	}
	return 1

#defcfunc cardcanuseskill int cardcanuseskill_arg1
	if ( card@tcg(TCG_CARD_LOCATION, cardcanuseskill_arg1) != TCG_LOCATION_FIELD ) {
		return 0
	}
	if ( card@tcg(TCG_CARD_REF_TYPE, cardcanuseskill_arg1) != TCG_TYPE_CREATURE ) {
		return 0
	}
	if ( cdbit(TCG_BIT_EXHAUSTED, cardcanuseskill_arg1) ) {
		return 0
	}
	if ( card@tcg(TCG_CARD_REF_SKILL_COST, cardcanuseskill_arg1) == 0 ) {
		return 0
	}
	if ( card@tcg(TCG_CARD_REF_SKILL_COST, cardcanuseskill_arg1) > cpdata@tcg(TCG_PLAYER_MANA, card@tcg(TCG_CARD_CONTROLLER, cardcanuseskill_arg1)) ) {
		return 0
	}
	return 1

#deffunc getrandomcard int getrandomcard_arg1
	if ( getdecksum(getrandomcard_arg1) == 0 ) {
		cpdata@tcg(TCG_PLAYER_LIFE, getrandomcard_arg1) = 0
		return
	}
	p@tcg = getholdersum(getrandomcard_arg1)
	if ( getholdersum(getrandomcard_arg1) >= 7 ) {
		return
	}
*getrandomcard_WHILE1
	c@tcg = rnd(maxcard@tcg)
	if ( card@tcg(TCG_CARD_LOCATION, c@tcg) == TCG_LOCATION_DECK ) {
		if ( card@tcg(TCG_CARD_CONTROLLER, c@tcg) == getrandomcard_arg1 ) {
			goto *getrandomcard_WEND1
		}
	}
	goto *getrandomcard_WHILE1
*getrandomcard_WEND1
	card@tcg(TCG_CARD_LOCATION, c@tcg) = TCG_LOCATION_HAND, getrandomcard_arg1, deckix@tcg(getrandomcard_arg1), deckiy@tcg(getrandomcard_arg1), holderix@tcg(getrandomcard_arg1) + p@tcg * holderspace@tcg, holderiy@tcg(getrandomcard_arg1), 0, 0
	card@tcg(TCG_CARD_HP, c@tcg) = card@tcg(TCG_CARD_REF_HP, c@tcg)
	card@tcg(TCG_CARD_ATTACK, c@tcg) = card@tcg(TCG_CARD_REF_ATTACK, c@tcg)
	cpdata@tcg(TCG_PLAYER_DECK, getrandomcard_arg1)--
	if ( getrandomcard_arg1 == 0 ) {
		cdbitmod TCG_BIT_FACE_UP, c@tcg, 1
	}
	else {
		cdbitmod TCG_BIT_FACE_UP, c@tcg, 0
	}
	if ( getholdersum(getrandomcard_arg1) > 7 ) {
		delbottomcard getrandomcard_arg1
	}
	makecardlist
	return

#deffunc saccard int saccard_arg1, int saccard_arg2
	snd SOUNDLIST_FEAT
	sac@tcg++
	if ( saccard_arg2 == 0 ) {
		cardhelp lang("カードを捧げた。", "You sacrifice the card."), 40
	}
	else {
		cardhelp lang("相手はカードを捧げた。", "The opponent sacrifices the card."), 40
	}
	repeat maxcard@tcg
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != saccard_arg2 ) {
			continue
		}
		if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_HAND ) {
			continue
		}
		if ( card@tcg(TCG_CARD_X, cnt) <= card@tcg(TCG_CARD_X, saccard_arg1) ) {
			continue
		}
		card@tcg(TCG_CARD_X_MOVETO, cnt) -= holderspace@tcg
	loop
	cpdata@tcg(TCG_PLAYER_MAX_MANA, saccard_arg2)++
	cpdata@tcg(TCG_PLAYER_MANA, saccard_arg2)++
	effac@tcg = saccard_arg1
	eff@tcg = card@tcg(TCG_CARD_EFFECT, saccard_arg1)
	card_ref 10000 + card@tcg(TCG_CARD_REF_DOMAIN, saccard_arg1) * 100 + rnd(2)
	create_card saccard_arg1, stat
	cdbitmod TCG_BIT_FACE_UP, saccard_arg1, 0
	card@tcg(TCG_CARD_X_MOVETO, saccard_arg1) = landix@tcg(saccard_arg2) + landsum@tcg(saccard_arg2) * limit(landspace@tcg - landsum@tcg(saccard_arg2) / 2, 4, landspace@tcg)
	card@tcg(TCG_CARD_Y_MOVETO, saccard_arg1) = landiy@tcg(saccard_arg2)
	landlist@tcg(landsum@tcg(saccard_arg2), saccard_arg2) = saccard_arg1
	landsum@tcg(saccard_arg2)++
	tcgdraw
	makecardlist
	card@tcg(TCG_CARD_LOCATION, saccard_arg1) = TCG_LOCATION_EXILE
	cdbitmod TCG_BIT_FACE_UP, saccard_arg1, 1
	makecardlist
	// dialog "" + saccard_arg1 + "/" + eff@tcg + "/" + effref@tcg(TCG_SKILL_TYPE, eff@tcg)
	if ( effref@tcg(TCG_SKILL_TYPE, eff@tcg) == TCG_SKILL_TYPE_SACRIFICE ) {
		gosub *card_action_choose_target
		makecardlist
		tcgdraw
	}
	gosub *refresh_bg
	efllistadd 2, 1, card@tcg(TCG_CARD_X, saccard_arg1), card@tcg(TCG_CARD_Y, saccard_arg1), cpx@tcg(saccard_arg2), cpy@tcg(saccard_arg2)
	return

#deffunc opencard int opencard_arg1
	snd SOUNDLIST_CARD1
	cdbitmod TCG_BIT_FACE_UP, opencard_arg1, 1
	tcgdraw
	return


#include "tcg_skill.hsp"


#deffunc putcard int putcard_arg1, int putcard_arg2
	if ( getspotsum(putcard_arg2) >= 8 ) {
		if ( putcard_arg2 == player@tcg ) {
			snd SOUNDLIST_FAIL1
			cardhelp lang("これ以上は場に出せない。", "Your field is full."), 40
		}
		return -1
	}
	if ( card@tcg(TCG_CARD_COST, putcard_arg1) > cpdata@tcg(TCG_PLAYER_MANA, putcard_arg2) ) {
		if ( putcard_arg2 == player@tcg ) {
			snd SOUNDLIST_FAIL1
			cardhelp lang("マナが足りない。", "You don't have enough mana."), 40
		}
		if ( debug == 0 ) {
			return -3
		}
	}
	cpdata@tcg(TCG_PLAYER_MANA, putcard_arg2) -= card@tcg(TCG_CARD_COST, putcard_arg1)
	if ( putcard_arg2 == 0 ) {
		card@tcg(TCG_CARD_Y_MOVETO, putcard_arg1) -= 25
	}
	else {
		card@tcg(TCG_CARD_Y_MOVETO, putcard_arg1) += 25
	}
	tcgdraw
	repeat maxcard@tcg
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != putcard_arg2 ) {
			continue
		}
		if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_HAND ) {
			continue
		}
		if ( card@tcg(TCG_CARD_X, cnt) <= card@tcg(TCG_CARD_X, putcard_arg1) ) {
			continue
		}
		card@tcg(TCG_CARD_X_MOVETO, cnt) -= holderspace@tcg
	loop
	if ( card@tcg(TCG_CARD_REF_TYPE, putcard_arg1) == TCG_TYPE_LAND ) {
		cdbitmod TCG_BIT_FACE_UP, putcard_arg1, 1
		card@tcg(TCG_CARD_X_MOVETO, putcard_arg1) = landix@tcg(putcard_arg2) + landsum@tcg(putcard_arg2) * limit(landspace@tcg - landsum@tcg(putcard_arg2) / 2, 4, landspace@tcg)
		card@tcg(TCG_CARD_Y_MOVETO, putcard_arg1) = landiy@tcg(putcard_arg2)
		landlist@tcg(landsum@tcg(putcard_arg2), putcard_arg2) = putcard_arg1
		landsum@tcg(putcard_arg2)++
		tcgdraw
		makecardlist
		card@tcg(TCG_CARD_LOCATION, putcard_arg1) = TCG_LOCATION_EXILE
		makecardlist
		gosub *refresh_bg
		return 1
	}
	p@tcg = getspotsum(putcard_arg2)
	card@tcg(TCG_CARD_LOCATION, putcard_arg1) = TCG_LOCATION_FIELD
	cdbitmod TCG_BIT_FACE_UP, putcard_arg1, 0
	card@tcg(TCG_CARD_TURN_COUNT, putcard_arg1) = 0
	if ( cdbit(TCG_BIT_HASTE, putcard_arg1) != TRUE ) {
		card@tcg(TCG_CARD_STATUS, putcard_arg1) = TCG_ACTION_EXHAUSTED
		cdbitmod TCG_BIT_EXHAUSTED, putcard_arg1, 1
	}
	cdbitmod TCG_BIT_WINDFURY_USABLE, putcard_arg1, 0
	if ( cdbit(TCG_BIT_WINDFURY, putcard_arg1) == TRUE ) {
		cdbitmod TCG_BIT_WINDFURY_USABLE, putcard_arg1, 1
	}
	cardpos putcard_arg2, putcard_arg1
	tcgdraw
	makecardlist
	opencard putcard_arg1
	// dialog "" + putcard_arg1 + "/" + card@tcg(TCG_CARD_EFFECT, putcard_arg1) + "/" + effref@tcg(TCG_SKILL_TYPE, card@tcg(TCG_CARD_EFFECT, putcard_arg1))
	if ( effref@tcg(TCG_SKILL_TYPE, card@tcg(TCG_CARD_EFFECT, putcard_arg1)) == TCG_SKILL_TYPE_BATTLECRY ) {
		effac@tcg = putcard_arg1
		eff@tcg = card@tcg(TCG_CARD_EFFECT, putcard_arg1)
		gosub *card_action_choose_target
		makecardlist
		tcgdraw
	}
	return 1

#deffunc tcgdrawbg
	redraw 0
	x@tcg = 960
	y@tcg = 96
	w@tcg = 128
	h@tcg = 128
	gmode 0
	repeat windowh / h@tcg + 1
		cnt2@tcg = cnt
		repeat windoww / w@tcg + 1
			pos windoww - (cnt + 1) * w@tcg, windowh - (cnt2@tcg + 1) * h@tcg
			gcopy 3, x@tcg, y@tcg, w@tcg, h@tcg
		loop
	loop
	gmode 2
	return

#deffunc tcginit
	turn@tcg = 0
	efllistmax@tcg = 10
	cardmode@tcg = 0
	dim card@tcg, 50, maxcard@tcg
	sdim cardn@tcg, 16, 2, maxcard@tcg
	dim cpdata@tcg, 20, 2
	dim efllist@tcg, 10, efllistmax@tcg
	dim elist@tcg, 10, 8 * 2 + 7
	dim gravesum@tcg, 2
	dim landsum@tcg, 2
	dim landlist@tcg, maxcard@tcg, 2
	dim cardstack@tcg, 10, 100
	dim gravelist@tcg, 50, 2
	sdim carddetailn@tcg, 200, maxcard@tcg
	sdim cardrefn
	sdim helpmsg@tcg
	dim deck, MAX_CARD
	dim deck_opponent, MAX_CARD
	sdim domname@tcg, 20, 10
	domblue = 0
	domgreen = 1
	domwhite = 2
	domblack = 3
	domcolorless = 4
	domlegendary = 5
	domother = 6
	domred = 7
	cddraw2card@tcg = -999999
	cdsummonrace@tcg = -999999
	cdsummon@tcg = -999999
	phasen@tcg = "Begin", "Draw", "Main", "End", ""
	domname@tcg(0) = lang("青", "BLUE")
	domname@tcg(1) = lang("緑", "GREEN")
	domname@tcg(2) = lang("白", "WHITE")
	domname@tcg(3) = lang("黒", "BLACK")
	domname@tcg(4) = lang("人間", "NEUTRAL")
	domname@tcg(5) = lang("伝承", "LEGENDARY")
	domname@tcg(6) = lang("灰", "GRAY")
	domname@tcg(7) = lang("赤", "RED")
	chainx@tcg = 0
	chainy@tcg = 0
	cfg_chaintime = 50
	basew@tcg = 800
	baseh@tcg = 600
	basex@tcg = (windoww - basew@tcg) / 2
	basey@tcg = (windowh - baseh@tcg) / 2
	graveix@tcg = basex@tcg + 682, basex@tcg + 682
	graveiy@tcg = basey@tcg + 315, basey@tcg + 125
	gravespace@tcg = 22
	landix@tcg = basex@tcg + 150, basex@tcg + 150
	landiy@tcg = basey@tcg + 315, basey@tcg + 125
	landspace@tcg = 22
	spotix@tcg = basex@tcg + 138, basex@tcg + 138
	spotiy@tcg = basey@tcg + 290, basey@tcg + 150
	spotspace@tcg = 80
	holderix@tcg = basex@tcg + 222, basex@tcg + 222
	holderiy@tcg = basey@tcg + 420, basey@tcg + 20
	holderspace@tcg = 80
	deckix@tcg = basex@tcg + 800, basex@tcg + 800
	deckiy@tcg = basey@tcg + 420, basey@tcg + 20
	selectmode@tcg = -1
	gsel 3
	pos 960, 96
	picload exedir + "graphic\\deco_card.bmp", 1
	gsel 7
	picload exedir + "graphic\\interface2.bmp"
	gsel 2
	pos 0, 0
	picload exedir + "graphic\\card0.bmp", 1
	gsel 4
	pos 0, 0
	picload exedir + "graphic\\bg_card.bmp", 1
	gosub *tcg_effect_define
	gosub *tcg_initBg
	tcgdrawbg
	return

#defcfunc calcstartcard int calcstartcard_arg1
	return 9 - (cpdata@tcg(TCG_PLAYER_DOMAIN, calcstartcard_arg1) > 2) - (cpdata@tcg(TCG_PLAYER_DOMAIN, calcstartcard_arg1) > 3) - (cpdata@tcg(TCG_PLAYER_DOMAIN, calcstartcard_arg1) > 4) - (cpdata@tcg(TCG_PLAYER_DOMAIN, calcstartcard_arg1) > 5) - (cpdata@tcg(TCG_PLAYER_DOMAIN, calcstartcard_arg1) > 6) - (cpdata@tcg(TCG_PLAYER_DOMAIN, calcstartcard_arg1) > 7) - (cpdata@tcg(TCG_PLAYER_DOMAIN, calcstartcard_arg1) > 8) - (cpdata@tcg(TCG_PLAYER_DOMAIN, calcstartcard_arg1) > 8)

#deffunc calcstartattb int calcstartattb_arg1
	cpdata@tcg(TCG_PLAYER_LIFE, calcstartattb_arg1) = limit(40 - cpdata@tcg(TCG_PLAYER_DOMAIN, calcstartattb_arg1) * 5, 25, 40)
	cpdata@tcg(TCG_PLAYER_MAX_MANA, calcstartattb_arg1) = 0
	return

#deffunc calcdomain
	repeat 2
		dim domain@tcg, 9
		p@tcg = cnt
		cpdata@tcg(TCG_PLAYER_DOMAIN, p@tcg) = 0
		repeat maxcard@tcg
			if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != p@tcg ) {
				continue
			}
			if ( domain@tcg(card@tcg(TCG_CARD_REF_DOMAIN, cnt)) == 0 ) {
				domain@tcg(card@tcg(TCG_CARD_REF_DOMAIN, cnt)) = 1
			}
		loop
		repeat 9
			if ( cnt == 4 | cnt == 5 ) { continue }
			if ( domain@tcg(cnt) ) {
				cpdata@tcg(TCG_PLAYER_DOMAIN, p@tcg)++
			}
		loop
		calcstartattb p@tcg
	loop
	return

#deffunc calcdecksize
	gdata(GDATA_DECK_SIZE + curdeck) = 0
	cardsize@tcg = 0
	cpdata@tcg(TCG_PLAYER_DOMAIN, 0) = 0
	dim domain@tcg, 9
	repeat maxcard@tcg
		cardsize@tcg += card(0, cnt)
		if ( deck(card@tcg(TCG_CARD_REF_DBID, cnt)) == 0 ) {
			continue
		}
		gdata(GDATA_DECK_SIZE + curdeck) += deck(card@tcg(TCG_CARD_REF_DBID, cnt))
		domain@tcg(card@tcg(TCG_CARD_REF_DOMAIN, cnt)) = 1
	loop
	repeat 9
		if ( cnt == 4 | cnt == 5 ) { continue }
		if ( domain@tcg(cnt) ) {
			cpdata@tcg(TCG_PLAYER_DOMAIN, 0)++
		}
	loop
	calcstartattb 0
	return

#deffunc decktest
	dim card, 4, MAX_CARD
	dim deck, MAX_CARD
	repeat MAX_CARD
		dbid = cnt
		gosub *db_card@
		gosub *db_card_custom
		if ( stat == 0 ) {
			continue
		}
		card(0, cnt) = 10
	loop
	return

#deffunc tcgdeck
	maxcard@tcg = MAX_CARD
	tcginit
	cardmode@tcg = 1
	i@tcg = 0
	repeat MAX_CARD
		if ( card(0, cnt) == 0 ) {
			continue
		}
		create_card i@tcg, cnt
		card@tcg(TCG_CARD_LOCATION, i@tcg) = TCG_LOCATION_DECK, 0
		i@tcg++
	loop
*tcgDeck_loop
	tcgdrawbg
	s@tcg = lang("白", "White"), lang("青", "Blue"), lang("銀", "Silver"), lang("赤", "Red"), lang("黒", "Black")
	repeat 5
		s@tcg(cnt) += lang("のデッキ", " Deck")
		file@tcg = "" + exedir + "tmp\\deck_" + cnt + ".s2"
		existwrapper file@tcg
		if ( strsize == (-1) ) {
			s@tcg(cnt) += lang(" (新規作成)", " (New)")
		}
		else {
			if ( gdata(GDATA_DECK_SIZE + cnt) != 30 ) {
				s@tcg(cnt) += " (NG " + gdata(GDATA_DECK_SIZE + cnt) + "/" + 30 + ")"
			}
			if ( gdata(GDATA_DECK) == cnt ) {
				s@tcg(cnt) += " [Use]"
			}
		}
		promptAdd s@tcg(cnt)
	loop
	val = basex@tcg + 400, basey@tcg + 230, 300, 1
	gosub *prompt_key@
	if ( rtval != (-1) ) {
		dim deck, MAX_CARD
		curdeck = rtval
		file = "" + exedir + "tmp\\deck_" + curdeck + ".s2"
		existwrapper file
		if ( strsize != (-1) ) {
			promptAdd lang("デッキの構築", "Edit Deck")
			promptAdd lang("メインデッキに設定", "Set as Main Deck")
			val = basex@tcg + 400, basey@tcg + 230, 240, 1
			gosub *prompt_key@
			if ( rtval == (-1) ) {
				goto *tcgDeck_loop
			}
			if ( rtval == 1 ) {
				gdata(GDATA_DECK) = curdeck
				goto *tcgDeck_loop
			}
			if ( rtval == 0 ) {
				fmode = 24
				gosub *game_ctrlFile@
			}
		}
		decksizebk@tcg = gdata(GDATA_DECK_SIZE + curdeck)
		snd SOUNDLIST_WEAR
		calcdecksize
		deckmode@tcg = 0, rtval@tcg
		gosub *select_deck
		goto *tcgDeck_loop
	}
	return

#deffunc tcgmain
	maxcard@tcg = 40 * 2
	tcginit
	repeat 2
		rp@tcg = cnt
		cpx@tcg(cnt) = basex@tcg + 23
		cpy@tcg(cnt) = basey@tcg + 236 - cnt * 120
		cpdata@tcg(TCG_PLAYER_LIFE, cnt) = 30
		cpdata@tcg(TCG_PLAYER_GRAVEYARD, cnt) = 0
		cpdata@tcg(TCG_PLAYER_DECK, cnt) = 30
		if ( rp@tcg == 0 ) {
			gosub *card_loadplayerdeck
		} else {
			gosub *card_generateopponentdeck
		}
		if ( cardsize@tcg < 30 ) {
			repeat 30 - cardsize@tcg
				cc@tcg = rp@tcg * 40 + cnt + cardsize@tcg
				card_ref rnd(MAX_CREATURE_ID - 3) + 1
				create_card cc@tcg, stat
				card@tcg(TCG_CARD_LOCATION, cc@tcg) = TCG_LOCATION_DECK, rp@tcg
			loop
		}
	loop
	calcdomain
	repeat 2
		cp@tcg = cnt
		repeat calcstartcard(cnt)
			getrandomcard cp@tcg
		loop
	loop
	ct@tcg = TCG_CONTROLLER_PLAYER
	// player@tcg = TCG_CONTROLLER_OBSERVER
*tcgmain_WHILE1
	cpisme
	gosub *phase_begin
	if ( gameover() ) {
		goto *tcgmain_WEND1
	}
	gosub *phase_draw
	if ( gameover() ) {
		goto *tcgmain_WEND1
	}
	gosub *phase_main
	if ( gameover() ) {
		goto *tcgmain_WEND1
	}
	gosub *phase_end
	if ( ct@tcg == TCG_CONTROLLER_PLAYER ) {
		ct@tcg = TCG_CONTROLLER_OPPONENT
	}
	else {
		ct@tcg = TCG_CONTROLLER_PLAYER
	}
	goto *tcgmain_WHILE1
*tcgmain_WEND1
	cardhelp lang("カードを捧げた。", "Game Over! Press Enter to leave."), 40
	tcgdraw
	await 15
	stick a@tcg
	key_check
	if ( key == key_enter | key == key_cancel | key == key_escape ) {
		return
	}
	goto *tcgmain_WEND1
	return

*phase_begin
	phase@tcg = 0
	turn@tcg++
	tcgdraw
	await 50
	sac@tcg = 0
	cpdata@tcg(TCG_PLAYER_MANA, cp@tcg) = cpdata@tcg(TCG_PLAYER_MAX_MANA, cp@tcg)
	repeat maxcard@tcg
		if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_FIELD ) {
			continue
		}
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != cp@tcg ) {
			continue
		}
		card@tcg(TCG_CARD_TURN_COUNT, cnt)++
		card@tcg(TCG_CARD_STATUS, cnt) = TCG_ACTION_NONE
		if ( cdbit(TCG_BIT_REGENERATION, cnt) ) {
			card@tcg(TCG_CARD_HP, cnt) = card@tcg(TCG_CARD_REF_HP, cnt)
		}
		if ( cdbit(TCG_BIT_WINDFURY, cnt) == TRUE ) {
			cdbitmod TCG_BIT_WINDFURY_USABLE, cnt, 1
		}
		cdbitmod TCG_BIT_EXHAUSTED, cnt, 0
		effac@tcg = cnt
		eff@tcg = card@tcg(TCG_CARD_EFFECT, cnt)
		// dialog "" + cnt + "/" + eff@tcg + "/" + effref@tcg(TCG_SKILL_TYPE, eff@tcg)
		if ( effref@tcg(TCG_SKILL_TYPE, eff@tcg) == TCG_SKILL_TYPE_TURN_START ) {
			gosub *card_action_choose_target
		}
	loop
	makecardlist
	tcgdraw
	return

*phase_draw
	phase@tcg = 1
	tcgdraw
	await 50
	getrandomcard cp@tcg
	tcgdraw
	return

*phase_main
	phase@tcg = 2
	tcgdraw
	await 50
	if ( cp@tcg == player@tcg ) {
		selectmode@tcg = 0
		gosub *card_player
	}
	else {
		selectmode@tcg = -1
		gosub *card_ai
	}
	return

*phase_end
	repeat maxcard@tcg
		if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_FIELD ) {
			continue
		}
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != cp@tcg ) {
			continue
		}
		effac@tcg = cnt
		eff@tcg = card@tcg(TCG_CARD_EFFECT, cnt)
		// dialog "" + cnt + "/" + eff@tcg + "/" + effref@tcg(TCG_SKILL_TYPE, eff@tcg)
		if ( effref@tcg(TCG_SKILL_TYPE, eff@tcg) == TCG_SKILL_TYPE_TURN_END ) {
			gosub *card_action_choose_target
		}
	loop
	makecardlist
	tcgdraw
	phase@tcg = 3
	if ( cp@tcg == player@tcg ) {
		selectmode@tcg = 0
	}
	else {
		selectmode@tcg = -1
	}
	repeat 5
		tcgdraw
	loop
	return

#deffunc csfix
	if ( clistmax@tcg(csline@tcg) == 0 ) {
		if ( csline@tcg != 0 ) {
			cs@tcg = -1
			csline@tcg = 0
		}
	}
	if ( cs@tcg == (-1) ) {
		if ( csline@tcg != 0 ) {
			cs@tcg = 0
		}
	}
	if ( cs@tcg >= clistmax@tcg(csline@tcg) ) {
		if ( csline@tcg == 0 ) {
			cs@tcg = -1
		}
		else {
			cs@tcg = 0
		}
	}
	if ( cs@tcg < (-1) ) {
		cs@tcg = clistmax@tcg(csline@tcg) - 1
	}
	return

#deffunc cslineup
	cslinebk@tcg = csline@tcg
	repeat
		csline@tcg++
		if ( csline@tcg == 4 ) {
			break
		}
		if ( clistmax@tcg(csline@tcg) != 0 ) {
			break
		}
	loop
	if ( csline@tcg == 4 ) {
		csline@tcg = 0
	}
	if ( csline@tcg == 0 ) {
		cs@tcg = -1
	}
	else {
		cs@tcg = 0
	}
	if ( cs@tcg >= clistmax@tcg(csline@tcg) ) {
		cs@tcg = clistmax@tcg(csline@tcg) - 1
	}
	return

#deffunc cslinedown
	cslinebk@tcg = csline@tcg
	if ( csline@tcg == 0 ) {
		csline@tcg = 4
	}
	repeat
		csline@tcg--
		if ( csline@tcg == (-1) ) {
			break
		}
		if ( clistmax@tcg(csline@tcg) != 0 ) {
			break
		}
	loop
	if ( csline@tcg == (-1) ) {
		csline@tcg = 0
	}
	if ( csline@tcg == 0 ) {
		cs@tcg = -1
	}
	else {
		cs@tcg = 0
	}
	if ( cs@tcg >= clistmax@tcg(csline@tcg) ) {
		cs@tcg = clistmax@tcg(csline@tcg) - 1
	}
	return

*refresh_bg
	gsel 4
	pos 0, 0
	picload exedir + "graphic\\bg_card.bmp", 1
	gmode 2
	font lang(cfg_font1, cfg_font2), 14 - en * 2, 0
	color 255, 255, 255
	repeat 2
		gmode 0
		cnt2@tcg = cnt
		dim mana@tcg, 10
		repeat landsum@tcg(cnt2@tcg)
			x@tcg = landix@tcg(cnt2@tcg) + cnt * limit(landspace@tcg - landsum@tcg(cnt2@tcg) / 2, 4, landspace@tcg)
			y@tcg = landiy@tcg(cnt2@tcg)
			m@tcg = landlist@tcg(cnt, cnt2@tcg)
			n@tcg = abs(card@tcg(TCG_CARD_REF_PIC, m@tcg))
			mana@tcg(card@tcg(TCG_CARD_REF_DOMAIN, m@tcg))++
			pos x@tcg, y@tcg
			// gcopy 2, n@tcg \ 22 * 72, n@tcg / 22 * 96, 72, 96
			gcopy 7, 72 + card@tcg(TCG_CARD_REF_DOMAIN, m@tcg) * 72, 0, 72, 96
		loop
		y@tcg = landiy@tcg(cnt2@tcg) + (cnt == 0) * 80
		x@tcg = landix@tcg(cnt2@tcg) - 16
		repeat 10
			if ( mana@tcg(cnt) == 0 ) {
				continue
			}
			pos x@tcg - 15, y@tcg - 2
			// gcopy 7, cnt * 12, 126, 12, 18
			gzoom 12, 18, 7, 72 + cnt * 72, 0, 72, 96
			pos x@tcg, y@tcg
			mes mana@tcg(cnt)
			if ( cnt2@tcg == 0 ) {
				y@tcg -= 20
			}
			else {
				y@tcg += 20
			}
		loop
		gravespace@tcg = 22
		if ( gravesum@tcg(cnt2@tcg) > 5 ) {
			gravespace@tcg = 110 / gravesum@tcg(cnt2@tcg)
		}
		repeat gravesum@tcg(cnt2@tcg)
			x@tcg = graveix@tcg(cnt2@tcg) - cnt * gravespace@tcg
			y@tcg = graveiy@tcg(cnt2@tcg)
			m@tcg = gravelist@tcg(cnt, cnt2@tcg)
			if ( card@tcg(TCG_CARD_REF_PIC, m@tcg) > 0 ) {
				gmode 2
				pos x@tcg, y@tcg
				gcopy 7, 72 + card@tcg(TCG_CARD_REF_BG, m@tcg) * 72, 0, 72, 96
				if ( gravesum@tcg(cnt2@tcg) <= 5 | cnt == gravesum@tcg(cnt2@tcg) - 1 ) {
					if ( card@tcg(TCG_CARD_REF_DBID, m@tcg) != 343 ) {
						n@tcg = card@tcg(TCG_CARD_REF_PIC, m@tcg) \ COLOR_TINT_MULT + card@tcg(TCG_CARD_REF_CHARA_PIC, m@tcg) * COLOR_TINT_MULT
						chara_preparepic n@tcg, (card@tcg(TCG_CARD_REF_PIC, m@tcg) - card@tcg(TCG_CARD_REF_CHARA_PIC, m@tcg) * COLOR_TINT_MULT) / COLOR_TINT_MULT
						gsel 4
					}
					else {
						n@tcg = 1
						chara_preparepic n@tcg, 0
						gsel 4
					}
					color 0, 0, 0
					pos x@tcg + 13, y@tcg + 32 - chipc(CHIPC_F, n@tcg) + chipc(CHIPC_HEIGHT, n@tcg) / 6
					gcopy 5, 0, 960, chipc(CHIPC_WIDTH, n@tcg), chipc(CHIPC_HEIGHT, n@tcg)
				}
			}
			else {
				gmode 0
				n@tcg = abs(card@tcg(TCG_CARD_REF_PIC, m@tcg))
				pos x@tcg, y@tcg
				gcopy 2, n@tcg \ 22 * 72, n@tcg / 22 * 96, 72, 96
			}
		loop
	loop
	gsel 0
	return

*tcg_drawDeck
	font lang(cfg_font1, cfg_font2), 10 + en - en * 2, 0
	color 255, 255, 255
	gmode 2
	repeat cfmax@tcg
		x@tcg = basex@tcg + 180 + cnt * 63
		y@tcg = basey@tcg + 26 + (ccf@tcg == cnt) * 3
		p@tcg = cflist@tcg(cnt)
		color 0, 0, 0
		if ( ccf@tcg == cnt ) {
			gmode 4, , , 255
			color 255, 255, 255
		}
		else {
			gmode 4, , , 120
			color 200, 200, 200
		}
		pos x@tcg, y@tcg
		gcopy 7, 360, 96, 63, 20
		gmode 2
		pos x@tcg + 1, y@tcg + 4
		mes cfname@tcg(p@tcg)
		if ( ccf@tcg == cnt ) {
			pos x@tcg + 65, y@tcg - 5
			gcopy 7, 288, 96, 24, 24
		}
	loop
	font lang(cfg_font1, cfg_font2), 13 + en - en * 2, 0
	repeat 8 * 3
		p@tcg = page@tcg * 8 + cnt
		if ( p@tcg >= dlistmax@tcg ) {
			break
		}
		c@tcg = dlist@tcg(0, p@tcg)
		i@tcg = card@tcg(TCG_CARD_REF_DBID, c@tcg)
		x@tcg = basex@tcg + 144 + cnt \ 8 * 80
		y@tcg = basey@tcg + 70 + cnt / 8 * 150
		if ( deckmode@tcg == 0 ) {
			if ( deck(i@tcg) != 0 ) {
				s@tcg = "" + deck(i@tcg)
			}
			else {
				s@tcg = ""
			}
			s@tcg += "(" + card(0, i@tcg) + ")"
			color 0, 0, 0
			pos x@tcg + 1, y@tcg + 111
			mes s@tcg
			if ( deck(i@tcg) != 0 ) {
				color 150, 255, 150
			}
			else {
				color 200, 200, 200
			}
			pos x@tcg, y@tcg + 110
			mes s@tcg
		}
		card@tcg(TCG_CARD_X, c@tcg) = x@tcg
		card@tcg(TCG_CARD_Y, c@tcg) = y@tcg
		tcgdrawcard c@tcg, 1
	loop
	font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
	color 255, 255, 255
	pos basex@tcg + 160, basey@tcg + 510
	mes lang("" + key_next + "," + key_prev + ",Tab [フィルター切替]  決定ｷｰ [カード選択]  ｷｬﾝｾﾙｷｰ [終了]", "" + key_next + "," + key_prev + " [Change Filter] " + key_fire + " [Filter Type] Enter [Select]  Cancel [Exit]")
	pos basex@tcg + 700, basey@tcg + 510
	mes "Page " + ((dsc@tcg / 8 / 3) + 1) + "/" + (((dlistmax@tcg - 1) / 8 / 3) + 1)
	return

*tcg_drawInterface
	gmode 0
	pos basex@tcg, basey@tcg
	gcopy 4, 0, 0, basew@tcg, baseh@tcg
	font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
	gmode 2
	pos basex@tcg + 20, basey@tcg + 22
	if ( cardmode@tcg != 0 | ct@tcg == player@tcg ) {
		gcopy 7, 360, 120, 88, 84
	}
	else {
		gcopy 7, 456, 120, 88, 84
	}
	if ( cardmode@tcg == 0 ) {
		color 0, 0, 0
		pos basex@tcg + 39, basey@tcg + 58
		mes "Turn " + turn@tcg
		color 255, 255, 255
		pos basex@tcg + 38, basey@tcg + 57
		mes "Turn " + turn@tcg
		repeat 2
			x@tcg = cpx@tcg(cnt)
			y@tcg = cpy@tcg(cnt)
			pos x@tcg, y@tcg
			gcopy 7, 264, 144, 72, 120
			s@tcg = "" + cpdata@tcg(TCG_PLAYER_LIFE, cnt)
			pos x@tcg + 36 - strlen(s@tcg) * 3, y@tcg + 9 - en
			mes s@tcg
			if ( cnt != player@tcg & debug == 0 ) {
				s@tcg = "?/" + cpdata@tcg(TCG_PLAYER_MAX_MANA, cnt)
			}
			else {
				s@tcg = "" + cpdata@tcg(TCG_PLAYER_MANA, cnt) + "/" + cpdata@tcg(TCG_PLAYER_MAX_MANA, cnt)
			}
			pos x@tcg + 36 - strlen(s@tcg) * 3, y@tcg + 95 - en
			mes s@tcg
		loop
		repeat 4
			if ( cnt - 1 == phase@tcg ) {
				pos basex@tcg + 4, basey@tcg + 370 + cnt * 20
				gcopy 7, 360, 216, 106, 18
			}
			pos basex@tcg + 36, basey@tcg + 373 + cnt * 20
			if ( cnt == 0 ) {
				if ( ct@tcg == player@tcg ) {
					color 150, 150, 255
					mes "Player"
				}
				else {
					color 255, 150, 150
					mes "Opponent"
				}
				color 215, 215, 215
			}
			else {
				mes phasen@tcg(cnt - 1)
			}
		loop
	}
	else {
		color 0, 0, 0
		pos basex@tcg + 41, basey@tcg + 53
		mes "Deck\n Editor"
		color 255, 255, 255
		pos basex@tcg + 40, basey@tcg + 52
		mes "Deck\n Editor"
		if ( gdata(GDATA_DECK_SIZE + curdeck) != 30 ) {
			color 255, 100, 100
		}
		else {
			color 100, 255, 100
		}
		pos basex@tcg + 24, basey@tcg + 120
		mes "Deck " + gdata(GDATA_DECK_SIZE + curdeck) + "/" + 30
		color 215, 215, 215
		pos basex@tcg + 24, basey@tcg + 140
		mes "Life " + cpdata@tcg(TCG_PLAYER_LIFE, 0)
		pos basex@tcg + 24, basey@tcg + 160
		mes "Mana " + cpdata@tcg(TCG_PLAYER_MAX_MANA, 0)
		pos basex@tcg + 24, basey@tcg + 180
		mes "Card " + calcstartcard(0)
		pos basex@tcg + 24, basey@tcg + 220
		mes "Domain * " + cpdata@tcg(TCG_PLAYER_DOMAIN, 0)
		s@tcg = ""
		repeat 9
			if ( domain@tcg(cnt) ) {
				s@tcg += "" + domname@tcg(cnt) + "\n"
			}
		loop
		pos basex@tcg + 24, basey@tcg + 240
		mes s@tcg
	}
	if ( gdata(GDATA_QUICK_USE) == 1 ) {
		font lang(cfg_font1, cfg_font2), 12 + en - en * 2, 0
		pos basex@tcg + 125, basey@tcg + 542
		mes helpmsg@tcg
	}
	else {
		font lang(cfg_font1, cfg_font2), 11 + en - en * 2, 0
		pos basex@tcg + 120, basey@tcg + 537
		mes helpmsg@tcg
	}
	return

*tcg_initBg
	gmode 4, , , 180
	redraw 0
	repeat 2
		cnt2@tcg = cnt
	loop
	gsel 0
	return

*select_deck_pos
	if ( dsc@tcg < 0 ) {
		dsc@tcg = dlistmax@tcg - 1
	}
	if ( dsc@tcg >= dlistmax@tcg ) {
		dsc@tcg = 0
	}
	if ( dsc@tcg >= (page@tcg + 3) * 8 ) {
		page@tcg = dsc@tcg / 8
	}
	if ( dsc@tcg < page@tcg * 8 ) {
		page@tcg = dsc@tcg / 8
	}
	page@tcg = page@tcg - page@tcg \ 3
	return

*select_deck
	gsel 4
	pos 0, 0
	picload exedir + "graphic\\bg_card.bmp", 1
	gsel 0
	dim dlist@tcg, 2, 400
	dim cflist@tcg, 10
	sdim cfname@tcg, 16, 10
	cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), domname@tcg(0), domname@tcg(1), domname@tcg(2), domname@tcg(3), domname@tcg(4), domname@tcg(5), domname@tcg(6), domname@tcg(7), domname@tcg(8), domname@tcg(9)
	cflist@tcg = 0
	cfmax@tcg = 1
	ccf@tcg = 0
	if ( deckmode@tcg == 0 ) {
		cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9
		cfmax@tcg = 9
		if ( filtertype@tcg == 0 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "0-150", "151-300", "301-450", "451-600", "601-750", "751-900", "900+  ", "All" 
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 10
		}
		if ( filtertype@tcg == 1 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "Blue", "Green", "White", "Black", "Neutral", "Legendary", "Gray", "Red", "All"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 10
		}
		if ( filtertype@tcg == 2 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "0", "1", "2", "3", "4", "5", "6", "7", "8+"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 10
		}
		if ( filtertype@tcg == 3 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "1-", "2", "3", "4", "5", "6", "7", "8", "9+"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 10
		}
		if ( filtertype@tcg == 4 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "1", "2", "3", "4", "5", "6", "7", "8", "9+"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 10
		}
		if ( filtertype@tcg == 5 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "seamonster", "frog", "snail", "shell", "spirit", "slime", "bird", "mushroom"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 9
		}
		if ( filtertype@tcg == 6 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "wisp", "bacteria", "wasp", "rabbit", "dinosaur", "largeanimal", "mandrake", "horse"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 9
		}
		if ( filtertype@tcg == 7 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "beast", "bear", "ent", "sheep", "dog", "fairy", "beetle"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 8
		}
		if ( filtertype@tcg == 8 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "minotaur", "lizardman", "orc", "goblin", "kobolt", "yeek", "medusa", "harpy"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 9
		}
		if ( filtertype@tcg == 9 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "snake", "rat", "mutant", "mazin", "imp", "hand", "dragon", "giant"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 9
		}
		if ( filtertype@tcg == 10 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "drake", "eye", "asura", "rock", "yith", "cupid", "metal"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 8
		}
		if ( filtertype@tcg == 11 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "zombie", "ghost", "piece", "armor", "lich", "skeleton", "golem", "bat"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 9
		}
		if ( filtertype@tcg == 12 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "spider", "worm", "cat", "eulderna", "roran", "karune", "dwarf", "elea"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 9
		}
		if ( filtertype@tcg == 13 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "yerles", "juere", "norland", "zanan", "catsister", "quickling", "machine", "vehicle"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 9
		}
		if ( filtertype@tcg == 14 ) {
			cfname@tcg = lang("候補", "List"), lang("デッキ", "Deck"), "undeadgod", "machinegod", "catgod", "doggod", "servant", "god"
			cflist@tcg = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			cfmax@tcg = 7
		}
	}
*select_deck_loop
	dlistmax@tcg = 0
	dsc@tcg = 0
	repeat maxcard@tcg
		if ( card@tcg(TCG_CARD_LOCATION, cnt) != TCG_LOCATION_DECK ) {
			continue
		}
		if ( card@tcg(TCG_CARD_CONTROLLER, cnt) != cp@tcg ) {
			continue
		}
		if ( cflist@tcg(ccf@tcg) == 1 ) {
			if ( deck(card@tcg(TCG_CARD_REF_DBID, cnt)) == 0 ) {
				continue
			}
	}
		if ( cflist@tcg(ccf@tcg) >= 2 ) {
			if ( filtertype@tcg == 0 ) {
				if ( cflist@tcg(ccf@tcg) <= 8 ) {
					if ( limit((card@tcg(TCG_CARD_REF_DBID, cnt) - 1) / 150, 0, 6)  != cflist@tcg(ccf@tcg) - 2 ) {
						continue
					}
				}
			}
			if ( filtertype@tcg == 1 ) {
				if ( cflist@tcg(ccf@tcg) <= 9 ) {
					if ( card@tcg(TCG_CARD_REF_DOMAIN, cnt) != cflist@tcg(ccf@tcg) - 2 ) {
						continue
					}
				}
			}
			if ( filtertype@tcg == 2 ) {
				if ( cflist@tcg(ccf@tcg) <= 9 ) {
					if ( card@tcg(TCG_CARD_REF_COST, cnt) != cflist@tcg(ccf@tcg) - 2 ) {
						continue
					}
				}
				if ( cflist@tcg(ccf@tcg) == 10 ) {
					if ( card@tcg(TCG_CARD_REF_COST, cnt) < cflist@tcg(ccf@tcg) - 2 ) {
						continue
					}
				}
			}
			if ( filtertype@tcg == 3 ) {
				if ( cflist@tcg(ccf@tcg) == 2 ) {
					if ( card@tcg(TCG_CARD_REF_ATTACK, cnt) > 1 ) {
						continue
					}
				}
				if ( cflist@tcg(ccf@tcg) <= 9 & cflist@tcg(ccf@tcg) >= 3 ) {
					if ( card@tcg(TCG_CARD_REF_ATTACK, cnt) != cflist@tcg(ccf@tcg) - 1 ) {
						continue
					}
				}
				if ( cflist@tcg(ccf@tcg) == 10 ) {
					if ( card@tcg(TCG_CARD_REF_ATTACK, cnt) < cflist@tcg(ccf@tcg) - 1 ) {
						continue
					}
				}
			}
			if ( filtertype@tcg == 4 ) {
				if ( cflist@tcg(ccf@tcg) == 2 ) {
					if ( card@tcg(TCG_CARD_REF_HP, cnt) > 1 ) {
						continue
					}
				}
				if ( cflist@tcg(ccf@tcg) <= 9 & cflist@tcg(ccf@tcg) >= 3 ) {
					if ( card@tcg(TCG_CARD_REF_HP, cnt) != cflist@tcg(ccf@tcg) - 1 ) {
						continue
					}
				}
				if ( cflist@tcg(ccf@tcg) == 10 ) {
					if ( card@tcg(TCG_CARD_REF_HP, cnt) < cflist@tcg(ccf@tcg) - 1 ) {
						continue
					}
				}
			}
			if ( filtertype@tcg == 5 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "seamonster" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "frog" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "snail" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "shell" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "spirit" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "slime" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "bird" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 9 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "mushroom" ) { continue }
			}
			if ( filtertype@tcg == 6 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "wisp" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "bacteria" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "wasp" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "rabbit" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "dinosaur" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "largeanimal" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "mandrake" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 9 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "horse" ) { continue }
			}
			if ( filtertype@tcg == 7 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "beast" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "bear" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "ent" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "sheep" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "dog" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "fairy" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "beetle" ) { continue }
			}
			if ( filtertype@tcg == 8 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "minotaur" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "lizardman" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "orc" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "goblin" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "kobolt" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "yeek" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "medusa" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 9 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "harpy" ) { continue }
			}
			if ( filtertype@tcg == 9 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "snake" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "rat" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "mutant" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "mazin" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "imp" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "hand" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "dragon" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 9 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "giant" ) { continue }
			}
			if ( filtertype@tcg == 10 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "drake" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "eye" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "asura" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "rock" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "yith" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "cupid" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "metal" ) { continue }
			}
			if ( filtertype@tcg == 11 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "zombie" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "ghost" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "piece" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "armor" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "lich" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "skeleton" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "golem" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 9 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "bat" ) { continue }
			}
			if ( filtertype@tcg == 12 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "spider" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "worm" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "cat" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "eulderna" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "roran" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "karune" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "dwarf" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 9 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "elea" ) { continue }
			}
			if ( filtertype@tcg == 13 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "yerles" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "juere" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "norland" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "zanan" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "catsister" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "quickling" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 8 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "machine" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 9 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "vehicle" ) { continue }
			}
			if ( filtertype@tcg == 14 ) {
				if ( cflist@tcg(ccf@tcg) == 2 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "undeadgod" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 3 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "machinegod" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 4 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "catgod" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 5 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "doggod" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 6 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "servant" ) { continue }
				if ( cflist@tcg(ccf@tcg) == 7 & cardn@tcg(TCG_CARDN_REF_RACE, cnt) != "god" ) { continue }
			}
		}
		if ( deckmode@tcg == 1 ) {
			if ( cardn@tcg(TCG_CARDN_REF_RACE, cnt) != deckrefn@tcg ) {
				continue
			}
		}
		if ( deckmode@tcg == 1 | deckmode@tcg == 2 ) {
			f@tcg = 0
			cnt2@tcg = cnt
			repeat dlistmax@tcg
				c@tcg = dlist@tcg(0, cnt)
				if ( card@tcg(TCG_CARD_REF_DBID, c@tcg) == card@tcg(TCG_CARD_REF_DBID, cnt2@tcg) ) {
					f@tcg = 1
					break
				}
			loop
			if ( f@tcg ) {
				continue
			}
		}
		cdbitmod TCG_BIT_FACE_UP, cnt, 1
		dlist@tcg(0, dlistmax@tcg) = cnt
		dlistmax@tcg++
	loop
	repeat
		f@tcg = 0
		if ( dlistmax@tcg == 0 ) {
			break
		}
		repeat dlistmax@tcg - 1
			p@tcg = card@tcg(TCG_CARD_REF_DBID, dlist@tcg(0, cnt)), card@tcg(TCG_CARD_REF_DBID, dlist@tcg(0, cnt + 1))
			if ( p@tcg > p@tcg(1) ) {
				f@tcg = 1
				p@tcg = dlist@tcg(0, cnt), dlist@tcg(1, cnt)
				dlist@tcg(0, cnt) = dlist@tcg(0, cnt + 1), dlist@tcg(1, cnt + 1)
				dlist@tcg(0, cnt + 1) = p@tcg, p@tcg(1)
			}
		loop
		if ( f@tcg == 0 ) {
			break
		}
	loop
	gosub *select_deck_pos
*select_deck_loop_WHILE1
	redraw 0
	gosub *tcg_drawInterface
	gosub *tcg_drawDeck
	redraw 1
	await 30
	key_check
	if ( key == key_next ) {
		ccf@tcg++
		snd SOUNDLIST_CURSOR1
		if ( ccf@tcg >= cfmax@tcg ) {
			ccf@tcg = 0
		}
		goto *select_deck_loop
	}
	if ( key == key_fire ) {
		filtertype@tcg++
		if ( filtertype@tcg > 14 ) {
			filtertype@tcg = 0
		}
		if ( filtertype@tcg < 0 ) {
			filtertype@tcg = 0
		}
		goto *select_deck
	}
	if ( key == key_prev ) {
		ccf@tcg--
		snd SOUNDLIST_CURSOR1
		if ( ccf@tcg < 0 ) {
			ccf@tcg = cfmax@tcg - 1
		}
		goto *select_deck_loop
	}
	if ( key == key_west ) {
		dsc@tcg--
		snd SOUNDLIST_CURSOR1
	}
	if ( key == key_east ) {
		dsc@tcg++
		snd SOUNDLIST_CURSOR1
	}
	if ( key == key_south ) {
		dsc@tcg += 8
		snd SOUNDLIST_CURSOR1
	}
	if ( key == key_north ) {
		dsc@tcg -= 8
		snd SOUNDLIST_CURSOR1
	}
	gosub *select_deck_pos
	if ( key == key_enter ) {
		if ( dlistmax@tcg == 0 ) {
			goto *select_deck_loop_WHILE1_CONTINUE
		}
		if ( deckmode@tcg == 0 ) {
*select_deck_loop_WHILE2
			redraw 0
			calcdecksize
			gosub *tcg_drawInterface
			gosub *tcg_drawDeck
			act@tcg = 0, 0, 0
			cc@tcg = dlist@tcg(0, dsc@tcg)
			if ( deck(card@tcg(TCG_CARD_REF_DBID, cc@tcg)) < card(0, card@tcg(TCG_CARD_REF_DBID, cc@tcg)) ) {
				act@tcg(0) = 1
			}
			if ( deck(card@tcg(TCG_CARD_REF_DBID, cc@tcg)) != 0 ) {
				act@tcg(1) = 1
			}
			if ( act@tcg(0) == 0 ) {
				if ( act@tcg(1) == 0 ) {
					snd SOUNDLIST_FAIL1
					goto *select_deck_loop_WEND2
				}
			}
			gosub *select_action
			if ( f@tcg == 0 ) {
				if ( act@tcg(0) ) {
					if ( card@tcg(TCG_CARD_REF_DOMAIN, cc@tcg) == 5 & deck(card@tcg(TCG_CARD_REF_DBID, cc@tcg)) >= 1 ) {
						cardhelp lang("デッキに同じ伝説のカードを1枚しか入れることができない。", "You can only put 1 copy of the same Legendary Card in your deck."), 40
						deck(card@tcg(TCG_CARD_REF_DBID, cc@tcg)) = 1
						snd SOUNDLIST_FAIL1
						goto *select_deck_loop_WEND2
					}
					deck(card@tcg(TCG_CARD_REF_DBID, cc@tcg))++
					snd SOUNDLIST_CARD1
					goto *select_deck_loop_WHILE2_CONTINUE
				}
			}
			if ( f@tcg == 1 ) {
				if ( act@tcg(1) ) {
					deck(card@tcg(TCG_CARD_REF_DBID, cc@tcg))--
					snd SOUNDLIST_CARD1
					goto *select_deck_loop_WHILE2_CONTINUE
				}
			}
			goto *select_deck_loop_WEND2
*select_deck_loop_WHILE2_CONTINUE
			goto *select_deck_loop_WHILE2
*select_deck_loop_WEND2
			calcdecksize
			goto *select_deck_loop_WHILE1_CONTINUE
		}
		rtval@tcg = dlist@tcg(0, dsc@tcg)
		rtval@tcg = 1
		goto *select_deck_loop_WEND1
	}
	if ( key == key_cancel ) {
		if ( deckmode@tcg == 0 ) {
			promptAdd lang("セーブして終了", "Save & Exit")
			promptAdd lang("セーブしないで終了", "Just Exit")
			val = basex@tcg + 420, basey@tcg + 230, 240, 1
			gosub *prompt_key@
			if ( rtval == 0 ) {
				file = "" + exedir + "tmp\\deck_" + curdeck + ".s2"
				fmode = 23
				gosub *game_ctrlFile@
			}
			else {
				gdata(GDATA_DECK_SIZE + curdeck) = decksizebk@tcg
			}
			if ( rtval == (-1) ) {
				goto *select_deck_loop_WHILE1_CONTINUE
			}
		}
		rtval@tcg = 0
		goto *select_deck_loop_WEND1
	}
*select_deck_loop_WHILE1_CONTINUE
	goto *select_deck_loop_WHILE1
*select_deck_loop_WEND1
	gsel 4
	pos 0, 0
	picload exedir + "graphic\\bg_card.bmp", 1
	gosub *tcg_initBg
	return rtval@tcg

*card_player
	if ( selectmode@tcg == 0 ) {
		cs@tcg = -1
		csline@tcg = 0
	}
	if ( selectmode@tcg == 1 ) {
		if ( cs@tcg == (-1) ) {
			csline@tcg = 0
		}
		else {
			csline@tcg = 1
		}
	}
*card_player_WHILE1
	tcgdraw
	cursor@tcg = 1
	await 15
	stick a@tcg
	key_check
	if ( key == key_east ) {
		cs@tcg++
		snd SOUNDLIST_CURSOR1
		if ( cs@tcg == 0 ) {
			if ( clistmax@tcg(csline@tcg) == 0 ) {
				cslineup
			}
		}
		csfix
	}
	if ( key == key_west ) {
		cs@tcg--
		snd SOUNDLIST_CURSOR1
		if ( cs@tcg == (-1) ) {
			if ( csline@tcg != 0 ) {
				cs@tcg = clistmax@tcg(csline@tcg) - 1
			}
		}
		if ( cs@tcg == (-2) ) {
			if ( clistmax@tcg(csline@tcg) == 0 ) {
				cslinedown
			}
		}
		csfix
	}
	if ( key == key_north ) {
		cslineup
		snd SOUNDLIST_CURSOR1
		csfix
	}
	if ( key == key_south ) {
		cslinedown
		snd SOUNDLIST_CURSOR1
		csfix
	}
	if ( key == key_enter ) {
		if ( cs@tcg == (-1) ) {
			goto *card_player_WEND1
		}
		act@tcg = 0, 0, 0
		s@tcg = ""
		cc@tcg = clist@tcg(cs@tcg, csline@tcg)
		if ( csline@tcg == 0 | (csline@tcg == 3 & debug == 1) ) {
			if ( card@tcg(TCG_CARD_COST, cc@tcg) <= cpdata@tcg(TCG_PLAYER_MANA, cp@tcg) ) {
				if ( card@tcg(TCG_CARD_REF_TYPE, cc@tcg) == TCG_TYPE_SPELL | selectmode@tcg == 0 ) {
					act@tcg(0) = 1
					s@tcg += lang("↑   カードを出す。\n", "UP: Put the card.\n")
				}
			}
			if ( sac@tcg == 0 ) {
				if ( selectmode@tcg == 0 ) {
					act@tcg(1) = 1
					s@tcg += lang("↓   カードを捧げてマナを得る(1ターンに1回)。\n", "Down: Sacrifice the card.\n")
				}
			}
		}
		if ( csline@tcg == 1 | (csline@tcg == 2 & debug == 1) ) {
			if ( selectmode@tcg == 0 ) {
				if ( card@tcg(TCG_CARD_STATUS, cc@tcg) != TCG_ACTION_ATTACKING ) {
					if ( cardcandeclareattack(cc@tcg) ) {
						act@tcg(0) = 1
						s@tcg += lang("↑   攻撃を宣言する。\n", "UP: Declare an attack.\n")
					}
				}
			}
			if ( selectmode@tcg == 1 ) {
				if ( cardcanblock(cc@tcg, attackingcard@tcg) ) {
					act@tcg(0) = 1
					s@tcg += lang("↑   ブロックする。\n", "UP: Block.\n")
				}
			}
			if ( cardcanuseskill(cc@tcg) ) {
				act@tcg(2) = 1
				s@tcg += lang("決定 スキルを使用する。\n", "ENTER: Use the skill.\n")
			}
		}
		f@tcg = 0
		repeat 3
			if ( act@tcg(cnt) != 0 ) {
				f@tcg = 1
				break
			}
		loop
		if ( f@tcg == 0 ) {
			if ( debug == 0 ) {
				snd SOUNDLIST_FAIL1
				cardhelp lang("可能な行動はない。", "There is no action available."), 40
				goto *card_player_WHILE1_CONTINUE
			}
		}
		snd SOUNDLIST_CLICK1
		cardhelp s@tcg, 10
		tcgdraw
		gosub *select_action
		cc@tcg = clist@tcg(cs@tcg, csline@tcg)
		key = ""
		if ( f@tcg == (-1) ) {
			goto *card_player_WHILE1_CONTINUE
		}
		if ( act@tcg(f@tcg) == 0 ) {
			if ( debug == 0 ) {
				goto *card_player_WHILE1_CONTINUE
			}
		}
		if ( csline@tcg == 1 | (csline@tcg == 2 & debug == 1) ) {
			if ( f@tcg == 0 ) {
				if ( selectmode@tcg == 1 ) {
					attacktarget@tcg = cc@tcg
					goto *card_player_WEND1
				}
				cardstack@tcg(TCG_STACK, stack@tcg) = cc@tcg, TCG_ACTION_ATTACKING, cp@tcg
				stack@tcg++
				actionproc
				if ( gameover() ) {
					goto *card_player_WEND1
				}
				if ( cs@tcg >= clistmax@tcg(csline@tcg) ) {
					cs@tcg = clistmax@tcg(csline@tcg) - 1
				}
				csfix
				goto *card_player_WHILE1_CONTINUE
			}
			if ( f@tcg == 1 ) {
				card@tcg(TCG_CARD_STATUS, cc@tcg) = TCG_ACTION_NONE
			}
			if ( f@tcg == 2 ) {
				cardstack@tcg(TCG_STACK, stack@tcg) = cc@tcg, TCG_ACTION_INVOKING, cp@tcg
				stack@tcg++
				if ( chainmode@tcg ) {
					chaincontinue@tcg = 1
					spellused@tcg = 1
					goto *card_player_WEND1
				}
				actionproc
				if ( gameover() ) {
					goto *card_player_WEND1
				}
			}
			if ( cs@tcg >= clistmax@tcg(csline@tcg) ) {
				cs@tcg = clistmax@tcg(csline@tcg) - 1
			}
			csfix
			goto *card_player_WHILE1_CONTINUE
		}
		if ( f@tcg == 1 ) {
			cursor@tcg = 0
			saccard cc@tcg, cp@tcg + (csline@tcg == 3)
			if ( cs@tcg >= clistmax@tcg(csline@tcg) ) {
				cs@tcg = clistmax@tcg(csline@tcg) - 1
			}
			csfix
			goto *card_player_WHILE1_CONTINUE
		}
		if ( f@tcg == 0 ) {
			cursor@tcg = 0
			putcard cc@tcg, cp@tcg + (csline@tcg == 3)
			if ( gameover() ) {
				goto *card_player_WEND1
			}
			if ( card@tcg(TCG_CARD_REF_TYPE, cc@tcg) == TCG_TYPE_SPELL ) {
				cardstack@tcg(TCG_STACK, stack@tcg) = cc@tcg, TCG_ACTION_INVOKING, cp@tcg
				stack@tcg++
				if ( chainmode@tcg ) {
					chaincontinue@tcg = 1
					spellused@tcg = 1
					goto *card_player_WEND1
				}
				actionproc
			}
			if ( gameover() ) {
				goto *card_player_WEND1
			}
		}
		if ( cs@tcg >= clistmax@tcg(csline@tcg) ) {
			cs@tcg = clistmax@tcg(csline@tcg) - 1
		}
		csfix
	}
	if ( key == key_cancel ) {
		goto *card_player_WEND1
	}
	if ( key == "s"  | key_escape ) {
		promptAdd lang("降参する", "Surrender")
		val = basex@tcg + 420, basey@tcg + 230, 200, 1
		gosub *prompt_key@
		if ( rtval == 0 ) {
			cpdata@tcg(TCG_PLAYER_LIFE, 0) = 0
			cursor@tcg = 0
			return
		}
	}
	if ( debug ) {
		getkey a@tcg, 112
		if ( a@tcg ) {
			repeat 5
				getrandomcard cp@tcg
			loop
		}
		getkey a@tcg, 113
		if ( a@tcg ) {
			deckmode@tcg = 0
			deckrefn@tcg = "slime"
			gosub *select_deck
		}
	}
*card_player_WHILE1_CONTINUE
	goto *card_player_WHILE1
*card_player_WEND1
	cursor@tcg = 0
	return

*select_action
	redraw 0
	p@tcg = 0
	i@tcg = 0
	f@tcg = 1
*select_action_WHILE1
	p@tcg++
	i@tcg += f@tcg
	if ( i@tcg > 30 ) {
		f@tcg = -1
	}
	else {
		if ( i@tcg < 0 ) {
			f@tcg = 1
		}
	}
	repeat 3
		x@tcg(cnt) = card@tcg(TCG_CARD_X, cc@tcg) + 20
		if ( cnt == 0 ) {
			y@tcg(cnt) = card@tcg(TCG_CARD_Y, cc@tcg) - limit(p@tcg * 3, 0, 16)
		}
		if ( cnt == 1 ) {
			y@tcg(cnt) = card@tcg(TCG_CARD_Y, cc@tcg) + 60 + limit(p@tcg * 3, 0, 16)
		}
		if ( cnt == 2 ) {
			y@tcg(cnt) = card@tcg(TCG_CARD_Y, cc@tcg) + 30
		}
		gmode 0
		gsel 7
		pos cnt * 48, 264
		gcopy 0, x@tcg(cnt), y@tcg(cnt), 36, 36
		gsel 0
		if ( act@tcg(cnt) == 0 ) {
			continue
		}
		color 0, 0, 0
		gmode 4, 0, 0, limit(p@tcg * 30 + 20, 0, 255)
		pos x@tcg(cnt), y@tcg(cnt)
		gcopy 7, 192, 96, 36, 36
		gmode 4, 0, 0, 50 + i@tcg * 2
		pos x@tcg(cnt) + 13, y@tcg(cnt) + 11
		gcopy 7, 336 + (cnt == 2) * 12, 96 + cnt \ 2 * 24, 12, 12
	loop
	redraw 1
	redraw 0
	gmode 0
	repeat 3
		if ( act@tcg(cnt) == 0 ) {
			continue
		}
		pos x@tcg(cnt), y@tcg(cnt)
		gcopy 7, cnt * 48, 264, 36, 36
	loop
	await 15
	key_check
	if ( key == key_north ) {
		f@tcg = 0
		goto *select_action_WEND1
	}
	if ( key == key_south ) {
		f@tcg = 1
		goto *select_action_WEND1
	}
	if ( key == key_enter ) {
		f@tcg = 2
		goto *select_action_WEND1
	}
	if ( key != "" ) {
		f@tcg = -1
		goto *select_action_WEND1
	}
	goto *select_action_WHILE1
*select_action_WEND1
	return

#include "tcg_ai.hsp"
